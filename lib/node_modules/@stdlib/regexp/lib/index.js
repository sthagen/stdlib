/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace regexp
*/
var regexp = {};

/**
* @name RE_BASENAME
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/basename}
*/
setReadOnly( regexp, 'RE_BASENAME', require( '@stdlib/regexp/basename' ) );

/**
* @name RE_BASENAME_POSIX
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/basename-posix}
*/
setReadOnly( regexp, 'RE_BASENAME_POSIX', require( '@stdlib/regexp/basename-posix' ) );

/**
* @name RE_BASENAME_WINDOWS
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/basename-windows}
*/
setReadOnly( regexp, 'RE_BASENAME_WINDOWS', require( '@stdlib/regexp/basename-windows' ) );

/**
* @name RE_COLOR_HEXADECIMAL
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/color-hexadecimal}
*/
setReadOnly( regexp, 'RE_COLOR_HEXADECIMAL', require( '@stdlib/regexp/color-hexadecimal' ) );

/**
* @name reDecimalNumber
* @memberof regexp
* @readonly
* @type {Function}
* @see {@link module:@stdlib/regexp/decimal-number}
*/
setReadOnly( regexp, 'reDecimalNumber', require( '@stdlib/regexp/decimal-number' ) );

/**
* @name RE_DIRNAME
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/dirname}
*/
setReadOnly( regexp, 'RE_DIRNAME', require( '@stdlib/regexp/dirname' ) );

/**
* @name RE_DIRNAME_POSIX
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/dirname-posix}
*/
setReadOnly( regexp, 'RE_DIRNAME_POSIX', require( '@stdlib/regexp/dirname-posix' ) );

/**
* @name RE_DIRNAME_WINDOWS
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/dirname-windows}
*/
setReadOnly( regexp, 'RE_DIRNAME_WINDOWS', require( '@stdlib/regexp/dirname-windows' ) );

/**
* @name reEOL
* @memberof regexp
* @readonly
* @type {Function}
* @see {@link module:@stdlib/regexp/eol}
*/
setReadOnly( regexp, 'reEOL', require( '@stdlib/regexp/eol' ) );

/**
* @name reExtendedLengthPath
* @memberof regexp
* @readonly
* @type {Function}
* @see {@link module:@stdlib/regexp/extended-length-path}
*/
setReadOnly( regexp, 'reExtendedLengthPath', require( '@stdlib/regexp/extended-length-path' ) );

/**
* @name RE_EXTNAME
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/extname}
*/
setReadOnly( regexp, 'RE_EXTNAME', require( '@stdlib/regexp/extname' ) );

/**
* @name RE_EXTNAME_POSIX
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/extname-posix}
*/
setReadOnly( regexp, 'RE_EXTNAME_POSIX', require( '@stdlib/regexp/extname-posix' ) );

/**
* @name RE_EXTNAME_WINDOWS
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/extname-windows}
*/
setReadOnly( regexp, 'RE_EXTNAME_WINDOWS', require( '@stdlib/regexp/extname-windows' ) );

/**
* @name RE_FILENAME
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/filename}
*/
setReadOnly( regexp, 'RE_FILENAME', require( '@stdlib/regexp/filename' ) );

/**
* @name RE_FILENAME_POSIX
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/filename-posix}
*/
setReadOnly( regexp, 'RE_FILENAME_POSIX', require( '@stdlib/regexp/filename-posix' ) );

/**
* @name RE_FILENAME_WINDOWS
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/filename-windows}
*/
setReadOnly( regexp, 'RE_FILENAME_WINDOWS', require( '@stdlib/regexp/filename-windows' ) );

/**
* @name RE_FUNCTION_NAME
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/function-name}
*/
setReadOnly( regexp, 'RE_FUNCTION_NAME', require( '@stdlib/regexp/function-name' ) );

/**
* @name RE_NATIVE_FUNCTION
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/native-function}
*/
setReadOnly( regexp, 'RE_NATIVE_FUNCTION', require( '@stdlib/regexp/native-function' ) );

/**
* @name RE_REGEXP
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/regexp}
*/
setReadOnly( regexp, 'RE_REGEXP', require( '@stdlib/regexp/regexp' ) );

/**
* @name RE_UNC_PATH
* @memberof regexp
* @readonly
* @constant
* @type {RegExp}
* @see {@link module:@stdlib/regexp/unc-path}
*/
setReadOnly( regexp, 'RE_UNC_PATH', require( '@stdlib/regexp/unc-path' ) );

/**
* @name reUtf16SurrogatePair
* @memberof regexp
* @readonly
* @type {Function}
* @see {@link module:@stdlib/regexp/utf16-surrogate-pair}
*/
setReadOnly( regexp, 'reUtf16SurrogatePair', require( '@stdlib/regexp/utf16-surrogate-pair' ) );

/**
* @name reUtf16UnpairedSurrogate
* @memberof regexp
* @readonly
* @type {Function}
* @see {@link module:@stdlib/regexp/utf16-unpaired-surrogate}
*/
setReadOnly( regexp, 'reUtf16UnpairedSurrogate', require( '@stdlib/regexp/utf16-unpaired-surrogate' ) );

/**
* @name reWhitespace
* @memberof regexp
* @readonly
* @type {Function}
* @see {@link module:@stdlib/regexp/whitespace}
*/
setReadOnly( regexp, 'reWhitespace', require( '@stdlib/regexp/whitespace' ) );


// EXPORTS //

module.exports = regexp;
