
{{alias}}( dtype, buffer, shape, strides, offset, order[, options] )
    Returns an ndarray.

    Parameters
    ----------
    dtype: string
        Underlying data type.

    buffer: ArrayLikeObject|TypedArray|Buffer
        Data buffer.

    shape: ArrayLikeObject
        Array shape.

    strides: ArrayLikeObject
        Array strides.

    offset: integer
        Index offset.

    order: string
        Specifies whether an array is row-major (C-style) or column-major
        (Fortran-style).

    options: Object (optional)
        Options.

    options.mode: string (optional)
        Specifies how to handle indices which exceed array dimensions. If equal
        to 'throw', an ndarray instance throws an error when an index exceeds
        array dimensions. If equal to 'wrap', an ndarray instance wraps around
        indices exceeding array dimensions using modulo arithmetic. If equal to
        'clamp', an ndarray instance sets an index exceeding array dimensions to
        either `0` (minimum index) or the maximum index. Default: 'throw'.

    options.submode: Array<string> (optional)
        Specifies how to handle subscripts which exceed array dimensions. If a
        mode for a corresponding dimension is equal to 'throw', an ndarray
        instance throws an error when a subscript exceeds array dimensions. If
        equal to 'wrap', an ndarray instance wraps around subscripts exceeding
        array dimensions using modulo arithmetic. If equal to 'clamp', an
        ndarray instance sets a subscript exceeding array dimensions to either
        `0` (minimum index) or the maximum index. If the number of modes is
        fewer than the number of dimensions, the function recycles modes using
        modulo arithmetic. Default: [ options.mode ].

    Returns
    -------
    ndarray: ndarray
        ndarray instance.

    ndarray.prototype.byteLength: integer
        Size (in bytes) of the array (if known).

    ndarray.prototype.BYTES_PER_ELEMENT: integer
        Size (in bytes) of each array element (if known).

    ndarray.prototype.data: ArrayLikeObject|TypedArray|Buffer
        Pointer to the underlying data buffer.

    ndarray.prototype.dtype: string
        Underlying data type.

    ndarray.prototype.flags: Object
        Information about the memory layout of the array.

    ndarray.prototype.length: integer
        Length of the array (i.e., number of elements).

    ndarray.prototype.ndims: integer
        Number of dimensions.

    ndarray.prototype.offset: integer
        Index offset which specifies the buffer index at which to start
        iterating over array elements.

    ndarray.prototype.order: string
        Array order. The array order is either row-major (C-style) or column-
        major (Fortran-style).

    ndarray.prototype.shape: Array
        Array shape.

    ndarray.prototype.strides: Array
        Index strides which specify how to access data along corresponding array
        dimensions.

    ndarray.prototype.get: Function
        Returns an array element specified according to provided subscripts. The
        number of provided subscripts should equal the number of dimensions.

    ndarray.prototype.iget: Function
        Returns an array element located at a specified linear index.

    ndarray.prototype.set: Function
        Sets an array element specified according to provided subscripts. The
        number of provided subscripts should equal the number of dimensions.

    ndarray.prototype.iset: Function
        Sets an array element located at a specified linear index.

    ndarray.prototype.toString: Function
        Serializes an ndarray as a string. This method does **not** serialize
        data outside of the buffer region defined by the array configuration.

    ndarray.prototype.toJSON: Function
        Serializes an ndarray as a JSON object. This method does **not**
        serialize data outside of the buffer region defined by the array
        configuration.

    Examples
    --------
    // Create a new instance...
    > var b = [ 1.0, 2.0, 3.0, 4.0 ]; // underlying data buffer
    > var d = [ 2, 2 ]; // shape
    > var s = [ 2, 1 ]; // strides
    > var o = 0; // index offset
    > var arr = {{alias}}( 'generic', b, d, s, o, 'row-major' )
    <ndarray>

    // Get an element using subscripts:
    > var v = arr.get( 1, 1 )
    4.0

    // Get an element using a linear index:
    > v = arr.iget( 3 )
    4.0

    // Set an element using subscripts:
    > arr.set( 1, 1, 40.0 );
    > arr.get( 1, 1 )
    40.0

    // Set an element using a linear index:
    > arr.iset( 3, 99.0 );
    > arr.get( 1, 1 )
    99.0

    See Also
    --------

