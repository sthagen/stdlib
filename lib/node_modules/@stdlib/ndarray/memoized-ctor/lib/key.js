/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var OPTIONS = require( './options.json' );


// VARIABLES //

var NOPTS = OPTIONS.length;


// MAIN //

/**
* Returns a cache key.
*
* @private
* @param {string} dtype - data type
* @param {Options} opts - function options
* @param {boolean} opts.codegen - boolean indicating whether to use code generation
* @param {string} opts.mode - specifies how to handle indices which exceed array dimensions
* @param {StringArray} opts.submode - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @returns {string} cache key
*
* @example
* var opts = {
*     'codegen': true,
*     'mode': 'throw',
*     'submode': [ 'throw' ]
* };
* var key = getKey( 'float64', opts );
* // returns 'float64,codegen,true,mode,"throw",submode,["throw"]'
*/
function getKey( dtype, opts ) {
	var key;
	var i;

	key = [ dtype ];
	for ( i = 0; i < NOPTS; i++ ) {
		// Note: we assume that an option value can be uniquely serialized to a `string` via `JSON.stringify()`...
		key.push( OPTIONS[ i ], JSON.stringify( opts[ OPTIONS[i] ] ) );
	}
	return key.join( ',' );
}


// EXPORTS //

module.exports = getKey;
