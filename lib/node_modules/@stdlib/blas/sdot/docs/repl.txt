
{{alias}}( x, y[, options] )
    Computes the dot product of two single-precision floating-point vectors.

    For best performance, provide 1-dimensional ndarrays whose underlying data
    type is 'float32'.

    If provided empty vectors, the function returns `0.0`.

    Parameters
    ----------
    x: ndarray|ArrayLikeObject
        First input array. If provided an array-like object or ndarray whose
        underlying data type is *not* 'float32', the value is cast to a
        1-dimensional ndarray whose data type is 'float32'.

    y: ndarray|ArrayLikeObject
        Second input array. If provided an array-like object or ndarray whose
        underlying data type is *not* 'float32', the value is cast to a
        1-dimensional ndarray whose data type is 'float32'.

    options: Object (optional)
        Options. This parameter is only applicable when either `x` or `y` is not
        already an ndarray whose underlying data type is 'float32'.

    options.codegen: boolean (optional)
        Boolean indicating whether to use code generation. Code generation can
        boost performance, but may be problematic in browser contexts enforcing
        a strict content security policy (CSP). This option is only applicable
        when either `x` or `y` is not already an ndarray whose underlying data
        type is 'float32'. Default: true.

    options.casting: string (optional)
        Specifies the casting rule used to determine acceptable casts. The
        option may be one of the following values:

        - 'none': only allow casting between identical types.
        - 'equiv': allow casting between identical and byte swapped types.
        - 'safe': only allow "safe" casts.
        - 'same-kind': allow "safe" casts and casts within the same kind (e.g.,
          between signed integers or between floats).
        - 'unsafe': allow casting between all types (including between integers
          and floats).

        This option is only applicable when either `x` or `y` is not already an
        ndarray whose underlying data type is 'float32'. Default: 'safe'.

    Returns
    -------
    dot: number
        The dot product of `x` and `y`.

    Examples
    --------
    // Using ndarrays...
    > var x = {{alias:@stdlib/ndarray/array}}( new {{alias:@stdlib/array/float32}}( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );
    > var y = {{alias:@stdlib/ndarray/array}}( new {{alias:@stdlib/array/float32}}( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );
    > {{alias}}( x, y )
    -5.0

    // Using array-like objects...
    > x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];
    > y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];
    > {{alias}}( x, y, { 'casting': 'unsafe' } )
    -5.0

    See Also
    --------

