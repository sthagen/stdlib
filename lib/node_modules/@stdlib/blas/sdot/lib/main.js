/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isVectorLike = require( '@stdlib/assert/is-vector-like' );
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var isFloat32Array = require( '@stdlib/assert/is-float32array' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var array = require( '@stdlib/ndarray/array' );
var dot = require( '@stdlib/blas/base/sdot' ).ndarray;


// MAIN //

/**
* Computes the dot product of `x` and `y`.
*
* ## Notes
*
* -   For best performance, provide 1-dimensional `ndarrays` whose underlying data type is `float32`.
* -   Options are only applicable when either `x` or `y` is not already an `ndarray` whose underlying data type is `float32`.
*
* @param {(ArrayLike|VectorLike)} x - first input array
* @param {(ArrayLike|VectorLike)} y - second input array
* @param {Options} [options] - options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.casting='safe'] - casting rule used to determine acceptable casts
* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray
* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray
* @throws {TypeError} first argument must be either an array-like object or ndarray which can be cast to a 1-dimensional ndarray
* @throws {TypeError} second argument must be either an array-like object or ndarray which can be cast to a 1-dimensional ndarray
* @throws {RangeError} input arrays must be the same length
* @throws {Error} casting not allowed
* @throws {TypeError} options argument must be an object
* @throws {Error} must provide valid options
* @returns {number} dot product of `x` and `y`
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
* var array = require( '@stdlib/ndarray/array' );
*
* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );
* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );
*
* var z = sdot( x, y );
* // returns -5.0
*
* @example
* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];
* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];
*
* var opts = {
*     'casting': 'unsafe'
* };
* var z = sdot( x, y, opts );
* // returns -5.0
*/
function sdot( x, y, options ) {
	var opts;
	var bool;

	bool = (
		isVectorLike( x ) &&
		isVectorLike( y ) &&
		isFloat32Array( x.data ) &&
		isFloat32Array( y.data )
	);
	if ( bool === false ) {
		if ( !isArrayLikeObject( x ) ) {
			throw new TypeError( 'invalid argument. First argument must be either an array-like object or a 1-dimensional ndarray. Value: `' + x + '`.' );
		}
		if ( !isArrayLikeObject( y ) ) {
			throw new TypeError( 'invalid argument. Second argument must be either an array-like object or a 1-dimensional ndarray. Value: `' + y + '`.' );
		}
		opts = {
			'dtype': 'float32',
			'casting': 'safe',
			'codegen': true
		};
		if ( arguments.length > 2 ) {
			if ( !isPlainObject( options ) ) {
				throw new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
			}
			if ( hasOwnProp( options, 'codegen' ) ) {
				// Delegate option validation to `array` interface...
				opts.codegen = options.codegen;
			}
			if ( hasOwnProp( options, 'casting' ) ) {
				// Delegate option validation to `array` interface...
				opts.casting = options.casting;
			}
		}
		x = array( x, opts );
		y = array( y, opts );
		if ( x.ndims !== 1 ) {
			throw new TypeError( 'invalid argument. First argument must be either an array-like object or ndarray which can be cast to a 1-dimensional ndarray. Value: `' + x + '`.' );
		}
		if ( y.ndims !== 1 ) {
			throw new TypeError( 'invalid argument. Second argument must be either an array-like object or ndarray which can be cast to a 1-dimensional ndarray. Value: `' + y + '`.' );
		}
	}
	if ( x.length !== y.length ) {
		throw new RangeError( 'invalid argument. Arrays must be the same length. First argument length: ' + x.length + '. Second argument length: ' + y.length + '.' );
	}
	return dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = sdot;
