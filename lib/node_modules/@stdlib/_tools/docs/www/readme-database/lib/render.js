/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var toHTML = require( '@stdlib/_tools/markdown/to-html' );
var headerRegExp = require( '@stdlib/_tools/licenses/header-regexp' );
var removeHeader = require( '@stdlib/_tools/licenses/remove-header' );


// VARIABLES //

var debug = logger( 'readme-database:render' );
var RE_HEADER = headerRegExp( 'Apache-2.0', 'markdown' );


// MAIN //

/**
* Renders a list of Markdown files to HTML.
*
* ## Notes
*
* -   This function mutates the input file list.
*
* @private
* @param {ObjectArray} files - Markdown files
* @param {string} base - base path for internal URLs
* @param {Callback} clbk - callback to invoke upon completion
* @returns {void}
*/
function render( files, base, clbk ) {
	var total;
	var i;

	total = files.length;
	i = -1;

	return next();

	/**
	* Renders the next file.
	*
	* @private
	*/
	function next() {
		var str;

		i += 1;

		debug( 'Rendering file %d of %d: %s', i+1, total, files[ i ].file );
		str = removeHeader( files[ i ].data, RE_HEADER );
		toHTML( str, base, onRender );

		/**
		* Callback invoked after rendering a file.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {string} html - rendered HTML
		* @returns {void}
		*/
		function onRender( error, html ) {
			if ( error ) {
				debug( 'Encountered an error when rendering file. File: %s (%d of %d). Error: %s', files[ i ].file, i+1, total, error.message );
				return clbk( error );
			}
			debug( 'Rendered file.' );
			files[ i ].data = html;

			process.nextTick( done ); // TODO: use stdlib equivalent/polyfill
		}
	}

	/**
	* Callback invoked upon rendering all files.
	*
	* @private
	* @returns {void}
	*/
	function done() {
		var j = i + 1;
		if ( j < total ) {
			debug( 'Rendered %d of %d files.', j, total );
			return next();
		}
		debug( 'Successfully rendered all files.' );
		return clbk( null, files );
	}
}


// EXPORTS //

module.exports = render;
