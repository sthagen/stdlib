/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var resolve = require( 'resolve' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var readFile = require( '@stdlib/fs/read-file' );
var walk = require( './../lib/walk_file.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof walk, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function asynchronously walks a file\'s relative dependencies', function test( t ) {
	var expected;
	var cache;
	var fpath;
	var opts;
	var tmp;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': true,
		'walk': true
	};
	cache = {};

	expected = {};
	expected[ fpath ] = [
		'fs'
	];

	tmp = join( __dirname, 'fixtures', 'bar.js' );
	expected[ tmp ] = [
		'@stdlib/random/base/randu'
	];

	tmp = join( __dirname, 'fixtures', 'data.json' );
	expected[ tmp ] = [];

	tmp = join( __dirname, 'fixtures', 'bool.js' );
	expected[ tmp ] = [];

	walk( cache, fpath, opts, clbk );

	function clbk( err ) {
		if ( err ) {
			t.ok( false, err.message );
		} else {
			t.deepEqual( cache, expected, 'updates dependency cache' );
		}
		t.end();
	}
});

tape( 'the function asynchronously walks a file\'s relative dependencies (exclude built-ins)', function test( t ) {
	var expected;
	var cache;
	var fpath;
	var opts;
	var tmp;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': false,
		'walk': true
	};
	cache = {};

	expected = {};
	expected[ fpath ] = [];

	tmp = join( __dirname, 'fixtures', 'bar.js' );
	expected[ tmp ] = [
		'@stdlib/random/base/randu'
	];

	tmp = join( __dirname, 'fixtures', 'data.json' );
	expected[ tmp ] = [];

	tmp = join( __dirname, 'fixtures', 'bool.js' );
	expected[ tmp ] = [];

	walk( cache, fpath, opts, clbk );

	function clbk( err ) {
		if ( err ) {
			t.ok( false, err.message );
		} else {
			t.deepEqual( cache, expected, 'updates dependency cache' );
		}
		t.end();
	}
});

tape( 'the function asynchronously walks a file\'s relative dependencies (no walk)', function test( t ) {
	var expected;
	var cache;
	var fpath;
	var opts;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': true,
		'walk': false
	};
	cache = {};

	expected = {};
	expected[ fpath ] = [
		'fs'
	];

	walk( cache, fpath, opts, clbk );

	function clbk( err ) {
		if ( err ) {
			t.ok( false, err.message );
		} else {
			t.deepEqual( cache, expected, 'updates dependency cache' );
		}
		t.end();
	}
});

tape( 'the function returns an error if unable to read an input file', function test( t ) {
	var walk;
	var opts;

	walk = proxyquire( './../lib/walk_file.js', {
		'@stdlib/fs/read-file': read
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	walk( {}, '/beep/boop.js', opts, clbk );

	function read( file, fopts, clbk ) {
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			clbk( new Error( 'beep' ) );
		}
	}

	function clbk( err ) {
		t.equal( instanceOf( err, Error ), true, 'returns an error' );
		t.equal( err.message, 'beep', 'returns expected error' );
		t.end();
	}
});

tape( 'the function returns an error if unable to read a relative module dependency', function test( t ) {
	var fpath1;
	var fpath2;
	var walk;
	var opts;

	fpath1 = join( __dirname, 'fixtures', 'foo.js' );
	fpath2 = join( __dirname, 'fixtures', 'bool.js' );

	walk = proxyquire( './../lib/walk_file.js', {
		'@stdlib/fs/read-file': read
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	walk( {}, fpath1, opts, clbk );

	function read( file, fopts, cb ) {
		if ( file === fpath2 ) {
			return setTimeout( onTimeout, 0 );
		}
		return readFile( file, fopts, cb );

		function onTimeout() {
			cb( new Error( 'boop' ) );
		}
	}

	function clbk( err ) {
		t.equal( instanceOf( err, Error ), true, 'returns an error' );
		t.equal( err.message, 'boop', 'returns expected error' );
		t.end();
	}
});

tape( 'the function returns an error if unable to read a relative module dependency (concurrent errors)', function test( t ) {
	var fpath;
	var walk;
	var opts;
	var cnt;

	fpath = join( __dirname, 'fixtures', 'foo.js' );

	walk = proxyquire( './../lib/walk_file.js', {
		'@stdlib/fs/read-file': read
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	cnt = 0;
	walk( {}, fpath, opts, clbk );

	function read( file, fopts, cb ) {
		if ( file === fpath ) {
			return readFile( file, fopts, cb );
		}
		return setTimeout( onTimeout, 0 );

		function onTimeout() {
			cnt += 1;
			cb( new Error( 'boop'+cnt ) );
		}
	}

	function clbk( err ) {
		t.equal( instanceOf( err, Error ), true, 'returns an error' );
		t.equal( err.message, 'boop1', 'returns expected error' );
		t.end();
	}
});

tape( 'the function returns an error if unable to resolve a relative module dependency', function test( t ) {
	var fpath;
	var walk;
	var opts;

	fpath = join( __dirname, 'fixtures', 'foo.js' );

	walk = proxyquire( './../lib/walk_file.js', {
		'resolve': mock
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	walk( {}, fpath, opts, clbk );

	function mock( file, ropts, cb ) {
		if ( file === './bool.js' ) {
			return setTimeout( onTimeout, 0 );
		}
		return resolve( file, ropts, cb );

		function onTimeout() {
			cb( new Error( 'boop' ) );
		}
	}

	function clbk( err ) {
		t.equal( instanceOf( err, Error ), true, 'returns an error' );
		t.equal( err.message, 'boop', 'returns expected error' );
		t.end();
	}
});

tape( 'the function returns an error if unable to resolve a relative module dependency (concurrent errors)', function test( t ) {
	var fpath;
	var walk;
	var opts;
	var cnt;

	fpath = join( __dirname, 'fixtures', 'foo.js' );

	walk = proxyquire( './../lib/walk_file.js', {
		'resolve': mock
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	cnt = 0;
	walk( {}, fpath, opts, clbk );

	function mock( file, ropts, cb ) {
		return setTimeout( onTimeout, 0 );

		function onTimeout() {
			cnt += 1;
			cb( new Error( 'boop'+cnt ) );
		}
	}

	function clbk( err ) {
		t.equal( instanceOf( err, Error ), true, 'returns an error' );
		t.equal( err.message, 'boop1', 'returns expected error' );
		t.end();
	}
});
