/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var walk = require( './../lib/walk_file.sync.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof walk, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function synchronously walks a file\'s relative dependencies', function test( t ) {
	var expected;
	var cache;
	var fpath;
	var opts;
	var err;
	var tmp;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': true,
		'walk': true
	};
	cache = {};

	err = walk( cache, fpath, opts );

	expected = {};
	expected[ fpath ] = [
		'fs'
	];

	tmp = join( __dirname, 'fixtures', 'bar.js' );
	expected[ tmp ] = [
		'@stdlib/random/base/randu'
	];

	tmp = join( __dirname, 'fixtures', 'data.json' );
	expected[ tmp ] = [];

	tmp = join( __dirname, 'fixtures', 'bool.js' );
	expected[ tmp ] = [];

	t.equal( err, null, 'returns null' );
	t.deepEqual( cache, expected, 'updates dependency cache' );

	t.end();
});

tape( 'the function synchronously walks a file\'s relative dependencies (exclude built-ins)', function test( t ) {
	var expected;
	var cache;
	var fpath;
	var opts;
	var err;
	var tmp;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': false,
		'walk': true
	};
	cache = {};

	err = walk( cache, fpath, opts );

	expected = {};
	expected[ fpath ] = [];

	tmp = join( __dirname, 'fixtures', 'bar.js' );
	expected[ tmp ] = [
		'@stdlib/random/base/randu'
	];

	tmp = join( __dirname, 'fixtures', 'data.json' );
	expected[ tmp ] = [];

	tmp = join( __dirname, 'fixtures', 'bool.js' );
	expected[ tmp ] = [];

	t.equal( err, null, 'returns null' );
	t.deepEqual( cache, expected, 'updates dependency cache' );

	t.end();
});

tape( 'the function synchronously walks a file\'s relative dependencies (no walk)', function test( t ) {
	var expected;
	var cache;
	var fpath;
	var opts;
	var err;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': true,
		'walk': false
	};
	cache = {};

	err = walk( cache, fpath, opts );

	expected = {};
	expected[ fpath ] = [
		'fs'
	];

	t.equal( err, null, 'returns null' );
	t.deepEqual( cache, expected, 'updates dependency cache' );

	t.end();
});

tape( 'the function returns an error if unable to read an input file', function test( t ) {
	var walk;
	var opts;
	var err;

	walk = proxyquire( './../lib/walk_file.sync.js', {
		'@stdlib/fs/read-file': {
			'sync': readFile
		}
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	err = walk( {}, '/beep/boop.js', opts );

	t.equal( instanceOf( err, Error ), true, 'returns an error' );
	t.equal( err.message, 'beep', 'returns expected error' );
	t.end();

	function readFile() {
		return new Error( 'beep' );
	}
});

tape( 'the function returns an error if unable to read a relative module dependency', function test( t ) {
	var fpath1;
	var fpath2;
	var walk;
	var opts;
	var err;

	fpath1 = join( __dirname, 'fixtures', 'foo.js' );
	fpath2 = join( __dirname, 'fixtures', 'bool.js' );

	walk = proxyquire( './../lib/walk_file.sync.js', {
		'@stdlib/fs/read-file': {
			'sync': readFile
		}
	});
	opts = {
		'builtins': true,
		'walk': true
	};

	err = walk( {}, fpath1, opts );

	t.equal( instanceOf( err, Error ), true, 'returns an error' );
	t.equal( err.message, 'boop', 'returns expected error' );
	t.end();

	function readFile( file, fopts ) {
		if ( file === fpath2 ) {
			return new Error( 'boop' );
		}
		return readFileSync( file, fopts );
	}
});
