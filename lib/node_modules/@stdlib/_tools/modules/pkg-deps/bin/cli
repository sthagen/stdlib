#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var proc = require( 'process' );
var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var stdin = require( '@stdlib/process/read-stdin' );
var regexp = require( '@stdlib/utils/regexp-from-string' );
var parseJSON = require( '@stdlib/utils/parse-json' )
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var main = require( './../lib' );


// FUNCTIONS //

/**
* Performs initialization tasks.
*
* @private
* @example
* init();
*/
function init() {
	// Set the process title to allow the process to be more easily identified:
	proc.title = pkg.name;
	proc.stdout.on( 'error', proc.exit );
}

/**
* Prints usage information.
*
* @private
* @example
* help();
* // => '...'
*/
function help() {
	var fpath = path.join( __dirname, 'usage.txt' );
	fs.createReadStream( fpath )
		.pipe( proc.stdout )
		.on( 'close', onClose );

	function onClose() {
		proc.exit( 0 );
	}
}

/**
* Prints the package version.
*
* @private
* @example
* version();
* // => '#.#.#'
*/
function version() {
	var msg = pkg.version.toString()+'\n';
	proc.stdout.write( msg, 'utf8' );
	proc.exit( 0 );
}

/**
* Writes an error message to `stderr` and then exits.
*
* @private
* @param {string} msg - error message
*/
function exit( msg ) {
	proc.stderr.write( msg+'\n', 'utf8' );
	proc.exit( 1 );
}

/**
* Callback invoked after resolving dependencies.
*
* @private
* @param {(Error|null)} error - error object
* @param {ObjectArray} results - results
* @throws {Error} unexpected error
*/
function done( error, results ) {
	var i;
	if ( error ) {
		throw error;
	}
	for ( i = 0; i < results.length; i++ ) {
		console.log( JSON.stringify( results[ i ] ) );
	}
}


// VARIABLES //

var files;
var args;
var err;
var sep;


// MAIN //

init();

// Parse command-line arguments:
args = parseArgs( proc.argv.slice( 2 ), opts );

if ( args.help ) {
	return help();
}
if ( args.version ) {
	return version();
}
opts = {};
if ( args.builtins === false ) {
	opts.builtins = args.builtins;
}
if ( args.walk === false ) {
	opts.walk = args.walk;
}
if ( args.split ) {
	sep = regexp( args.split );
	if ( sep === null ) {
		sep = args.split;
	}
} else {
	sep = /\r?\n/;
}
if ( args.aliases ) {
	opts.aliases = parseJSON( args.aliases );
}

if ( !proc.stdin.isTTY ) {
	return stdin( onData );
}
files = args._;
if ( files.length === 0 ) {
	err = new Error( 'no input. Must provide a list of files as command-line arguments or via `stdin`.' );
	return exit( err.message );
}
proc.nextTick( next );

/**
* Callback invoked after attempting to read data from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - `stdin` data
*/
function onData( error, data ) {
	var i;
	if ( error ) {
		return exit( error.message );
	}
	data = data.toString();
	if ( data === '' ) {
		error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
		return exit( error.message );
	}
	data = data.split( sep );
	files = [];
	for ( i = 0; i < data.length; i++ ) {
		// Address empty elements...
		if ( data[ i ] ) {
			files.push( data[ i ] );
		}
	}
	next();
}

/**
* Callback invoked once ready to resolve dependencies.
*
* @private
*/
function next() {
	main( files, opts, done );
}
