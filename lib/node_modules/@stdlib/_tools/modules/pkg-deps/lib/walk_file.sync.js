/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var resolve = require( 'resolve' ).sync;
var readFile = require( '@stdlib/fs/read-file' ).sync;
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var dirname = require( '@stdlib/utils/dirname' );
var extname = require( '@stdlib/utils/extname' );
var analyze = require( './analyze.js' );


// VARIABLES //

var debug = logger( 'module-pkg-deps:sync:walk-file' );


// MAIN //

/**
* Synchronously walks a file's relative dependencies.
*
* @private
* @param {Object} cache - dependency cache
* @param {string} file - file path
* @param {Options} options - function options
* @param {boolean} options.builtins - boolean indicating whether to include built-in packages
* @param {boolean} options.walk - boolean indicating whether to walk relative module dependencies
* @param {Object} options.aliases - object mapping module dependency substitutions
* @returns {(Error|null)} error object or null
*/
function walk( cache, file, options ) {
	var fopts;
	var ropts;
	var data;
	var main;
	var ext;
	var dir;
	var err;
	var i;

	if ( hasOwnProp( cache, file ) ) {
		debug( 'Already walked this file. Skipping...' );
		return null;
	}
	// WARNING: ignores possibility of other extensions!
	ext = extname( file );
	if (
		ext === '.json' ||
		ext === '.node'
	) {
		debug( 'Cannot walk file. Skipping...' );
		cache[ file ] = [];
		return null;
	}
	fopts = {
		'encoding': 'utf8'
	};
	debug( 'Read file options: %s', JSON.stringify( fopts ) );

	debug( 'Reading file: %s...', file );
	data = readFile( file, fopts );
	if ( data instanceof Error ) {
		debug( 'Encountered an error when reading file: %s. Error: %s', file, data.message );
		return data;
	}
	debug( 'Successfully read file: %s.', file );

	debug( 'Analyzing file...' );
	data = analyze( data.toString(), options.builtins );

	debug( 'Caching list of package dependencies...' );
	cache[ file ] = data.packages;

	if ( options.walk === false ) {
		debug( 'Option to walk relative dependencies is `false`. Finished walking file: %s.', file );
		return null;
	}
	data = data.relative;
	if ( data.length === 0 ) {
		debug( 'No relative dependencies to walk. Finished walking file: %s.', file );
		return null;
	}
	debug( 'Resolving relative module dependencies...' );
	dir = dirname( file );
	ropts = {
		'basedir': dir
	};
	for ( i = 0; i < data.length; i++ ) {
		main = resolve( data[ i ], ropts );
		debug( 'Successfully resolved module dependency for file: %s. Dep: %s.', data[ i ], main );

		debug( 'Checking for a module substitution for file: %s...', main );
		if ( hasOwnProp( options.aliases, main ) ) {
			debug( 'Found a module substitution for file: %s. Substitution: %s.', main, options.aliases[ main ] );
			main = options.aliases[ main ];
		} else {
			debug( 'No module substitution found for file: %s.', main );
		}

		debug( 'Walking module dependency: %s...', main );
		err = walk( cache, main, options );
		if ( err instanceof Error ) {
			debug( 'Encountered an error when walking module dependency. Error: %s', err.message );
			return err;
		}
		debug( 'Walked %d of %d module dependencies...', i+1, data.length );
	}
	debug( 'Walked all module dependencies.' );
	return null;
}


// EXPORTS //

module.exports = walk;
