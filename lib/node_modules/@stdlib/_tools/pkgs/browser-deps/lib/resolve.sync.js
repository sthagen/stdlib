/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var pkgDeps = require( '@stdlib/_tools/modules/pkg-deps' ).sync;
var append = require( '@stdlib/utils/append' );
var transform = require( './transform.js' );


// VARIABLES //

var debug = logger( 'browser-pkg-deps:sync:resolve' );


// MAIN //

/**
* Synchronously resolves package dependencies.
*
* @private
* @param {ObjectArray} results - results object
* @param {ObjectArray} entries - entry points
* @param {boolean} builtins - boolean indicating whether to include built-in package dependencies
* @returns {(ObjectArray|Error)} results or an error
*/
function resolve( results, entries, builtins ) {
	var opts;
	var len;
	var pkg;
	var res;
	var i;
	var k;

	len = entries.length;

	opts = {
		'walk': true,
		'builtins': builtins,
		'aliases': null
	};
	debug( 'Options: %s', JSON.stringify( opts ) );

	debug( 'Resolving %d packages...', len );
	for ( i = 0; i < len; i++ ) {
		pkg = entries[ i ].pkg;
		k = i + 1;

		debug( 'Resolving package: %s (%d of %d)...', pkg, k, len );
		opts.aliases = results[ i ].aliases;
		res = pkgDeps( entries[ i ].entries, opts );
		if ( res instanceof Error ) {
			debug( 'Encountered an error when resolving package dependencies: %s (%d of %d). Error: %s', pkg, k, len, res.message );
			return res;
		}
		debug( 'Successfully resolved package dependencies: %s (%d of %d).', pkg, k, len );
		res = transform( res );
		results[ i ].files = append( results[ i ].files, res.files );
		results[ i ].deps = append( results[ i ].deps, res.deps );
	}
	debug( 'Resolved all packages.' );
	return results;
}


// EXPORTS //

module.exports = resolve;
