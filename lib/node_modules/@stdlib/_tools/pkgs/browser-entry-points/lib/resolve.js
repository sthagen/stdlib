/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var resolve = require( 'resolve' );
var resolveDir = require( './resolve_dir.js' );


// VARIABLES //

var debug = logger( 'browser-entry-points:async:resolve' );


// MAIN //

/**
* Resolves a list of packages.
*
* @private
* @param {StringArray} pkgs - list of packages
* @param {string} dir - base directory from which to resolve packages
* @param {Callback} clbk - callback to invoke after resolving packages
*/
function getPkgs( pkgs, dir, clbk ) {
	var errFLG;
	var count;
	var opts;
	var len;
	var out;
	var i;

	len = pkgs.length;
	debug( 'Resolving %d packages...', len );

	out = new Array( len );
	count = 0;
	for ( i = 0; i < len; i++ ) {
		debug( 'Resolving package: %s (%d of %d).', pkgs[ i ], i+1, len );
		opts = {
			'basedir': dir
		};
		out[ i ] = {
			'id': null,
			'pkg': pkgs[ i ],
			'dir': null,
			'data': null
		};
		resolve( pkgs[ i ], opts, createClbk( i ) );
	}
	/**
	* Returns a callback to be invoked upon resolving a package.
	*
	* @private
	* @param {NonNegativeInteger} idx - index
	* @returns {Callback} callback
	*/
	function createClbk( idx ) {
		var name = pkgs[ idx ];
		var k = idx + 1;

		return onResolve;

		/**
		* Callback invoked upon resolving a package directory.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {string} dir - package directory
		* @returns {void}
		*/
		function onDir( error, dir ) {
			if ( errFLG ) {
				return;
			}
			if ( error ) {
				debug( 'Encountered an error while resolving package directory: %s (%d of %d). Error: %s', name, k, len, error.message );
				errFLG = true;
				return clbk( error );
			}
			debug( 'Resolved package directory for package: %s (%d of %d). Dir: %s', name, k, len, dir );
			out[ idx ].dir = dir;

			count += 1;
			debug( 'Resolved %d of %d packages.', count, len );
			if ( count === len ) {
				debug( 'Resolved all packages.' );
				return clbk( null, out );
			}
		}

		/**
		* Callback to be invoked upon resolving a package.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {string} main - main entry point
		* @param {Object} [pkg] - `package.json` contents
		* @returns {void}
		*/
		function onResolve( error, main, pkg ) {
			if ( errFLG ) {
				return;
			}
			if ( error ) {
				debug( 'Encountered an error while resolving package: %s (%d of %d). Error: %s', name, k, len, error.message );
				errFLG = true;
				return clbk( error );
			}
			debug( 'Resolved package: %s (%d of %d). Main: %s.', name, k, len, main );
			out[ idx ].id = main;
			if ( !pkg ) {
				pkg = {};
			}
			out[ idx ].data = pkg;

			debug( 'Resolving package directory for package: %s (%d of %d)...', name, k, len );
			resolveDir( main, onDir );
		}
	}
}


// EXPORTS //

module.exports = getPkgs;
