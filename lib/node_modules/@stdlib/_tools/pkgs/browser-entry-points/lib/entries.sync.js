/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var resolveFiles = require( './resolve_files.sync.js' );


// VARIABLES //

var debug = logger( 'browser-entry-points:sync:entries' );


// MAIN //

/**
* Determines browser entry points.
*
* @private
* @param {ObjectArray} pkgs - packages
* @returns {(ObjectArray|Error)} results or an error
*/
function entryPoints( pkgs ) {
	var total;
	var main;
	var file;
	var keys;
	var data;
	var out;
	var dir;
	var pkg;
	var tmp;
	var id;
	var b;
	var i;
	var j;
	var k;

	total = pkgs.length;
	out = new Array( total );

	debug( 'Determining main entry points for %d packages...', total );
	for ( i = 0; i < total; i++ ) {
		k = i + 1;
		pkg = pkgs[ i ].pkg;
		main = pkgs[ i ].id;

		debug( 'Determined main entry point for package: %s (%d of %d). Main: %s', pkg, k, total, main );
		out[ i ] = {
			'id': main,
			'pkg': pkg,
			'dir': pkgs[ i ].dir,
			'entries': []
		};
	}
	debug( 'Finished determining main entry points.' );

	debug( 'Resolving browser entry points for %d packages...', total );
	for ( i = 0; i < total; i++ ) {
		k = i + 1;
		pkg = pkgs[ i ].pkg;
		data = pkgs[ i ].data;
		if (
			data.__stdlib__ && // eslint-disable-line no-underscore-dangle
			data.__stdlib__.envs && // eslint-disable-line no-underscore-dangle
			data.__stdlib__.envs.browser === false // eslint-disable-line no-underscore-dangle
		) {
			debug( 'Package is not compatible with browser environments: %s (%d of %d). Skipping...', pkg, k, total );
			continue;
		}
		debug( 'Resolving browser files for package: %s (%d of %d).', pkg, k, total );
		id = pkgs[ i ].id;
		dir = pkgs[ i ].dir;
		b = data.browser;

		tmp = [];
		if ( isString( b ) && b.length > 0 ) {
			file = resolve( dir, b );
			debug( 'Found browser entry file for package: %s (%d of %d). File: %s', pkg, k, total, file );
			tmp.push( file );
		} else if ( isObject( b ) ) {
			keys = objectKeys( b );
			for ( j = 0; j < keys.length; j++ ) {
				if ( resolve( dir, keys[j] ) === id ) {
					file = resolve( dir, b[ keys[j] ] );
					debug( 'Found browser entry file for package: %s (%d of %d). File: %s', pkg, k, total, file );
					tmp.push( file );
				}
			}
			if ( tmp.length === 0 ) {
				tmp.push( id );
			}
		} else {
			debug( 'No browser-specific files for package: %s (%d of %d). Using main entry point...', pkg, k, total );
			tmp.push( id );
		}
		tmp = resolveFiles( tmp );
		if ( tmp instanceof Error ) {
			return tmp;
		}
		out[ i ].entries = out[ i ].entries.concat( tmp );
		debug( 'Resolved %d browser entry points for package: %s (%d of %d).', out[ i ].entries.length, pkg, k, total );
	}
	debug( 'Resolved browser entry points for all packages.' );
	return out;
}


// EXPORTS //

module.exports = entryPoints;
