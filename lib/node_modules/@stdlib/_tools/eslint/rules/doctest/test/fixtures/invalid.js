/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'console.log( isLowercase( \'hello\' ) );',
		'// => false',
		'',
		'console.log( isLowercase( \'\' ) );',
		'// => false',
		'',
		'console.log( isLowercase( \'Hello\' ) );',
		'// => true'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `false`, but expected `true` instead',
			'type': null
		},
		{
			'message': 'Displayed return value is `true`, but expected `false` instead',
			'type': null
		}
	],
	'output': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'console.log( isLowercase( \'hello\' ) );',
		'// => true',
		'',
		'console.log( isLowercase( \'\' ) );',
		'// => false',
		'',
		'console.log( isLowercase( \'Hello\' ) );',
		'// => false'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'var bool = isLowercase( \'hello\' );',
		'// returns false',
		'',
		'bool = isLowercase( \'\' );',
		'// returns false',
		'',
		'bool = isLowercase( \'Hello\' );',
		'// returns true'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `false`, but expected `true` instead',
			'type': null
		},
		{
			'message': 'Displayed return value is `true`, but expected `false` instead',
			'type': null
		}
	],
	'output': [
		'var isLowercase = require( \'@stdlib/assert/is-lowercase\' );',
		'',
		'var bool = isLowercase( \'hello\' );',
		'// returns true',
		'',
		'bool = isLowercase( \'\' );',
		'// returns false',
		'',
		'bool = isLowercase( \'Hello\' );',
		'// returns false'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var startsWith = require( \'@stdlib/string/starts-with\' );',
		'',
		'var str = \'Fair is foul, and foul is fair, hover through fog and filthy air\';',
		'',
		'console.log( startsWith( str, \'Fair\' ) );',
		'// => false',
		'',
		'console.log( startsWith( str, \'fair\' ) );',
		'// => false',
		'',
		'console.log( startsWith( str, \'foul\', 8 ) );',
		'// => true',
		'',
		'console.log( startsWith( str, \'filthy\', -10 ) );',
		'// => true',
		''
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `false`, but expected `true` instead',
			'type': null
		}
	],
	'output': [
		'var startsWith = require( \'@stdlib/string/starts-with\' );',
		'',
		'var str = \'Fair is foul, and foul is fair, hover through fog and filthy air\';',
		'',
		'console.log( startsWith( str, \'Fair\' ) );',
		'// => true',
		'',
		'console.log( startsWith( str, \'fair\' ) );',
		'// => false',
		'',
		'console.log( startsWith( str, \'foul\', 8 ) );',
		'// => true',
		'',
		'console.log( startsWith( str, \'filthy\', -10 ) );',
		'// => true',
		''
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'var tokenize = require( \'@stdlib/nlp/tokenize\' );',
		'',
		'console.log( tokenize( \'Hello World!\' ) );',
		'// => [ \'hello\', \'world\', \'!\' ]',
		'',
		'console.log( tokenize( \'\' ) );',
		'// => [ \'should be empty\' ]',
		'',
		'var str = \'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod.\';',
		'console.log( tokenize( str ) );',
		'/* =>',
		'	[',
		'		\'Lorem\',',
		'		\'ipsum\',',
		'		\'dolor\',',
		'		\'sit\',',
		'		\'amet\',',
		'		\',\',',
		'		\'consetetur\',',
		'		\'sadipscing\',',
		'		\'elitr\',',
		'		\',\',',
		'		\'sed\',',
		'		\'diam\',',
		'		\'nonumy\',',
		'		\'eirmod\',',
		'		\'.\'',
		'	]',
		'*/'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `[ \'hello\', \'world\', \'!\' ]`, but expected `[ \'Hello\', \'World\', \'!\' ]` instead',
			'type': null
		},
		{
			'message': 'Displayed return value is `[ \'should be empty\' ]`, but expected `[]` instead',
			'type': null
		}
	],
	'output': [
		'\'use strict\';',
		'',
		'var tokenize = require( \'@stdlib/nlp/tokenize\' );',
		'',
		'console.log( tokenize( \'Hello World!\' ) );',
		'// => [ \'Hello\', \'World\', \'!\' ]',
		'',
		'console.log( tokenize( \'\' ) );',
		'// => []',
		'',
		'var str = \'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod.\';',
		'console.log( tokenize( str ) );',
		'/* =>',
		'	[',
		'		\'Lorem\',',
		'		\'ipsum\',',
		'		\'dolor\',',
		'		\'sit\',',
		'		\'amet\',',
		'		\',\',',
		'		\'consetetur\',',
		'		\'sadipscing\',',
		'		\'elitr\',',
		'		\',\',',
		'		\'sed\',',
		'		\'diam\',',
		'		\'nonumy\',',
		'		\'eirmod\',',
		'		\'.\'',
		'	]',
		'*/'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'var Beta = require( \'@stdlib/stats/base/dists/beta/ctor\' );',
		'',
		'var beta = new Beta( 2.0, 4.0 );',
		'',
		'var mu = beta.mean;',
		'console.log( \'Mean = %d\', mu );',
		'// => ',
		'',
		'var median = beta.median;',
		'console.log( \'Median = %d\', median );',
		'// => ',
		'',
		'var s2 = beta.variance;',
		'console.log( \'Variance = %d\', s2 );',
		'// => ',
		'',
		'var y = beta.cdf( 0.8 );',
		'console.log( \'F(0.8) = %d\', y );',
		'// => '
	].join( '\n' ),
	'errors': [
		{
			'message': 'Return annotation is empty',
			'type': null
		},
		{
			'message': 'Return annotation is empty',
			'type': null
		},
		{
			'message': 'Return annotation is empty',
			'type': null
		},
		{
			'message': 'Return annotation is empty',
			'type': null
		}
	],
	'output': [
		'\'use strict\';',
		'',
		'var Beta = require( \'@stdlib/stats/base/dists/beta/ctor\' );',
		'',
		'var beta = new Beta( 2.0, 4.0 );',
		'',
		'var mu = beta.mean;',
		'console.log( \'Mean = %d\', mu );',
		'// => \'Mean = 0.3333333333333333\'',
		'',
		'var median = beta.median;',
		'console.log( \'Median = %d\', median );',
		'// => \'Median = 0.3138101704556974\'',
		'',
		'var s2 = beta.variance;',
		'console.log( \'Variance = %d\', s2 );',
		'// => \'Variance = 0.031746031746031744\'',
		'',
		'var y = beta.cdf( 0.8 );',
		'console.log( \'F(0.8) = %d\', y );',
		'// => \'F(0.8) = 0.99328\''
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var iterator = require( \'@stdlib/random/iter/uniform\' );',
		'var it = iterator( 13.0, 9.0 );',
		'// returns <RangeError>',
		'',
		'var it = iterator( 3.0, 1.0 );',
		'// returns <RangeError>'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an error while running code: `invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `[13,9]`.`. Did you mean to include a `// throws <RangeError>` annotation instead of `// returns <RangeError>`?',
			'type': null
		},
		{
			'message': 'Encountered an error while running code: `invalid argument. Minimum support `a` must be less than maximum support `b`. Value: `[3,1]`.`. Did you mean to include a `// throws <RangeError>` annotation instead of `// returns <RangeError>`?',
			'type': null
		}
	],
	'output': [
		'var iterator = require( \'@stdlib/random/iter/uniform\' );',
		'var it = iterator( 13.0, 9.0 );',
		'// throws <RangeError>',
		'',
		'var it = iterator( 3.0, 1.0 );',
		'// throws <RangeError>'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var iterator = require( \'@stdlib/random/iter/uniform\' );',
		'var it = iterator( 13.0, 9.0 );',
		'// throws <TypeError>',
		'',
		'var it = iterator( 3.0, 1.0 );',
		'// throws <TypeError>'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Code should have a `// throws <RangeError>` annotation, but received: `// throws <TypeError>`',
			'type': null
		},
		{
			'message': 'Code should have a `// throws <RangeError>` annotation, but received: `// throws <TypeError>`',
			'type': null
		}
	],
	'output': [
		'var iterator = require( \'@stdlib/random/iter/uniform\' );',
		'var it = iterator( 13.0, 9.0 );',
		'// throws <RangeError>',
		'',
		'var it = iterator( 3.0, 1.0 );',
		'// throws <RangeError>'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var arr = [];',
		'',
		'push( arr, 3 );',
		'// arr => [ 6 ]'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Displayed return value is `[ 6 ]`, but expected `[ 3 ]` instead',
			'type': null
		}
	],
	'output': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var arr = [];',
		'',
		'push( arr, 3 );',
		'// arr => [ 3 ]'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var arr = [];',
		'',
		'push( arr, 3 );',
		'// x => [ 3 ]'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an error: `x is not defined`.',
			'type': null
		}
	],
	'output': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var arr = [];',
		'',
		'push( arr, 3 );',
		'// arr => [ 3 ]'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var arr = [];',
		'',
		'push( arr, 3 );',
		'// y => [ 7 ]'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an error: `y is not defined`.',
			'type': null
		}
	],
	'output': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var arr = [];',
		'',
		'push( arr, 3 );',
		'// ? => [ 7 ]'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var x1 = [];',
		'',
		'push( x1, 3 );',
		'// x2 => [ 3 ]'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an error: `x2 is not defined`.',
			'type': null
		}
	],
	'output': [
		'var push = require( \'@stdlib/utils/push\' );',
		'var x1 = [];',
		'',
		'push( x1, 3 );',
		'// x1 => [ 3 ]'
	].join( '\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
