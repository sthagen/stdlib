/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var join = require( 'path' ).join;
var exec = require( 'child_process' ).exec;
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );
var replace = require( '@stdlib/string/replace' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var writeFileSync = require( '@stdlib/fs/write-file' ).sync;
var unlinkSync = require( '@stdlib/fs/unlink' ).sync;
var existsSync = require( '@stdlib/fs/exists' ).sync;
var EXEC_PATH = require( '@stdlib/process/exec-path' );


// VARIABLES //

var fpath = resolve( __dirname, '..', 'bin', 'cli' );
var opts = {
	'skip': IS_BROWSER || IS_WINDOWS
};
var PKG_VERSION = require( './../package.json' ).version;
var TMP = join( __dirname, 'fixtures', 'tmp.js.txt' );
var EXPECTED = join( __dirname, 'fixtures', 'expected.js.txt' );
var EXPECTED_SHEBANG = join( __dirname, 'fixtures', 'expected_shebang.js.txt' );
var EXPECTED_NO_HEADER = join( __dirname, 'fixtures', 'expected_no_header.js.txt' );
var SINGLE_LINE_HEADER = join( __dirname, 'fixtures', 'single_line_header.js.txt' );
var MULTI_LINE_HEADER = join( __dirname, 'fixtures', 'multiline_header.js.txt' );
var SHEBANG_SINGLE_LINE_HEADER = join( __dirname, 'fixtures', 'shebang_single_line_header.js.txt' ); // eslint-disable-line id-length
var SHEBANG_MULTI_LINE_HEADER = join( __dirname, 'fixtures', 'shebang_multiline_header.js.txt' );


// FUNCTIONS //

/**
* Creates a temporary file.
*
* @private
* @param {boolean} bool - boolean indicating whether a temporary file should include a "shebang"
* @param {string} type - header type ('single-line' or 'multi-line')
* @param {string} [f] - filename
* @throws {Error} unexpected error
* @returns {string} temporary file filename
*/
function tmp( bool, type ) {
	var err;
	var out;
	var f;
	if ( arguments.length > 2 ) {
		out = arguments[ 2 ];
	} else {
		out = TMP;
	}
	if ( bool ) {
		if ( type === 'single-line' ) {
			f = SHEBANG_SINGLE_LINE_HEADER;
		} else {
			f = SHEBANG_MULTI_LINE_HEADER;
		}
		err = writeFileSync( out, readFileSync( f ) );
	} else {
		if ( type === 'single-line' ) {
			f = SINGLE_LINE_HEADER;
		} else {
			f = MULTI_LINE_HEADER;
		}
		err = writeFileSync( out, readFileSync( f ) );
	}
	if ( err ) {
		throw err;
	}
	return out;
}

/**
* Removes a temporary file.
*
* @private
* @param {string} [f] - filename
* @throws {Error} unexpected error
*/
function cleanup() {
	var err;
	var f;
	if ( arguments.length ) {
		f = arguments[ 0 ];
	} else {
		f = TMP;
	}
	err = unlinkSync( f );
	if ( err ) {
		throw err;
	}
}


// TESTS //

tape( 'command-line interface', function test( t ) {
	t.ok( true, __filename );
	t.end();
});

tape( 'when invoked with a `--help` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
		'encoding': 'utf8'
	});
	cmd = [
		EXEC_PATH,
		fpath,
		'--help'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), expected+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-h` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
		'encoding': 'utf8'
	});
	cmd = [
		EXEC_PATH,
		fpath,
		'-h'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), expected+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `--version` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		EXEC_PATH,
		fpath,
		'--version'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), PKG_VERSION+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-V` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		EXEC_PATH,
		fpath,
		'-V'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), PKG_VERSION+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'the command-line interface updates a license header', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=./fixtures/apache-2.0.txt\'; process.argv[ 3 ] = \'--header=./fixtures/apache-2.0.jsdoc.txt\'; process.argv[ 4 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file contain expected header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface updates a license header (old header regular expression)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'single-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=./fixtures/re_apache-2.0.jsdoc.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_NO_HEADER, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface updates a license header (prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'single-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./fixtures/apache-2.0.jsdoc.two_lines.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_NO_HEADER, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface updates a license header (prefix; regular expression)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'single-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./fixtures/re_apache-2.0.jsdoc.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_NO_HEADER, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface updates a license header (shebang)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file which includes a "shebang":
	f = tmp( true, 'single-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=./fixtures/apache-2.0.jsdoc.txt\'; process.argv[ 3 ] = \'--header=./fixtures/apache-2.0.txt\'; process.argv[ 4 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_SHEBANG, 'utf8' );
			t.strictEqual( actual, expected, 'file contains expected header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface updates a license header (file lacking filename extension)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file without a filename extension:
	f = tmp( false, 'single-line', join( __dirname, 'fixtures', 'tmp' ) );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=./fixtures/apache-2.0.jsdoc.two_lines.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_NO_HEADER, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup( f );
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./fixtures/apache-2.0.txt\'; process.argv[ 3 ] = \'--old=c:./fixtures/apache-2.0.txt\'; process.argv[ 4 ] = \'--header=txt:./fixtures/apache-2.0.jsdoc.txt\'; process.argv[ 5 ] = \'--header=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 6 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file contains expected header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options (regular expression)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'single-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./fixtures/re_apache-2.0.jsdoc.txt\'; process.argv[ 3 ] = \'--old=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 4 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_NO_HEADER, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options (shebang)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file which includes a "shebang":
	f = tmp( true, 'single-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./fixtures/apache-2.0.jsdoc.txt\'; process.argv[ 3 ] = \'--old=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 4 ] = \'--header=txt:./fixtures/apache-2.0.txt\'; process.argv[ 5 ] = \'--header=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 6 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED_SHEBANG, 'utf8' );
			t.strictEqual( actual, expected, 'file contains expected header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options (file lacking a filename extension)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file lacking a filename extension:
	f = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp' ) );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=tmp:./fixtures/apache-2.0.txt\'; process.argv[ 3 ] = \'--old=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 4 ] = \'--header=tmp:./fixtures/apache-2.0.jsdoc.txt\'; process.argv[ 5 ] = \'--header=c:./fixtures/apache-2.0.jsdoc.txt\'; process.argv[ 6 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup( f );
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if provided multiple header values and one or more of those values lacks a language prefix, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=default:./fixtures/apache-2.0.txt\'; process.argv[ 3 ] = \'--old=./fixtures/mit.jsdoc.txt\'; process.argv[ 4 ] = \'--old=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 5 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		var msg;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

		msg = stderr.toString();
		t.strictEqual( msg.length > 0, true, msg );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if provided multiple header values and one or more of those values lacks a language prefix, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--header=default:./fixtures/apache-2.0.txt\'; process.argv[ 3 ] = \'--header=./fixtures/mit.jsdoc.txt\'; process.argv[ 4 ] = \'--header=c:./fixtures/mit.jsdoc.txt\'; process.argv[ 5 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		var msg;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

		msg = stderr.toString();
		t.strictEqual( msg.length > 0, true, msg );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports use as a standard stream', opts, function test( t ) {
	var opts;
	var cmd;
	var f1;
	var f2;

	// Create temporary files:
	f1 = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp1.js.txt' ) );
	f2 = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp2.js.txt' ) );

	// Attempt to update headers:
	cmd = [
		'printf "'+f1+'\n'+f2+'\n"',
		'|',
		EXEC_PATH,
		fpath,
		'--old=./fixtures/apache-2.0.txt',
		'--header=./fixtures/apache-2.0.jsdoc.txt'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary files have changed:
			actual = readFileSync( f1, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );

			actual = readFileSync( f2, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup( f1 );
		cleanup( f2 );
		t.strictEqual( existsSync( f1 ), false, 'tmp file updated' );
		t.strictEqual( existsSync( f2 ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports providing a custom separator when used as a standard stream (regexp)', opts, function test( t ) {
	var opts;
	var cmd;
	var f1;
	var f2;

	// Create temporary files:
	f1 = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp1.js.txt' ) );
	f2 = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp2.js.txt' ) );

	// Attempt to update headers:
	cmd = [
		'printf "'+f1+'\t'+f2+'\t"',
		'|',
		EXEC_PATH,
		fpath,
		'--old=./fixtures/apache-2.0.txt',
		'--header=./fixtures/apache-2.0.jsdoc.txt',
		'--split=/\\\\t/'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f1, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );

			actual = readFileSync( f2, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup( f1 );
		cleanup( f2 );
		t.strictEqual( existsSync( f1 ), false, 'tmp file updated' );
		t.strictEqual( existsSync( f2 ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'the command-line interface supports providing a custom separator when used as a standard stream (non-regexp string)', opts, function test( t ) {
	var opts;
	var cmd;
	var f1;
	var f2;

	// Create temporary files:
	f1 = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp1.js.txt' ) );
	f2 = tmp( false, 'multi-line', join( __dirname, 'fixtures', 'tmp2.js.txt' ) );

	// Attempt to update headers:
	cmd = [
		'printf "'+f1+'\t'+f2+'\t"',
		'|',
		EXEC_PATH,
		fpath,
		'--old=./fixtures/apache-2.0.txt',
		'--header=./fixtures/apache-2.0.jsdoc.txt',
		'--split=\\\\t'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );

			// Check that the temporary file has changed:
			actual = readFileSync( f1, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );

			actual = readFileSync( f2, 'utf8' );
			expected = readFileSync( EXPECTED, 'utf8' );
			t.strictEqual( actual, expected, 'file does not contain header' );
		}
		// Cleanup:
		cleanup( f1 );
		cleanup( f2 );
		t.strictEqual( existsSync( f1 ), false, 'tmp file updated' );
		t.strictEqual( existsSync( f2 ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'when used as a standard stream, if an error is encountered when reading from `stdin`, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var script;
	var opts;
	var cmd;

	script = readFileSync( resolve( __dirname, 'fixtures', 'stdin_error.js.txt' ), {
		'encoding': 'utf8'
	});

	// Replace single quotes with double quotes:
	script = replace( script, '\'', '"' );

	cmd = [
		EXEC_PATH,
		'-e',
		'\''+script+'\''
	];

	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString(), 'Error: beep\n', 'expected value' );
		t.end();
	}
});

tape( 'when used as a standard stream, if an error is encountered when removing headers, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var script;
	var opts;
	var cmd;

	script = readFileSync( resolve( __dirname, 'fixtures', 'stdin_update_error.js.txt' ), {
		'encoding': 'utf8'
	});

	// Replace single quotes with double quotes:
	script = replace( script, '\'', '"' );

	cmd = [
		EXEC_PATH,
		'-e',
		'\''+script+'\''
	];

	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var msg;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

		msg = stderr.toString();
		t.strictEqual( msg.length > 0, true, msg );
		t.end();
	}
});

tape( 'if an error is encountered when updating headers, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var script;
	var opts;
	var cmd;

	script = readFileSync( resolve( __dirname, 'fixtures', 'cli_error.js.txt' ), {
		'encoding': 'utf8'
	});

	// Replace single quotes with double quotes:
	script = replace( script, '\'', '"' );

	cmd = [
		EXEC_PATH,
		'-e',
		'\''+script+'\''
	];

	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString(), 'Error: beep\n', 'expected value' );
		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (non-prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (non-prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--header=./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--header=txt:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 3 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (multiple)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--old=txt:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 3 ] = \'--old=awk:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 4 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (multiple)', opts, function test( t ) {
	var opts;
	var cmd;
	var f;

	// Create a temporary file:
	f = tmp( false, 'multi-line' );

	// Attempt to update headers:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \'--header=txt:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 3 ] = \'--header=awk:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 4 ] = \''+f+'\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var expected;
		var actual;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );

		// Check that the temporary file has not changed:
		actual = readFileSync( f, 'utf8' );
		expected = readFileSync( MULTI_LINE_HEADER, 'utf8' );
		t.strictEqual( actual, expected, 'file has not changed' );

		// Cleanup:
		cleanup();
		t.strictEqual( existsSync( f ), false, 'tmp file updated' );

		t.end();
	}
});
