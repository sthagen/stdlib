/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var isEven = require( '@stdlib/assert/is-even' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var objectKeys = require( '@stdlib/utils/keys' );


// MAIN //

/**
* Validates a resolution table object.
*
* @private
* @param {Object} out - destination object
* @param {Options} table - resolution table object
* @param {ArrayLikeObject} [table.scalar] - scalar look-up table
* @param {ArrayLikeObject} [table.array] - array look-up table
* @param {ArrayLikeObject} [table.ndarray] - ndarray look-up table
* @returns {(Error|null)} null or an error object
*
* @example
* var out = {};
* var table = {
*     'scalar': [],
*     'array': [],
*     'ndarray': []
* };
* var err = validate( out, table );
* if ( err ) {
*     throw err;
* }
*/
function validate( out, table ) {
	var fields;
	var tmp;
	var key;
	var v1;
	var v2;
	var i;
	var j;

	if ( !isPlainObject( table ) ) {
		return new TypeError( 'invalid argument. Resolution table must be a plain object. Value: `' + table + '`.' );
	}
	fields = objectKeys( out );
	for ( i = 0; i < fields.length; i++ ) {
		key = fields[ i ];
		if ( hasOwnProp( table, key ) ) {
			tmp = table[ key ];
			if ( !isArrayLikeObject( tmp ) ) {
				return new TypeError( 'invalid argument. Resolution table `' + key + '` field value must be an array-like object. Value: `' + tmp + '`.' );
			}
			if ( !isEven( tmp.length ) ) {
				return new Error( 'invalid argument. Resolution table `' + key + '` field value must consist of dtype-function pairs and must thus have an even length.' );
			}
			for ( j = 0; j < tmp.length; j += 2 ) {
				v1 = tmp[ j ];
				v2 = tmp[ j+1 ];
				if ( !isString( v1 ) ) {
					return new TypeError( 'invalid argument. Resolution table `' + key + '` field value must consist of dtype-function pairs and has a dtype entry which is not a string. Value: `' + v1 + '`.' );
				}
				if ( !isFunction( v2 ) ) {
					return new TypeError( 'invalid argument. Resolution table `' + key + '` field value must consist of dtype-function pairs and has a function entry which is not a function. Value: `' + v2 + '`.' );
				}
				out[ key ].push( v1, v2 );
			}
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
