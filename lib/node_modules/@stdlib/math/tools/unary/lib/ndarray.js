/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isSingleSegmentCompatible = require( '@stdlib/ndarray/base/assert/is-single-segment-compatible' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var buffer = require( '@stdlib/ndarray/base/buffer' );
var shape2strides = require( '@stdlib/ndarray/base/shape2strides' );
var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
var singletonDimensions = require( '@stdlib/ndarray/base/singleton-dimensions' );
var maxViewBufferIndex = require( '@stdlib/ndarray/base/max-view-buffer-index' );
var minViewBufferIndex = require( '@stdlib/ndarray/base/min-view-buffer-index' );
var resolve = require( './resolve.js' );


// MAIN //

/**
* Applies a function to an ndarray.
*
* @private
* @param {ArrayLikeObject} table - resolution table
* @param {ndarray} x - input array
* @throws {TypeError} must provide an argument with a supported data type
* @returns {ndarray} output array
*/
function ndarrayfcn( table, x ) {
	var strides;
	var offset;
	var order;
	var ndims;
	var shape;
	var data;
	var buf;
	var dt;
	var N;
	var s;
	var y;
	var f;
	var i;

	// Cache ndarray properties to avoid repeatedly calling ndarray accessors...
	N = x.length;
	ndims = x.ndims;
	shape = x.shape;
	strides = x.strides;
	offset = x.offset;
	order = x.order;
	data = x.data;
	dt = x.dtype;

	// Attempt to resolve a type-specific implementation...
	f = resolve( table, dt );
	if ( f === null ) {
		// Fall back to resolving a "generic" interface:
		f = resolve( table, 'generic' );
		if ( f === null ) {
			throw new TypeError( 'invalid argument. Providing an ndarray with data type `' + dt + '` is not supported.' );
		}
	}
	// Create an output ndarray...
	buf = buffer( dt, N );
	y = ndarray( dt, buf, shape, shape2strides( shape, order ), 0, order );

	// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...
	if ( ndims === 1 ) {
		f( N, data, strides[ 0 ], offset, buf, 1, 0 );
		return y;
	}
	// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarray as being equivalent to a one-dimensional strided array...
	if ( singletonDimensions( shape ) === ndims-1 ) {
		// Get the stride for the non-singleton dimension...
		for ( i = 0; i < ndims; i++ ) {
			if ( shape[ i ] !== 1 ) {
				s = strides[ i ];
				break;
			}
		}
		f( N, data, s, offset, buf, 1, 0 );
		return y;
	}
	// Determine whether we can ignore shape (and strides) and treat `x` as a linear strided array...
	s = iterationOrder( strides ); // +/-1
	if ( s !== 0 && isSingleSegmentCompatible( shape, strides, offset ) ) { // Note: equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain iteration order
		if ( s === 1 ) {
			offset = minViewBufferIndex( shape, strides, offset );
		} else {
			offset = maxViewBufferIndex( shape, strides, offset );
		}
		f( N, data, s, offset, buf, 1, 0 );
		return y;
	}
	// At this point, `x` is a non-contiguous n-dimensional array, so we cannot directly use lower-level strided array functionality...

	// TODO: consider cache oblivious iteration, rather than data copy...
	data = buffer( dt, N );
	for ( i = 0; i < N; i++ ) {
		// FIXME: handle complex dtype ndarrays and beware that `iget` is not guaranteed to be on something considered "ndarray-like"
		data[ i ] = x.iget( i );
	}
	// The buffer copy is contiguous so we can now use strided array functionality:
	f( N, data, 1, 0, buf, 1, 0 );

	return y;
}


// EXPORTS //

module.exports = ndarrayfcn;
