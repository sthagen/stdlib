/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isComplexLike = require( '@stdlib/assert/is-complex-like' );
var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var isSingleSegmentCompatible = require( '@stdlib/ndarray/base/assert/is-single-segment-compatible' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var buffer = require( '@stdlib/ndarray/base/buffer' );
var shape2strides = require( '@stdlib/ndarray/base/shape2strides' );
var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
var singletonDimensions = require( '@stdlib/ndarray/base/singleton-dimensions' );
var dtype = require( '@stdlib/ndarray/base/buffer-dtype' );
var maxViewBufferIndex = require( '@stdlib/ndarray/base/max-view-buffer-index' );
var minViewBufferIndex = require( '@stdlib/ndarray/base/min-view-buffer-index' );
var resolve = require( './resolve.js' );
var validate = require( './validate.js' );

/**
* Applies a function to an ndarray.
*
* @private
* @param {ArrayLikeObject} table - resolution table
* @param {ndarray} x - input array
* @throws {TypeError} must provide an argument with a supported data type
* @returns {ndarray} output array
*/
function ndarrayfcn( table, x ) {
	var strides;
	var offset;
	var order;
	var ndims;
	var shape;
	var data;
	var buf;
	var dt;
	var N;
	var s;
	var y;
	var f;
	var i;

	// Cache ndarray properties to avoid repeatedly calling ndarray accessors...
	N = x.length;
	ndims = x.ndims;
	shape = x.shape;
	strides = x.strides;
	offset = x.offset;
	order = x.order;
	data = x.data;
	dt = x.dtype;

	// Attempt to resolve a type-specific implementation...
	f = resolve( table, dt );
	if ( f === null ) {
		// Fall back to resolving a "generic" interface:
		f = resolve( table, 'generic' );
		if ( f === null ) {
			throw new TypeError( 'invalid argument. Providing an ndarray with data type `' + dt + '` is not supported.' );
		}
	}
	// Create an output ndarray...
	buf = buffer( dt, N );
	y = ndarray( dt, buf, shape, shape2strides( shape, order ), 0, order );

	// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...
	if ( ndims === 1 ) {
		f( N, data, strides[ 0 ], offset, buf, 1, 0 );
		return y;
	}
	// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarray as being equivalent to a one-dimensional strided array...
	if ( singletonDimensions( shape ) === ndims-1 ) {
		// Get the stride for the non-singleton dimension...
		for ( i = 0; i < ndims; i++ ) {
			if ( shape[ i ] !== 1 ) {
				s = strides[ i ];
				break;
			}
		}
		f( N, data, s, offset, buf, 1, 0 );
		return y;
	}
	// Determine whether we can ignore shape (and strides) and treat `x` as a linear strided array...
	s = iterationOrder( strides ); // +/-1
	if ( s !== 0 && isSingleSegmentCompatible( shape, strides, offset ) ) { // Note: equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain iteration order
		if ( s === 1 ) {
			offset = minViewBufferIndex( shape, strides, offset );
		} else {
			offset = maxViewBufferIndex( shape, strides, offset );
		}
		f( N, data, s, offset, buf, 1, 0 );
		return y;
	}
	// At this point, `x` is a non-contiguous n-dimensional array, so we cannot directly use lower-level strided array functionality...

	// TODO: consider cache oblivious iteration, rather than data copy...
	data = buffer( dt, N );
	for ( i = 0; i < N; i++ ) {
		// FIXME: handle complex dtype ndarrays and beware that `iget` is not guaranteed to be on something considered "ndarray-like"
		data[ i ] = x.iget( i );
	}
	// The buffer copy is contiguous so we can now use strided array functionality:
	f( N, data, 1, 0, buf, 1, 0 );

	return y;
}

/**
* Applies a function to an array-like object.
*
* @private
* @param {ArrayLikeObject} table - resolution table
* @param {ArrayLikeObject} x - input array
* @throws {TypeError} must provide an argument with a supported data type
* @returns {ArrayLikeObject} output array
*/
function arrayfcn( table, x ) {
	var dt;
	var N;
	var y;
	var f;

	dt = dtype( x ) || 'generic';

	// Attempt to resolve a type-specific implementation...
	f = resolve( table, dt );
	if ( f === null ) {
		// Fall back to resolving a "generic" interface:
		f = resolve( table, 'generic' );
		if ( f === null ) {
			throw new TypeError( 'invalid argument. Providing an array-like object is not supported.' );
		}
	}
	N = x.length;

	// Create an output array:
	y = buffer( dt, N );

	f( N, x, 1, y, 1 );
	return y;
}

/**
* Applies a function to a numeric value.
*
* @private
* @param {ArrayLikeObject} table - resolution table
* @param {number} x - input value
* @throws {TypeError} must provide an argument having a supported data type
* @returns {number} output value
*/
function numberfcn( table, x ) {
	var f = resolve( table, 'number' );
	if ( f ) {
		return f( x );
	}
	throw new TypeError( 'invalid argument. Providing a number is not supported.' );
}

/**
* Applies a function to a complex number.
*
* @private
* @param {ArrayLikeObject} table - resolution table
* @param {Complex} x - input value
* @throws {TypeError} must provide an argument with a supported data type
* @returns {(number|Complex)} output value
*/
function complexfcn( table, x ) {
	var f = resolve( table, 'complex' );
	if ( f ) {
		return f( x );
	}
	throw new TypeError( 'invalid argument. Providing a complex number is not supported.' );
}


// MAIN //

/**
* Returns a function which dispatches to specified functions based on input argument types.
*
* @param {Object} table - resolution table object
* @param {ArrayLikeObject} [table.scalar] - scalar look-up table
* @param {ArrayLikeObject} [table.array] - array look-up table
* @param {ArrayLikeObject} [table.ndarray] - ndarray look-up table
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid table fields
* @throws {Error} table field values must be array-like objects having an even number of elements
* @throws {TypeError} table field values must consist of dtype-function pairs
* @returns {Function} dispatch function
*
* @example
* var nabs = require( '@stdlib/math/base/special/abs' );
* var dabs = require( '@stdlib/math/strided/special/dabs' );
* var sabs = require( '@stdlib/math/strided/special/sabs' );
* var gabs = require( '@stdlib/math/strided/special/abs' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var table = {
*     'scalar': [
*         'number', nabs
*     ],
*     'array': [
*         'float64', dabs,
*         'float32', sabs,
*         'generic', gabs
*     ],
*     'ndarray': [
*         'float64', dabs.ndarray,
*         'float32', sabs.ndarray,
*         'generic', gabs.ndarray
*     ]
* };
*
* var abs = dispatch( table );
*
* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );
*
* var y = abs( x );
* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]
*/
function dispatch( table ) {
	var err;
	var t;

	t = {
		'scalar': [],
		'array': [],
		'ndarray': []
	};
	err = validate( t, table );
	if ( err ) {
		throw err;
	}
	return dispatcher;

	/**
	* Function interface which performs dispatch.
	*
	* @private
	* @param {(ndarray|ArrayLikeObject|number|Complex)} x - input value
	* @throws {TypeError} must provide an argument having a supported data type
	* @returns {(ndarray|ArrayLikeObject|number)} results
	*/
	function dispatcher( x ) {
		if ( isNumber( x ) ) {
			return numberfcn( t.scalar, x );
		}
		if ( isndarrayLike( x ) ) {
			return ndarrayfcn( t.ndarray, x );
		}
		if ( isArrayLikeObject( x ) ) {
			return arrayfcn( t.array, x );
		}
		// Note: we check for complex numbers last, as assumed that, in general, 1) complex numbers are not likely to be an especially common input argument data type and 2) users may expect that using complex numbers won't be as performant as built-in numbers, so we can leverage that expectation to prioritize other data types
		if ( isComplexLike( x ) ) {
			return complexfcn( t.scalar, x );
		}
		throw new TypeError( 'invalid argument. Must provide an argument having a supported data type. Value: `' + x + '`.' );
	}
}


// EXPORTS //

module.exports = dispatch;
