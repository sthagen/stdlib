/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isComplexLike = require( '@stdlib/assert/is-complex-like' );
var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
var isCollection = require( '@stdlib/assert/is-collection' );
var ndarrayfcn = require( './ndarray.js' );
var arrayfcn = require( './array.js' );
var numberfcn = require( './number.js' );
var complexfcn = require( './complex.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Returns a function which dispatches to specified functions based on input argument types.
*
* @param {Object} table - resolution table object
* @param {ArrayLikeObject} [table.scalar] - scalar look-up table
* @param {ArrayLikeObject} [table.array] - array look-up table
* @param {ArrayLikeObject} [table.ndarray] - ndarray look-up table
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid table fields
* @throws {Error} table field values must be array-like objects having an even number of elements
* @throws {TypeError} table field values must consist of dtype-function pairs
* @returns {Function} dispatch function
*
* @example
* var nabs = require( '@stdlib/math/base/special/abs' );
* var dabs = require( '@stdlib/math/strided/special/dabs' );
* var sabs = require( '@stdlib/math/strided/special/sabs' );
* var gabs = require( '@stdlib/math/strided/special/abs' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var table = {
*     'scalar': [
*         'number', nabs
*     ],
*     'array': [
*         'float64', dabs,
*         'float32', sabs,
*         'generic', gabs
*     ],
*     'ndarray': [
*         'float64', dabs.ndarray,
*         'float32', sabs.ndarray,
*         'generic', gabs.ndarray
*     ]
* };
*
* var abs = dispatch( table );
*
* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );
*
* var y = abs( x );
* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]
*/
function dispatch( table ) {
	var err;
	var t;

	t = {
		'scalar': [],
		'array': [],
		'ndarray': []
	};
	err = validate( t, table );
	if ( err ) {
		throw err;
	}
	return dispatcher;

	/**
	* Function interface which performs dispatch.
	*
	* @private
	* @param {(ndarray|Collection|number|Complex)} x - input value
	* @throws {TypeError} must provide an argument having a supported data type
	* @returns {(ndarray|Collection|number)} results
	*/
	function dispatcher( x ) {
		if ( isNumber( x ) ) {
			return numberfcn( t.scalar, x );
		}
		if ( isndarrayLike( x ) ) {
			return ndarrayfcn( t.ndarray, x );
		}
		if ( isCollection( x ) ) {
			return arrayfcn( t.array, x );
		}
		// Note: we check for complex numbers last, as assumed that, in general, 1) complex numbers are not likely to be an especially common input argument data type and 2) users may expect that using complex numbers won't be as performant as built-in numbers, so we can leverage that expectation to prioritize other data types
		if ( isComplexLike( x ) ) {
			return complexfcn( t.scalar, x );
		}
		throw new TypeError( 'invalid argument. Must provide an argument having a supported data type. Value: `' + x + '`.' );
	}
}


// EXPORTS //

module.exports = dispatch;
