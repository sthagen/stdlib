/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable array-element-newline */

'use strict';

var dabs = require( '@stdlib/math/strided/special/dabs' );
var sabs = require( '@stdlib/math/strided/special/sabs' );
var gabs = require( '@stdlib/math/strided/special/abs' );
var Float64Array = require( '@stdlib/array/float64' );
var array = require( '@stdlib/ndarray/array' );
var ind2sub = require( '@stdlib/ndarray/ind2sub' );
var dispatch = require( './../lib' );

var table;
var inabs;
var sub;
var sh;
var x;
var i;

// Define a table for resolving unary functions based on argument data types:
table = {
	'array': [
		'float64', dabs,
		'float32', sabs,
		'generic', gabs
	],
	'ndarray': [
		'float64', dabs.ndarray,
		'float32', sabs.ndarray,
		'generic', gabs.ndarray
	]
};

// Create a function which dispatches based on argument data types:
inabs = dispatch( table );

// Provide an array-like object...
x = new Float64Array( [ -1.0, -2.0, -3.0 ] );
inabs( x );
for ( i = 0; i < x.length; i++ ) {
	console.log( 'abs(x_%d) = %d', i, x[ i ] );
}

// Provide an ndarray...
x = array( [ [ -1.0, -2.0 ], [ -3.0, -4.0 ] ] );
sh = x.shape;

inabs( x );
for ( i = 0; i < x.length; i++ ) {
	sub = ind2sub( sh, i );
	console.log( 'abs(x_%d%d) = %d', sub[ 0 ], sub[ 1 ], x.iget( i ) );
}
