/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "stdlib/math/base/special/kronecker_delta.h"
#include <node_api.h>
#include <assert.h>

/**
* Add-on namespace.
*/
namespace stdlib_math_base_special_kronecker_delta {

    /**
	* Evaluates the Kronecker delta.
	*
	* When called from JavaScript, the function expects two arguments:
	*
	* -   `x`: number
	* -   `y`: number
	*/
	napi_value node_kronecker_delta( napi_env env, napi_callback_info info ) {
        napi_status status;

        size_t argc = 2;
        napi_value argv[ 2 ];
        status = napi_get_cb_info( env, info, &argc, argv, nullptr, nullptr );
        assert( status == napi_ok );

        if ( argc < 2 ) {
            napi_throw_error( env, nullptr, "invalid invocation. Must provide 2 arguments." );
            return nullptr;
        }

        napi_valuetype vtype0;
        status = napi_typeof( env, argv[ 0 ], &vtype0 );
        assert( status == napi_ok );
        if ( vtype0 != napi_number ) {
            napi_throw_type_error( env, nullptr, "invalid input argument. First argument must be a number." );
            return nullptr;
        }

        napi_valuetype vtype1;
        status = napi_typeof( env, argv[ 1 ], &vtype1 );
        assert( status == napi_ok );
        if ( vtype1 != napi_number ) {
            napi_throw_type_error( env, nullptr, "invalid input argument. Second argument must be a number." );
            return nullptr;
        }

        double i;
        status = napi_get_value_double( env, argv[ 0 ], &i );
        assert( status == napi_ok );

        double j;
        status = napi_get_value_double( env, argv[ 1 ], &j );
        assert( status == napi_ok );

        napi_value v;
        status = napi_create_double( env, stdlib_base_kronecker_delta( i, j ), &v );
        assert( status == napi_ok );

        return v;
    }

    napi_value Init( napi_env env, napi_value exports ) {
        napi_status status;
        napi_value fcn;
        status = napi_create_function( env, "exports", NAPI_AUTO_LENGTH, node_kronecker_delta, NULL, &fcn );
        assert( status == napi_ok );
        return fcn;
    }

    NAPI_MODULE( NODE_GYP_MODULE_NAME, Init )
} // end namespace stdlib_math_base_special_kronecker_delta
