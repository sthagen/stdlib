/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

var base = require( '@stdlib/math/base/special/abs' );
var dabs = require( '@stdlib/math/strided/special/dabs' );
var sabs = require( '@stdlib/math/strided/special/sabs' );
var gabs = require( '@stdlib/math/strided/special/abs' );
var dispatch = require( '@stdlib/math/tools/unary' );


// VARIABLES //

var table = {
	'scalar': [
		'number', base
	],
	'array': [
		'float64', dabs,
		'float32', sabs,
		'generic', gabs
	],
	'ndarray': [
		'float64', dabs.ndarray,
		'float32', sabs.ndarray,
		'generic', gabs.ndarray
	]
};


// MAIN //

/**
* Computes the absolute value.
*
* @name abs
* @type {Function}
* @param {(ndarray|Collection|number)} x - input value
* @throws {TypeError} must provide either an ndarray, array-like object, or number
* @returns {(ndarray|Collection|number)} results
*
* @example
* var y = abs( -1.0 );
* // returns 1.0
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var x = new Float64Array( [ 1.0, -1.0, 0.0 ] );
*
* var y = abs( x );
* // returns <Float64Array>[ 1.0, 1.0, 0.0 ]
*
* @example
* var x = [ 1.0, -1.0, 0.0 ];
*
* var y = abs( x );
* // returns [ 1.0, 1.0, 0.0 ]
*
* @example
* var array = require( '@stdlib/ndarray/array' );
*
* var x = array( [ [ 1.0, -2.0 ], [ -3.0, 4.0 ] ] );
* // returns <ndarray>
*
* var y = abs( x );
* // returns <ndarray>
*
* var v = y.get( 0, 1 );
* // 2.0
*/
var abs = dispatch( table );


// EXPORTS //

module.exports = abs;
