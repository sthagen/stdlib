/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var isSingleSegmentCompatible = require( '@stdlib/ndarray/base/assert/is-single-segment-compatible' );
var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var isFloat32Array = require( '@stdlib/assert/is-float32array' );
var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
var singletonDimensions = require( '@stdlib/ndarray/base/singleton-dimensions' );
var dtype = require( '@stdlib/ndarray/base/buffer-dtype' );
var maxViewBufferIndex = require( '@stdlib/ndarray/base/max-view-buffer-index' );
var minViewBufferIndex = require( '@stdlib/ndarray/base/min-view-buffer-index' );
var base = require( '@stdlib/math/base/special/abs' );
var dabs = require( '@stdlib/math/strided/special/dabs' );
var sabs = require( '@stdlib/math/strided/special/sabs' );
var gabs = require( '@stdlib/math/strided/special/abs' );


// MAIN //

/**
* Computes the absolute value in-place.
*
* @param {(ndarray|ArrayLikeObject)} x - input value
* @throws {TypeError} must provide either an ndarray or array-like object
* @returns {(ndarray|ArrayLikeObject)} `x`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var x = new Float64Array( [ 1.0, -1.0, 0.0 ] );
*
* var y = iabs( x );
* // returns <Float64Array>[ 1.0, 1.0, 0.0 ]
*
* var bool = ( y === x );
* // returns true
*
* @example
* var array = require( '@stdlib/ndarray/array' );
*
* var x = array( [ [ 1.0, -2.0 ], [ -3.0, 4.0 ] ] );
* // returns <ndarray>
*
* var y = iabs( x );
* // returns <ndarray>
*
* var v = y.get( 0, 1 );
* // 2.0
*
* var bool = ( y === x );
* // returns true
*/
function iabs( x ) {
	var strides;
	var offset;
	var ndims;
	var shape;
	var data;
	var dt;
	var N;
	var s;
	var f;
	var i;

	// TODO: add complex number array support

	if ( isndarrayLike( x ) ) {
		// Cache ndarray properties to avoid repeatedly calling ndarray accessors...
		N = x.length;
		ndims = x.ndims;
		shape = x.shape;
		strides = x.strides;
		offset = x.offset;
		data = x.data;
		dt = x.dtype;

		// Determine whether we can use a type-optimized implementation...
		if ( dt === 'float64' ) {
			f = dabs;
		} else if ( dt === 'float32' ) {
			f = sabs;
		} else {
			f = gabs;
		}
		// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...
		if ( ndims === 1 ) {
			s = strides[ 0 ];
			f.ndarray( N, data, s, offset, data, s, offset );
			return x;
		}
		// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarray as being equivalent to a one-dimensional strided array...
		if ( singletonDimensions( shape ) === ndims-1 ) {
			// Get the stride for the non-singleton dimension...
			for ( i = 0; i < ndims; i++ ) {
				if ( shape[ i ] !== 1 ) {
					s = strides[ i ];
					break;
				}
			}
			f.ndarray( N, data, s, offset, data, s, offset );
			return x;
		}
		// Determine whether we can ignore shape (and strides) and treat `x` as a linear strided array...
		s = iterationOrder( strides ); // +/-1
		if ( s !== 0 && isSingleSegmentCompatible( shape, strides, offset ) ) { // Note: equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain iteration order
			if ( s === 1 ) {
				offset = minViewBufferIndex( shape, strides, offset );
			} else {
				offset = maxViewBufferIndex( shape, strides, offset );
			}
			f.ndarray( N, data, s, offset, data, s, offset );
			return x;
		}
		// At this point, `x` is a non-contiguous n-dimensional array, so we cannot directly use lower-level strided array functionality...

		// TODO: consider cache oblivious iteration, rather than manual iteration in order to avoid method call overhead...
		for ( i = 0; i < N; i++ ) {
			x.iset( i, base( x.iget( i ) ) );
		}
		return x;
	}
	if ( !isArrayLikeObject( x ) ) {
		throw new TypeError( 'invalid argument. Must provide either an ndarray or array-like object. Value: `' + x + '`.' );
	}
	N = x.length;
	dt = dtype( x ) || 'generic';

	// Determine whether we can use type-optimized implementations...
	if ( isFloat64Array( x ) ) {
		f = dabs;
	} else if ( isFloat32Array( x ) ) {
		f = sabs;
	} else {
		f = gabs;
	}
	f( N, x, 1, x, 1 );
	return x;
}


// EXPORTS //

module.exports = iabs;
