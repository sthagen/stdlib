(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.stdlib_math_base_special_flat = f()}})(function(){var define,module,exports;
var createModuleFactory = function createModuleFactory(t){var e;return function(r){return e||t(e={exports:{},parent:r},e.exports),e.exports}};
var _$fallingFactorial_337 = createModuleFactory(function (module, exports) {
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the falling factorial.
*
* @module @stdlib/math/base/special/falling-factorial
*
* @example
* var fallingFactorial = require( '@stdlib/math/base/special/falling-factorial' );
*
* var v = fallingFactorial( 0.9, 5 );
* // returns ~0.644
*
* v = fallingFactorial( -9.0, 3 );
* // returns -990.0
*
* v = fallingFactorial( 0.0, 2 );
* // returns 0.0
*
* v = fallingFactorial( 3.0, -2 );
* // returns NaN
*/

// MODULES //

var fallingFactorial = _$fallingFactorial_336({});


// EXPORTS //

module.exports = fallingFactorial;

});
var _$fallingFactorial_336 = createModuleFactory(function (module, exports) {
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006, 2010.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_109 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gammaDeltaRatio_379 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider packaging as constant
var risingFactorial;


// MAIN //

/**
* Computes the falling factorial of `x` and `n`.
*
* ## Notes
*
* -   The falling factorial is defined as
*
*     ```tex
*     \operatorname{fallingFactorial}(x, n) = x (x-1) (x-2) (x-3) \ldots (x-n+1)
*     ```
*
* @param {number} x - first function parameter
* @param {NonNegativeInteger} n - second function parameter
* @returns {number} function value
*
* @example
* var v = fallingFactorial( 0.9, 5 );
* // returns ~0.644
*
* @example
* var v = fallingFactorial( -9.0, 3 );
* // returns -990.0
*
* @example
* var v = fallingFactorial( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = fallingFactorial( 3.0, -2 );
* // returns NaN
*/
function fallingFactorial( x, n ) {
	var result;
	var xp1;
	var n2;
	var t1;
	var t2;

	// Lazy-load to avoid undefined reference due to circular dependency...
	if ( !risingFactorial ) {
		risingFactorial = _$risingFactorial_650({});
	}
	if ( _$isnan_103( x ) || !_$isNonNegativeInteger_109( n ) ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( x < 0.0 ) {
		// For `x < 0`, we really have a rising factorial modulo a possible change of sign:
		return ( ( n&1 ) ? -1.0 : 1.0 ) * risingFactorial( -x, n );
	}
	if ( n === 0 ) {
		return 1.0;
	}
	if ( x < 0.5 ) {
		// Computing `1 + x` will throw away digits, so split up calculation...
		if ( n > MAX_FACTORIAL-2 ) {
			// Given a ratio of two very large numbers, we need to split the calculation up into two blocks:
			t1 = x * fallingFactorial( x-1.0, MAX_FACTORIAL-2 );
			t2 = fallingFactorial( x-MAX_FACTORIAL+1.0, n-MAX_FACTORIAL+1 );
			if ( _$FLOAT64_MAX_75/_$abs_118(t1) < _$abs_118(t2) ) {
				return _$FLOAT64_PINF_85;
			}
			return t1 * t2;
		}
		return x * fallingFactorial( x-1.0, n-1.0 );
	}
	if ( x <= n-1.0 ) {
		// `x+1-n` will be negative and computing the ratio of two gammas will not work, so split the product up into three parts:
		xp1 = x + 1.0;
		n2 = _$abs_118( _$floor_346( xp1 ) );
		if ( n2 === xp1 ) {
			return 0.0;
		}
		result = _$gammaDeltaRatio_379( xp1, -n2 );
		x -= n2;
		result *= x;
		n2 += 1.0;
		if ( n2 < n ) {
			result *= fallingFactorial( x-1.0, n-n2 );
		}
		return result;
	}
	// Simple case: just the ratio of two (positive argument) gamma functions. Note that we don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:
	return _$gammaDeltaRatio_379( x+1.0, -n );
}


// EXPORTS //

module.exports = fallingFactorial;

});
var _$risingFactorial_650 = createModuleFactory(function (module, exports) {
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the rising factorial.
*
* @module @stdlib/math/base/special/rising-factorial
*
* @example
* var risingFactorial = require( '@stdlib/math/base/special/rising-factorial' );
*
* var v = risingFactorial( 0.9, 5 );
* // returns ~94.766
*
* v = risingFactorial( -9.0, 3 );
* // returns -504.0
*
* v = risingFactorial( 0.0, 2 );
* // returns 0.0
*
* v = risingFactorial( 3.0, -2 );
* // returns 0.5
*/

// MODULES //

var risingFactorial = _$risingFactorial_651({});


// EXPORTS //

module.exports = risingFactorial;

});
var _$risingFactorial_651 = createModuleFactory(function (module, exports) {
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006, 2010.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gammaDeltaRatio_379 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;


// VARIABLES //

var fallingFactorial;


// MAIN //

/**
* Computes the rising factorial of `x` and `n`.
*
* ## Notes
*
* -   The rising factorial is defined as
*
*     ```tex
*     \operatorname{risingFactorial}(x, n) = x (x-1) (x-2) (x-3) \ldots (x-n+1)
*     ```
*
*     or equivalently
*
*     ```tex
*     \operatorname{risingFactorial}(x, n) = \frac{ \Gamma(x + n) }{ \Gamma(x) };
*     ```
*
* @param {number} x - first function parameter
* @param {integer} n - second function parameter
* @returns {number} function value
*
* @example
* var v = risingFactorial( 0.9, 5 );
* // returns ~94.766
*
* @example
* var v = risingFactorial( -9.0, 3 );
* // returns -504.0
*
* @example
* var v = risingFactorial( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = risingFactorial( 3.0, -2 );
* // returns 0.5
*/
function risingFactorial( x, n ) {
	var result;
	var inv;

	// Lazy-load to avoid undefined reference due to circular dependency...
	if ( !fallingFactorial ) {
		fallingFactorial = _$fallingFactorial_337({});
	}
	if ( _$isnan_103( x ) || !_$isInteger_101( n ) ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		// For `x < 0`, we really have a falling factorial, modulo a possible change of sign. Note that the falling factorial isn't defined for negative `n`, so we'll get rid of that case first:
		if ( n < 0.0 ) {
			x += n;
			n = -n;
			inv = true;
		}
		result = ( (n&1) ? -1.0 : 1.0 ) * fallingFactorial( -x, n );
		if ( inv ) {
			result = 1.0 / result;
		}
		return result;
	}
	if ( n === 0 ) {
		return 1.0;
	}
	if ( x === 0.0 ) {
		if ( n < 0 ) {
			return -_$gammaDeltaRatio_379( x+1.0, -n );
		}
		return 0.0;
	}
	if ( x < 1.0 && x+n < 0.0 ) {
		result = _$gammaDeltaRatio_379( 1.0-x, -n );
		return ( n&1 ) ? -result : result;
	}
	// We don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:
	return 1.0 / _$gammaDeltaRatio_379( x, n );
}


// EXPORTS //

module.exports = risingFactorial;

});
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


// EXPORTS //

var _$main_13 = main;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$main_13 = require( './define_property.js' ); */;


// MAIN //

/**
* Tests for `Object.defineProperty` support.
*
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/
function hasDefinePropertySupport() {
	var bool;

	if ( typeof _$main_13 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		_$main_13( {}, 'x', {} );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasDefinePropertySupport_15 = hasDefinePropertySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for `Object.defineProperty` support.
*
* @module @stdlib/assert/has-define-property-support
*
* @example
* var hasDefinePropertySupport = require( '@stdlib/assert/has-define-property-support' );
*
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasDefinePropertySupport_15 = require( './main.js' ); */;


// EXPORTS //

var _$hasDefinePropertySupport_14 = _$hasDefinePropertySupport_15;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
var __defineProperty_786 = Object.defineProperty;


// EXPORTS //

var _$defineProperty_786 = __defineProperty_786;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if an object has a specified property, either own or inherited.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'bap' );
* // returns false
*/
function hasProp( value, property ) {
	if ( value === void 0 || value === null ) {
		return false;
	}
	if ( typeof property === 'symbol' ) {
		return property in Object( value );
	}
	return ( String( property ) in Object( value ) );
}


// EXPORTS //

var _$hasProp_24 = hasProp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property, either own or inherited.
*
* @module @stdlib/assert/has-property
*
* @example
* var hasProp = require( '@stdlib/assert/has-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* bool = hasProp( beep, 'bop' );
* // returns false
*/

// MODULES //

/* removed: var _$hasProp_24 = require( './main.js' ); */;


// EXPORTS //

var _$hasProp_23 = _$hasProp_24;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

var _$hasSymbolSupport_26 = hasSymbolSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasSymbolSupport_26 = require( './main.js' ); */;


// EXPORTS //

var _$hasSymbolSupport_25 = _$hasSymbolSupport_26;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasSymbolSupport_25 = require( '@stdlib/assert/has-symbol-support' ); */;


// VARIABLES //

var FLG = _$hasSymbolSupport_25();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

var _$hasToStringTagSupport_28 = hasToStringTagSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasToStringTagSupport_28 = require( './main.js' ); */;


// EXPORTS //

var _$hasToStringTagSupport_27 = _$hasToStringTagSupport_28;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

var _$toStr_795 = toStr;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toStr_795 = require( './tostring.js' ); */;


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return _$toStr_795.call( v );
}


// EXPORTS //

var _$nativeClass_793 = nativeClass;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

var _$hasOwnProp_22 = hasOwnProp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

/* removed: var _$hasOwnProp_22 = require( './main.js' ); */;


// EXPORTS //

var _$hasOwnProp_21 = _$hasOwnProp_22;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

var _$toStrTag_796 = toStrTag;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_21 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$toStrTag_796 = require( './tostringtag.js' ); */;
/* removed: var _$toStr_795 = require( './tostring.js' ); */;


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function __nativeClass_794( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return _$toStr_795.call( v );
	}
	tag = v[ _$toStrTag_796 ];
	isOwn = _$hasOwnProp_21( v, _$toStrTag_796 );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ _$toStrTag_796 ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return _$toStr_795.call( v );
	}
	out = _$toStr_795.call( v );

	if ( isOwn ) {
		v[ _$toStrTag_796 ] = tag;
	} else {
		delete v[ _$toStrTag_796 ];
	}
	return out;
}


// EXPORTS //

var _$nativeClass_794 = __nativeClass_794;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

/* removed: var _$hasToStringTagSupport_27 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_793 = require( './native_class.js' ); */;
/* removed: var _$nativeClass_794 = require( './polyfill.js' ); */;


// MAIN //

var __nativeClass_792;
if ( _$hasToStringTagSupport_27() ) {
	__nativeClass_792 = _$nativeClass_794;
} else {
	__nativeClass_792 = _$nativeClass_793;
}


// EXPORTS //

var _$nativeClass_792 = __nativeClass_792;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_792 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var f;


// FUNCTIONS //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( _$nativeClass_792( value ) === '[object Array]' );
}


// MAIN //

if ( Array.isArray ) {
	f = Array.isArray;
} else {
	f = isArray;
}


// EXPORTS //

var _$f_39 = f;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

/* removed: var _$f_39 = require( './main.js' ); */;


// EXPORTS //

var _$isArray_38 = _$f_39;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArray_38 = require( '@stdlib/assert/is-array' ); */;


// MAIN //

/**
* Tests if a value is an object; e.g., `{}`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an object
*
* @example
* var bool = isObject( {} );
* // returns true
*
* @example
* var bool = isObject( null );
* // returns false
*/
function isObject( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		!_$isArray_38( value )
	);
}


// EXPORTS //

var _$isObject_46 = isObject;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an object.
*
* @module @stdlib/assert/is-object
*
* @example
* var isObject = require( '@stdlib/assert/is-object' );
*
* var bool = isObject( {} );
* // returns true
*
* bool = isObject( true );
* // returns false
*/

// MODULES //

/* removed: var _$isObject_46 = require( './main.js' ); */;


// EXPORTS //

var _$isObject_45 = _$isObject_46;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-proto */

'use strict';

// MODULES //

/* removed: var _$hasProp_23 = require( '@stdlib/assert/has-property' ); */;
/* removed: var _$isObject_45 = require( '@stdlib/assert/is-object' ); */;


// VARIABLES //

var objectProtoype = Object.prototype;
var defineGetter = objectProtoype.__defineGetter__;
var defineSetter = objectProtoype.__defineSetter__;
var lookupGetter = objectProtoype.__lookupGetter__;
var lookupSetter = objectProtoype.__lookupSetter__;


// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
function __defineProperty_788( obj, prop, descriptor ) {
	var prototype;
	var hasValue;
	var hasGet;
	var hasSet;

	if ( !_$isObject_45( obj ) ) {
		throw new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );
	}
	if ( !_$isObject_45( descriptor ) ) {
		throw new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );
	}
	hasValue = _$hasProp_23( descriptor, 'value' );
	if ( hasValue ) {
		if (
			lookupGetter.call( obj, prop ) ||
			lookupSetter.call( obj, prop )
		) {
			// Override `__proto__` to avoid touching inherited accessors:
			prototype = obj.__proto__;
			obj.__proto__ = objectProtoype;

			// Delete property as existing getters/setters prevent assigning value to specified property:
			delete obj[ prop ];
			obj[ prop ] = descriptor.value;

			// Restore original prototype:
			obj.__proto__ = prototype;
		} else {
			obj[ prop ] = descriptor.value;
		}
	}
	hasGet = _$hasProp_23( descriptor, 'get' );
	hasSet = _$hasProp_23( descriptor, 'set' );

	if ( hasValue && ( hasGet || hasSet ) ) {
		throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
	}

	if ( hasGet && defineGetter ) {
		defineGetter.call( obj, prop, descriptor.get );
	}
	if ( hasSet && defineSetter ) {
		defineSetter.call( obj, prop, descriptor.set );
	}
	return obj;
}


// EXPORTS //

var _$defineProperty_788 = __defineProperty_788;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

// MODULES //

/* removed: var _$hasDefinePropertySupport_14 = require( '@stdlib/assert/has-define-property-support' ); */;
/* removed: var _$defineProperty_786 = require( './builtin.js' ); */;
/* removed: var _$defineProperty_788 = require( './polyfill.js' ); */;


// MAIN //

var __defineProperty_787;
if ( _$hasDefinePropertySupport_14() ) {
	__defineProperty_787 = _$defineProperty_786;
} else {
	__defineProperty_787 = _$defineProperty_788;
}


// EXPORTS //

var _$defineProperty_787 = __defineProperty_787;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_787 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setReadOnly( obj, prop, value ) {
	_$defineProperty_787( obj, prop, {
		'configurable': false,
		'enumerable': true,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

var _$setReadOnly_790 = setReadOnly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setReadOnly_790 = require( './main.js' ); */;


// EXPORTS //

var _$setReadOnly_789 = _$setReadOnly_790;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
}


// EXPORTS //

var _$abs_117 = abs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$abs_117 = require( './abs.js' ); */;


// EXPORTS //

var _$abs_118 = _$abs_117;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the squared absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} squared absolute value
*
* @example
* var v = abs2( -1.0 );
* // returns 1.0
*
* @example
* var v = abs2( 2.0 );
* // returns 4.0
*
* @example
* var v = abs2( 0.0 );
* // returns 0.0
*
* @example
* var v = abs2( -0.0 );
* // returns 0.0
*
* @example
* var v = abs2( NaN );
* // returns NaN
*/
function abs2( x ) {
	return x * x;
}


// EXPORTS //

var _$abs2_119 = abs2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the squared absolute value.
*
* @module @stdlib/math/base/special/abs2
*
* @example
* var abs2 = require( '@stdlib/math/base/special/abs2' );
*
* var v = abs2( -1.0 );
* // returns 1.0
*
* v = abs2( 2.0 );
* // returns 4.0
*
* v = abs2( 0.0 );
* // returns 0.0
*
* v = abs2( -0.0 );
* // returns 0.0
*
* v = abs2( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$abs2_119 = require( './abs2.js' ); */;


// EXPORTS //

var _$abs2_120 = _$abs2_119;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

var _$isnan_104 = isnan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isnan_104 = require( './is_nan.js' ); */;


// EXPORTS //

var _$isnan_103 = _$isnan_104;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the principal square root.
*
* @type {Function}
* @param {number} x - input value
* @returns {number} principal square root
*
* @example
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/
var sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$sqrt_704 = sqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the principal square root.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sqrt_704 = require( './main.js' ); */;


// EXPORTS //

var _$sqrt_703 = _$sqrt_704;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One fourth times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-fourth-pi
* @type {number}
*
* @example
* var FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );
* // returns 7.85398163397448309616e-1
*/


// MAIN //

/**
* One fourth times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 7.85398163397448309616e-1
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var FOURTH_PI = 7.85398163397448309616e-1;


// EXPORTS //

var _$FOURTH_PI_59 = FOURTH_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666713;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len
		s2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_137 = evalrational;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_138( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.08333333333333809;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len
		s2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_138 = __evalrational_138;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FOURTH_PI_59 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;
/* removed: var _$evalrational_137 = require( './rational_pq.js' ); */;
/* removed: var _$evalrational_138 = require( './rational_rs.js' ); */;


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS


// MAIN //

/**
* Computes the arcsine of a number.
*
* ## Method
*
* -   A rational function of the form
*
*     ```tex
*     x + x^3 \frac{P(x^2)}{Q(x^2)}
*     ```
*
*     is used for \\(\|x\|\\) in the interval \\(\[0, 0.5\]\\). If \\(\|x\| > 0.5\\), it is transformed by the identity
*
*     ```tex
*     \operatorname{asin}(x) = \frac{\pi}{2} - 2 \operatorname{asin}( \sqrt{ (1-x)/2 } )
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:-------|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |
*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |
*
* @param {number} x - input value
* @returns {number} arcsine (in radians)
*
* @example
* var v = asin( 0.0 );
* // returns ~0.0
*
* @example
* var v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* @example
* var v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* @example
* var v = asin( NaN );
* // returns NaN
*/
function asin( x ) {
	var sgn;
	var zz;
	var a;
	var p;
	var z;

	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		a = x;
	} else {
		sgn = true;
		a = -x;
	}
	if ( a > 1.0 ) {
		return NaN;
	}
	if ( a > 0.625 ) {
		// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
		zz = 1.0 - a;
		p = zz * _$evalrational_138( zz );
		zz = _$sqrt_703( zz + zz );
		z = _$FOURTH_PI_59 - zz;
		zz = ( zz*p ) - MOREBITS;
		z -= zz;
		z += _$FOURTH_PI_59;
	} else {
		if ( a < 1.0e-8 ) {
			return x;
		}
		zz = a * a;
		z = zz * _$evalrational_137( zz );
		z = ( a*z ) + a;
	}
	return ( sgn ) ? -z : z;
}


// EXPORTS //

var _$asin_135 = asin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arcsine of a number.
*
* @module @stdlib/math/base/special/asin
*
* @example
* var asin = require( '@stdlib/math/base/special/asin' );
*
* var v = asin( 0.0 );
* // returns 0.0
*
* v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* v = asin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$asin_135 = require( './asin.js' ); */;


// EXPORTS //

var _$asin_136 = _$asin_135;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_136 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FOURTH_PI_59 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;


// VARIABLES //

var __MOREBITS_121 = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.


// MAIN //

/**
* Computes the arccosine of a number.
*
* ## Method
*
* -   Analytically,
*
*     ```tex
*     \operatorname{acos}(x) = \frac{\pi}{2} - \operatorname{asin}(x)
*     ```
*
*     However, if \\(\|x\|\\) is near \\(1\\), there is cancellation error in subtracting \\(\opertorname{asin}(x)\\) from \\(\pi/2\\). Hence, if \\(x < -0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = \pi - 2.0 \cdot \operatorname{asin}(\sqrt{(1+x)/2})
*     ```
*
*     or, if \\(x > +0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = 2.0 \cdot \operatorname{asin}( \sqrt{(1-x)/2} )}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:------:|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 50000    | 3.3e-17 | 8.2e-18 |
*     | IEEE       | -1, 1  | 10^6     | 2.2e-16 | 6.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acos( 1.0 );
* // returns 0.0
*
* @example
* var v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* @example
* var v = acos( NaN );
* // returns NaN
*/
function acos( x ) {
	var z;
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x > 0.5 ) {
		return 2.0 * _$asin_136( _$sqrt_703( 0.5 - (0.5*x) ) );
	}
	z = _$FOURTH_PI_59 - _$asin_136( x );
	z += __MOREBITS_121;
	z += _$FOURTH_PI_59;
	return z;
}


// EXPORTS //

var _$acos_121 = acos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arccosine of a number.
*
* @module @stdlib/math/base/special/acos
*
* @example
* var acos = require( '@stdlib/math/base/special/acos' );
*
* var v = acos( 1.0 );
* // returns 0.0
*
* v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* v = acos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acos_121 = require( './acos.js' ); */;


// EXPORTS //

var _$acos_122 = _$acos_121;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_792 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_792( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

var _$isUint32Array_50 = isUint32Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint32Array_50 = require( './main.js' ); */;


// EXPORTS //

var _$isUint32Array_49 = _$isUint32Array_50;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/math/uint32-max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

var _$UINT32_MAX_95 = UINT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_34 = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_34 = __main_34;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint32Array_49 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$UINT32_MAX_95 = require( '@stdlib/constants/math/uint32-max' ); */;
/* removed: var _$main_34 = require( './uint32array.js' ); */;


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_34 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT32_MAX_95+1, _$UINT32_MAX_95+2 ];
		arr = new _$main_34( arr );
		bool = (
			_$isUint32Array_49( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === _$UINT32_MAX_95-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint32ArraySupport_33 = hasUint32ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint32ArraySupport_33 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint32ArraySupport_32 = _$hasUint32ArraySupport_33;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_9 = ctor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_8() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_8 = __polyfill_8;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

/* removed: var _$hasUint32ArraySupport_32 = require( '@stdlib/assert/has-uint32array-support' ); */;
/* removed: var _$ctor_9 = require( './uint32array.js' ); */;
/* removed: var _$polyfill_8 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_7;
if ( _$hasUint32ArraySupport_32() ) {
	__ctor_7 = _$ctor_9;
} else {
	__ctor_7 = _$polyfill_8;
}


// EXPORTS //

var _$ctor_7 = __ctor_7;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_792 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_792( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

var _$isFloat64Array_41 = isFloat64Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isFloat64Array_41 = require( './main.js' ); */;


// EXPORTS //

var _$isFloat64Array_40 = _$isFloat64Array_41;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_16 = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_16 = __main_16;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFloat64Array_40 = require( '@stdlib/assert/is-float64array' ); */;
/* removed: var _$main_16 = require( './float64array.js' ); */;


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_16 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_16( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			_$isFloat64Array_40( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasFloat64ArraySupport_18 = hasFloat64ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasFloat64ArraySupport_18 = require( './main.js' ); */;


// EXPORTS //

var _$hasFloat64ArraySupport_17 = _$hasFloat64ArraySupport_18;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_1 = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_1 = __ctor_1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_3() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_3 = __polyfill_3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

/* removed: var _$hasFloat64ArraySupport_17 = require( '@stdlib/assert/has-float64array-support' ); */;
/* removed: var _$ctor_1 = require( './float64array.js' ); */;
/* removed: var _$polyfill_3 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_2;
if ( _$hasFloat64ArraySupport_17() ) {
	__ctor_2 = _$ctor_1;
} else {
	__ctor_2 = _$polyfill_3;
}


// EXPORTS //

var _$ctor_2 = __ctor_2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_792 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_792( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

var _$isUint8Array_52 = isUint8Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint8Array_52 = require( './main.js' ); */;


// EXPORTS //

var _$isUint8Array_51 = _$isUint8Array_52;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/math/uint8-max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

var _$UINT8_MAX_96 = UINT8_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_37 = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_37 = __main_37;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint8Array_51 = require( '@stdlib/assert/is-uint8array' ); */;
/* removed: var _$UINT8_MAX_96 = require( '@stdlib/constants/math/uint8-max' ); */;
/* removed: var _$main_37 = require( './uint8array.js' ); */;


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_37 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT8_MAX_96+1, _$UINT8_MAX_96+2 ];
		arr = new _$main_37( arr );
		bool = (
			_$isUint8Array_51( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === _$UINT8_MAX_96-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint8ArraySupport_36 = hasUint8ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint8ArraySupport_36 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint8ArraySupport_35 = _$hasUint8ArraySupport_36;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_12 = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_12 = __ctor_12;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_11() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_11 = __polyfill_11;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

/* removed: var _$hasUint8ArraySupport_35 = require( '@stdlib/assert/has-uint8array-support' ); */;
/* removed: var _$ctor_12 = require( './uint8array.js' ); */;
/* removed: var _$polyfill_11 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_10;
if ( _$hasUint8ArraySupport_35() ) {
	__ctor_10 = _$ctor_12;
} else {
	__ctor_10 = _$polyfill_11;
}


// EXPORTS //

var _$ctor_10 = __ctor_10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_792 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_792( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

var _$isUint16Array_48 = isUint16Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint16Array_48 = require( './main.js' ); */;


// EXPORTS //

var _$isUint16Array_47 = _$isUint16Array_48;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/math/uint16-max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

var _$UINT16_MAX_94 = UINT16_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_31 = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_31 = __main_31;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint16Array_47 = require( '@stdlib/assert/is-uint16array' ); */;
/* removed: var _$UINT16_MAX_94 = require( '@stdlib/constants/math/uint16-max' ); */;
/* removed: var _$main_31 = require( './uint16array.js' ); */;


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_31 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT16_MAX_94+1, _$UINT16_MAX_94+2 ];
		arr = new _$main_31( arr );
		bool = (
			_$isUint16Array_47( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === _$UINT16_MAX_94-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint16ArraySupport_30 = hasUint16ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint16ArraySupport_30 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint16ArraySupport_29 = _$hasUint16ArraySupport_30;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_6 = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_6 = __ctor_6;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_5() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_5 = __polyfill_5;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

/* removed: var _$hasUint16ArraySupport_29 = require( '@stdlib/assert/has-uint16array-support' ); */;
/* removed: var _$ctor_6 = require( './uint16array.js' ); */;
/* removed: var _$polyfill_5 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_4;
if ( _$hasUint16ArraySupport_29() ) {
	__ctor_4 = _$ctor_6;
} else {
	__ctor_4 = _$polyfill_5;
}


// EXPORTS //

var _$ctor_4 = __ctor_4;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_10 = require( '@stdlib/array/uint8' ); */;
/* removed: var _$ctor_4 = require( '@stdlib/array/uint16' ); */;


// MAIN //

var ctors = {
	'uint16': _$ctor_4,
	'uint8': _$ctor_10
};


// EXPORTS //

var _$ctors_42 = ctors;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctors_42 = require( './ctors.js' ); */;


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new _$ctors_42[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new _$ctors_42[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

var _$bool_44 = bool;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

/* removed: var _$bool_44 = require( './main.js' ); */;


// EXPORTS //

var _$IS_LITTLE_ENDIAN_43 = _$bool_44;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_43 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var HIGH;
if ( _$IS_LITTLE_ENDIAN_43 === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

var _$HIGH_761 = HIGH;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$HIGH_761 = require( './high.js' ); */;


// VARIABLES //

var FLOAT64_VIEW = new _$ctor_2( 1 );
var UINT32_VIEW = new _$ctor_7( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ _$HIGH_761 ];
}


// EXPORTS //

var _$getHighWord_763 = getHighWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

/* removed: var _$getHighWord_763 = require( './main.js' ); */;


// EXPORTS //

var _$getHighWord_762 = _$getHighWord_763;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_43 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __HIGH_770;
if ( _$IS_LITTLE_ENDIAN_43 === true ) {
	__HIGH_770 = 1; // second index
} else {
	__HIGH_770 = 0; // first index
}


// EXPORTS //

var _$HIGH_770 = __HIGH_770;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$HIGH_770 = require( './high.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_772 = new _$ctor_2( 1 );
var __UINT32_VIEW_772 = new _$ctor_7( __FLOAT64_VIEW_772.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	__FLOAT64_VIEW_772[ 0 ] = x;
	__UINT32_VIEW_772[ _$HIGH_770 ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return __FLOAT64_VIEW_772[ 0 ];
}


// EXPORTS //

var _$setHighWord_772 = setHighWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

/* removed: var _$setHighWord_772 = require( './main.js' ); */;


// EXPORTS //

var _$setHighWord_771 = _$setHighWord_772;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$FLOAT64_PINF_85 = FLOAT64_PINF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

var _$Number_755 = Number; // eslint-disable-line stdlib/require-globals

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

/* removed: var _$Number_755 = require( './number.js' ); */;


// EXPORTS //

var _$Number_754 = _$Number_755;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$Number_754 = require( '@stdlib/number/ctor' ); */;


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = _$Number_754.NEGATIVE_INFINITY;


// EXPORTS //

var _$FLOAT64_NINF_81 = FLOAT64_NINF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/math/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_EXPONENT_BIAS_58 = FLOAT64_EXPONENT_BIAS;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_560 = evalpoly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_560 = require( './polyval_lp.js' ); */;


// VARIABLES //

// High and low words of ln(2):
var LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000
var LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76

// sqrt(2)-1:
var SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34

// sqrt(2)/2-1:
var SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866

// 2**-29:
var SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000

// 2**-54:
var TINY = 5.551115123125783e-17;

// Max integer (unsafe) => 2**53:
var TWO53 = 9007199254740992;

// 2/3:
var TWO_THIRDS = 6.666666666666666666e-01;


// MAIN //

/**
* Evaluates the natural logarithm of \\(1+x\\).
*
* ## Method
*
* 1.  Argument Reduction: find \\(k\\) and \\(f\\) such that
*
*     ```tex
*     1+x = 2^k (1+f)
*     ```
*
*     where
*
*     ```tex
*     \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
*     ```
*
*     <!-- <note> -->
*
*     If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
*
*     ```tex
*     u = \operatorname{round}(1+x)
*     ```
*
*     and
*
*     ```tex
*     c = (1+x) - u
*     ```
*
*     then
*
*     ```tex
*     \ln (1+x) - \ln u \approx \frac{c}{u}
*     ```
*
*     We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
*
*     <!-- </note> -->
*
* 2.  Approximation of \\(\operatorname{log1p}(f)\\). Let
*
*     ```tex
*     s = \frac{f}{2+f}
*     ```
*
*     based on
*
*     ```tex
*     \begin{align*}
*     \ln 1+f &= \ln (1+s) - \ln (1-s) \\
*             &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
*             &= 2s + sR \\
*     \end{align*}
*     ```
*
*     We use a special Reme algorithm on \\(\[0,0.1716\]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
*
*     ```tex
*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
*     ```
*
*     and
*
*     ```tex
*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
*
*     <!-- </note> -->
*
*     Note that
*
*     ```tex
*     \begin{align*}
*     2s &= f - sf \\
*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
*     \end{align*}
*     ```
*
*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
*
*     ```tex
*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
*     ```
*
* 3.  Finally,
*
*     ```tex
*     \begin{align*}
*     \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
*     &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
*     \end{align*}
*     ```
*
*     Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
*
*     ```tex
*     \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
*     ```
*
*     where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
*
*
* ## Special Cases
*
* -   \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
* -   \\(\operatorname{log1p}(+\infty) = +\infty\\)
* -   \\(\operatorname{log1p}(-1) = -\infty\\) with signal
* -   \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
*
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
*
* -   Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
*
*     ```javascript
*     var u = 1.0 + x;
*     if ( u === 1.0 ) {
*         return x;
*     } else {
*         return ln(u) * (x/(u-1.0));
*     }
*     ```
*
*     See HP-15C Advanced Functions Handbook, p.193.
*
*
* @param {number} x - input value
* @returns {number} the natural logarithm of `1+x`
*
* @example
* var v = log1p( 4.0 );
* // returns ~1.609
*
* @example
* var v = log1p( -1.0 );
* // returns -Infinity
*
* @example
* var v = log1p( 0.0 );
* // returns 0.0
*
* @example
* var v = log1p( -0.0 );
* // returns -0.0
*
* @example
* var v = log1p( -2.0 );
* // returns NaN
*
* @example
* var v = log1p( NaN );
* // returns NaN
*/
function log1p( x ) {
	var hfsq;
	var hu;
	var y;
	var f;
	var c;
	var s;
	var z;
	var R;
	var u;
	var k;

	if ( x < -1.0 || _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( x === _$FLOAT64_PINF_85 ) {
		return x;
	}
	if ( x === 0.0 ) {
		return x; // handle +-0 (IEEE 754-2008 spec)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		y = -x;
	} else {
		y = x;
	}
	// Argument reduction...
	k = 1;

	// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...
	if ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422
		if ( y < SMALL ) { // if |x| < 2**-29
			if ( y < TINY ) { // if |x| < 2**-54
				return x;
			}
			// Use a simple two-term Taylor series...
			return x - ( x*x*0.5 );
		}
		// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...
		if ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929
			// -0.2929 < x < 0.41422
			k = 0;
			f = x; // exact
			hu = 1;
		}
	}
	// Address case where `f` cannot be represented exactly...
	if ( k !== 0 ) {
		if ( y < TWO53 ) {
			u = 1.0 + x;
			hu = _$getHighWord_762( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - _$FLOAT64_EXPONENT_BIAS_58;

			// Correction term...
			if ( k > 0 ) { // positive unbiased exponent
				c = 1.0 - (u-x);
			} else { // nonpositive unbiased exponent
				c = x - (u-1.0);
			}
			c /= u;
		} else {
			u = x;
			hu = _$getHighWord_762( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - _$FLOAT64_EXPONENT_BIAS_58;

			// Correction term is zero:
			c = 0;
		}
		// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:
		hu &= 0x000fffff; // max value => 1048575

		// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110
		if ( hu < 434334 ) {
			// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000
			u = _$setHighWord_771( u, hu|0x3ff00000 );
		} else {
			k += 1;

			// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000
			u = _$setHighWord_771( u, hu|0x3fe00000 );

			// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576
			hu = (1048576-hu)>>2;
		}
		f = u - 1.0;
	}
	// Approximation of log1p(f)...
	hfsq = 0.5 * f * f;
	if ( hu === 0 ) { // if |f| < 2**-20
		if ( f === 0.0 ) {
			c += k * LN2_LO;
			return ( k * LN2_HI ) + c;
		}
		R = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division
		return ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;

	R = z * _$evalpoly_560( z );

	if ( k === 0 ) {
		return f - ( hfsq - ( s*(hfsq+R) ) );
	}
	return ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );
}


// EXPORTS //

var _$log1p_559 = log1p;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of \\(1+x\\).
*
* @module @stdlib/math/base/special/log1p
*
* @example
* var log1p = require( '@stdlib/math/base/special/log1p' );
*
* var v = log1p( 4.0 );
* // returns ~1.609
*
* v = log1p( -1.0 );
* // returns -Infinity
*
* v = log1p( 0.0 );
* // returns 0.0
*
* v = log1p( -0.0 );
* // returns -0.0
*
* v = log1p( -2.0 );
* // returns NaN
*
* v = log1p( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$log1p_559 = require( './log1p.js' ); */;


// EXPORTS //

var _$log1p_558 = _$log1p_559;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of `2`.
*
* @module @stdlib/constants/math/float64-ln-two
* @type {number}
*
* @example
* var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
* // returns 0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `2`.
*
* ```tex
* \ln 2
* ```
*
* @constant
* @type {number}
* @default 0.6931471805599453
*/
var LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len


// EXPORTS //

var _$LN2_67 = LN2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_547( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_547 = __evalpoly_547;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_548( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_548 = __evalpoly_548;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_547 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_548 = require( './polyval_q.js' ); */;


// VARIABLES //

var __LN2_HI_546 = 6.93147180369123816490e-01; // 3FE62E42 FEE00000
var __LN2_LO_546 = 1.90821492927058770002e-10; // 3DEA39EF 35793C76
var TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000
var ONE_THIRD = 0.33333333333333333;

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns -Infinity
*
* @example
* var v = ln( Infinity );
* // returns Infinity
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/
function ln( x ) {
	var hfsq;
	var hx;
	var t2;
	var t1;
	var k;
	var R;
	var f;
	var i;
	var j;
	var s;
	var w;
	var z;

	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( _$isnan_103( x ) || x < 0.0 ) {
		return NaN;
	}
	hx = _$getHighWord_762( x );
	k = 0|0; // asm type annotation
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: 0 < x < 2**-1022
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up `x`:
		x *= TWO54;
		hx = _$getHighWord_762( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( ( hx>>20 ) - _$FLOAT64_EXPONENT_BIAS_58 )|0; // asm type annotation
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = _$setHighWord_771( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += ( i>>20 )|0; // asm type annotation
	f = x - 1.0;
	if ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			if ( k === 0 ) {
				return 0.0;
			}
			return (k * __LN2_HI_546) + (k * __LN2_LO_546);
		}
		R = f * f * ( 0.5 - (ONE_THIRD*f) );
		if ( k === 0 ) {
			return f - R;
		}
		return (k * __LN2_HI_546) - ( (R-(k*__LN2_LO_546)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * _$evalpoly_547( w );
	t2 = z * _$evalpoly_548( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		if ( k === 0 ) {
			return f - ( hfsq - (s * (hfsq+R)) );
		}
		return (k * __LN2_HI_546) - ( hfsq - ((s*(hfsq+R))+(k*__LN2_LO_546)) - f );
	}
	if ( k === 0 ) {
		return f - (s*(f-R));
	}
	return (k * __LN2_HI_546) - ( ( (s*(f-R)) - (k*__LN2_LO_546) ) - f );
}


// EXPORTS //

var _$ln_546 = ln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns -Infinity
*
* v = ln( Infinity );
* // returns Infinity
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$ln_546 = require( './ln.js' ); */;


// EXPORTS //

var _$ln_545 = _$ln_546;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_acosh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

var HUGE = 1 << 28; // 2**28


// MAIN //

/**
* Computes the hyperbolic arccosine of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{acosh}(x) = \log \left[ x + \sqrt{ x^2 - 1 } \right]
* ```
*
* we have
*
* ```tex
* \operatorname{acosh}(x) = \begin{cases}
* \log(x) + \tfrac{\ln}{2} & \text{ if x is large } \\
* \log \left( 2x-\tfrac{1}{\sqrt{x^2-1}+x} \right) & \text{ if } x > 2 \\
* \operatorname{log1p}\left( x - 1 + \sqrt{ 2 \cdot (x-1) + (x-1)^2 } \right) & \text{ otherwise }
* \end{cases}
* ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{acosh}(x) &= \mathrm{NaN}\ \text{ if } x < 1 \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arccosine (in radians)
*
* @example
* var v = acosh( 1.0 );
* // returns 0.0
*
* @example
* var v = acosh( 2.0 );
* // returns ~1.317
*
* @example
* var v = acosh( NaN );
* // returns NaN
*/
function acosh( x ) {
	var t;
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x < 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x >= HUGE ) {
		return _$ln_545( x ) + _$LN2_67;
	}
	if ( x > 2.0 ) {
		return _$ln_545( (2.0*x) - ( 1.0 / ( x + _$sqrt_703( (x*x) - 1.0 ) ) ) );
	}
	// Case: 2 >= x > 1
	t = x - 1.0;
	return _$log1p_558( t + _$sqrt_703( (2.0*t) + (t*t) ) );
}


// EXPORTS //

var _$acosh_123 = acosh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arccosine of a number.
*
* @module @stdlib/math/base/special/acosh
*
* @example
* var acosh = require( '@stdlib/math/base/special/acosh' );
*
* var v = acosh( 1.0 );
* // returns 0.0
*
* v = acosh( 2.0 );
* // returns ~1.317
*
* v = acosh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acosh_123 = require( './acosh.js' ); */;


// EXPORTS //

var _$acosh_124 = _$acosh_123;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_atanh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// VARIABLES //

var NEAR_ZERO = 1.0 / (1 << 28); // 2**-28


// MAIN //

/**
* Computes the hyperbolic arctangent of a number.
*
* ## Method
*
* 1.  Reduce \\( x \\) to positive by \\( \operatorname{atanh}(-x) = -\operatorname{atanh}(x) \\)
*
* 2.  For \\( x \ge 0.5 \\), we calculate
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \log\left( 1 + \tfrac{2x}{1-x} \right) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2 \tfrac{x}{1-x} \right)
*     ```
*
*     For \\( x < 0.5 \\), we have
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2x + \tfrac{2x^2}{1-x} \right)
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atanh}(\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atanh}(1.0) &= \infty \\
* \operatorname{atanh}(-1.0) &= -\infty \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arctangent (in radians)
*
* @example
* var v = atanh( 0.0 );
* // returns 0.0
*
* @example
* var v = atanh( 0.9 );
* // returns ~1.472
*
* @example
* var v = atanh( 1.0 );
* // returns Infinity
*
* @example
* var v = atanh( -1.0 );
* // returns -Infinity
*
* @example
* var v = atanh( NaN );
* // returns NaN
*/
function atanh( x ) {
	var sgn;
	var t;
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Case: |x| < 2**-28
	if ( x < NEAR_ZERO ) {
		return ( sgn ) ? -x : x;
	}
	if ( x < 0.5 ) {
		t = x + x;
		t = 0.5 * _$log1p_558( t + ( t*x/(1-x) ) );
	} else {
		t = 0.5 * _$log1p_558( (x+x) / (1-x) );
	}
	return ( sgn ) ? -t : t;
}


// EXPORTS //

var _$atanh_147 = atanh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arctangent of a number.
*
* @module @stdlib/math/base/special/atanh
*
* @example
* var atanh = require( '@stdlib/math/base/special/atanh' );
*
* var v = atanh( 0.0 );
* // returns 0.0
*
* v = atanh( 0.9 );
* // returns ~1.472
*
* v = atanh( 1.0 );
* // returns Infinity
*
* v = atanh( -1.0 );
* // returns -Infinity
*
* v = atanh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$atanh_147 = require( './atanh.js' ); */;


// EXPORTS //

var _$atanh_148 = _$atanh_147;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$atanh_148 = require( '@stdlib/math/base/special/atanh' ); */;


// MAIN //

/**
* Computes the inverse hyperbolic cotangent of a number.
*
* @param {number} x - input value
* @returns {number} inverse hyperbolic cotangent (in radians)
*
* @example
* var v = acoth( 2.0 );
* // returns ~0.5493
*
* @example
* var v = acoth( 0.0 );
* // returns NaN
*
* @example
* var v = acoth( 0.5 );
* // returns NaN
*
* @example
* var v = acoth( 1.0 );
* // returns Infinity
*
* @example
* var v = acoth( NaN );
* // returns NaN
*/
function acoth( x ) {
	return _$atanh_148( 1.0/x );
}


// EXPORTS //

var _$acoth_126 = acoth;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arccosine of a number.
*
* @module @stdlib/math/base/special/acoth
*
* @example
* var acoth = require( '@stdlib/math/base/special/acoth' );
*
* var v = acoth( 2.0 );
* // returns ~0.5493
*
* v = acoth( 0.0 );
* // returns NaN
*
* v = acoth( 0.5 );
* // returns NaN
*
* v = acoth( 1.0 );
* // returns Infinity
*
* v = acoth( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acoth_126 = require( './main.js' ); */;


// EXPORTS //

var _$acoth_125 = _$acoth_126;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$asin_136 = require( '@stdlib/math/base/special/asin' ); */;


// MAIN //

/**
* Computes the inverse coversed cosine.
*
* @param {number} x - input value
* @returns {number} inverse coversed cosine
*
* @example
* var v = acovercos( 0.0 );
* // returns ~1.5708
*
* @example
* var v = acovercos( -3.141592653589793/2.0 );
* // returns ~-0.6075
*
* @example
* var v = acovercos( -3.141592653589793/6.0 );
* // returns ~0.4966
*
* @example
* var v = acovercos( NaN );
* // returns NaN
*/
function acovercos( x ) {
	return _$asin_136( 1.0 + x );
}


// EXPORTS //

var _$acovercos_127 = acovercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse coversed cosine.
*
* @module @stdlib/math/base/special/acovercos
*
* @example
* var acovercos = require( '@stdlib/math/base/special/acovercos' );
*
* var v = acovercos( 0.0 );
* // returns ~1.5708
*
* v = acovercos( -3.141592653589793/2.0 );
* // returns ~-0.6075
*
* v = acovercos( -3.141592653589793/6.0 );
* // returns ~0.4966
*
* v = acovercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acovercos_127 = require( './acovercos.js' ); */;


// EXPORTS //

var _$acovercos_128 = _$acovercos_127;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$asin_136 = require( '@stdlib/math/base/special/asin' ); */;


// MAIN //

/**
* Computes the inverse coversed sine.
*
* @param {number} x - input value
* @returns {number} inverse coversed sine
*
* @example
* var v = acoversin( 0.0 );
* // returns ~1.5708
*
* @example
* var v = acoversin( 3.141592653589793/2.0 );
* // returns ~-0.6075
*
* @example
* var v = acoversin( 3.141592653589793/6.0 );
* // returns ~0.4966
*
* @example
* var v = acoversin( NaN );
* // returns NaN
*/
function acoversin( x ) {
	return _$asin_136( 1.0 - x );
}


// EXPORTS //

var _$acoversin_129 = acoversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse coversed sine.
*
* @module @stdlib/math/base/special/acoversin
*
* @example
* var acoversin = require( '@stdlib/math/base/special/acoversin' );
*
* var v = acoversin( 0.0 );
* // returns ~1.5708
*
* v = acoversin( 3.141592653589793/2.0 );
* // returns ~-0.6075
*
* v = acoversin( 3.141592653589793/6.0 );
* // returns ~0.4966
*
* v = acoversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acoversin_129 = require( './acoversin.js' ); */;


// EXPORTS //

var _$acoversin_130 = _$acoversin_129;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$acos_122 = require( '@stdlib/math/base/special/acos' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Computes the inverse half-value versed cosine.
*
* @param {number} x - input value
* @returns {number} inverse half-value versed cosine
*
* @example
* var v = ahavercos( 0.0 );
* // returns ~3.1416
*
* @example
* var v = ahavercos( 1.0 );
* // returns 0.0
*
* @example
* var v = ahavercos( 0.5 );
* // returns ~1.5708
*
* @example
* var v = ahavercos( NaN );
* // returns NaN
*/
function ahavercos( x ) {
	return 2.0 * _$acos_122( _$sqrt_703( x ) );
}


// EXPORTS //

var _$ahavercos_131 = ahavercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse half-value versed cosine.
*
* @module @stdlib/math/base/special/ahavercos
*
* @example
* var ahavercos = require( '@stdlib/math/base/special/ahavercos' );
*
* var v = ahavercos( 0.0 );
* // returns ~3.1416
*
* v = ahavercos( 1.0 );
* // returns 0.0
*
* v = ahavercos( 0.5 );
* // returns ~1.5707
*
* v = ahavercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ahavercos_131 = require( './ahavercos.js' ); */;


// EXPORTS //

var _$ahavercos_132 = _$ahavercos_131;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$asin_136 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Computes the inverse half-value versed sine.
*
* @param {number} x - input value
* @returns {number} inverse half-value versed sine
*
* @example
* var v = ahaversin( 0.0 );
* // returns 0.0
*
* @example
* var v = ahaversin( 1.0 );
* // returns ~3.1416
*
* @example
* var v = ahaversin( 0.5 );
* // returns ~1.5708
*
* @example
* var v = ahaversin( NaN );
* // returns NaN
*/
function ahaversin( x ) {
	return 2.0 * _$asin_136( _$sqrt_703( x ) );
}


// EXPORTS //

var _$ahaversin_133 = ahaversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse half-value versed sine.
*
* @module @stdlib/math/base/special/ahaversin
*
* @example
* var ahaversin = require( '@stdlib/math/base/special/ahaversin' );
*
* var v = ahaversin( 0.0 );
* // returns 0.0
*
* v = ahaversin( 1.0 );
* // returns ~3.1416
*
* v = ahaversin( 0.5 );
* // returns ~1.5708
*
* v = ahaversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ahaversin_133 = require( './ahaversin.js' ); */;


// EXPORTS //

var _$ahaversin_134 = _$ahaversin_133;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === _$FLOAT64_PINF_85 || x === _$FLOAT64_NINF_81);
}


// EXPORTS //

var _$isInfinite_100 = isInfinite;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isInfinite_100 = require( './is_infinite.js' ); */;


// EXPORTS //

var _$isInfinite_99 = _$isInfinite_100;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_asinh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

var __NEAR_ZERO_139 = 1.0 / (1 << 28); // 2**-28
var __HUGE_139 = 1 << 28; // 2**28


// MAIN //

/**
* Computes the hyperbolic arcsine of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{asinh}(x) = \operatorname{sgn}(x) \cdot \log \left( |x| + \sqrt{x^2 + 1} \right)
* ```
*
* we have
*
* ```tex
* \operatorname{asinh}(x) = \begin{cases}
* x  & \text{ if }  1+x^2 =1, \\
* \operatorname{sgn}(x) \cdot \left( \log(x) + \tfrac{\ln}{2} \right) & \text{ if large } |x| \\
* \operatorname{sgn}(x) \cdot \log\left( 2 |x| + 1 / ( |x|+ \sqrt{x^2+1} ) \right) & \text{ if } |x| > 2 \\
* \operatorname{sgn}(x) \cdot \operatorname{log1p}\left( |x| + \tfrac{x^2}{1 + \sqrt{1+x^2}} \right) & \text{otherwise}
* \end{cases}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arcsine (in radians)
*
* @example
* var v = asinh( 0.0 );
* // returns 0.0
*
* @example
* var v = asinh( 2.0 );
* // returns ~1.444
*
* @example
* var v = asinh( -2.0 );
* // returns ~-1.444
*
* @example
* var v = asinh( NaN );
* // returns NaN
*/
function asinh( x ) {
	var sgn;
	var xx;
	var t;
	if ( _$isnan_103( x ) || _$isInfinite_99( x ) ) {
		return x;
	}
	if ( x < 0.0 ) {
		x = -x;
		sgn = true;
	}
	// Case: |x| < 2**-28
	if ( x < __NEAR_ZERO_139 ) {
		t = x;
	}
	// Case: |x| > 2**28
	else if ( x > __HUGE_139 ) {
		t = _$ln_545( x ) + _$LN2_67;
	}
	// Case: 2**28 > |x| > 2.0
	else if ( x > 2.0 ) {
		t = _$ln_545( (2.0*x) + ( 1.0 / (_$sqrt_703( (x*x) + 1.0 ) + x) ) );
	}
	// Case: 2.0 > |x| > 2**-28
	else {
		xx = x * x;
		t = _$log1p_558( x + ( xx/(1.0 + _$sqrt_703(1.0 + xx)) ) );
	}
	return ( sgn ) ? -t : t;
}


// EXPORTS //

var _$asinh_139 = asinh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic arcsine of a number.
*
* @module @stdlib/math/base/special/asinh
*
* @example
* var asinh = require( '@stdlib/math/base/special/asinh' );
*
* var v = asinh( 0.0 );
* // returns 0.0
*
* v = asinh( 2.0 );
* // returns ~1.444
*
* v = asinh( -2.0 );
* // returns ~-1.444
*
* v = asinh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$asinh_139 = require( './asinh.js' ); */;


// EXPORTS //

var _$asinh_140 = _$asinh_139;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
* // returns 1.5707963267948966
*/


// MAIN //

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var HALF_PI = 1.5707963267948966;


// EXPORTS //

var _$HALF_PI_62 = HALF_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_143( x ) {
	if ( x === 0.0 ) {
		return -64.85021904942025;
	}
	return -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_143 = __evalpoly_143;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_144( x ) {
	if ( x === 0.0 ) {
		return 194.5506571482614;
	}
	return 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_144 = __evalpoly_144;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$FOURTH_PI_59 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_143 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_144 = require( './polyval_q.js' ); */;


// VARIABLES //

var __MOREBITS_141 = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.
var T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )


// MAIN //

/**
* Computes the arctangent of a number.
*
* ## Method
*
* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form
*
*     ```tex
*     x + x^3 \frac{P(x)}{Q(x)}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain  | # trials | peak    | rms     |
*     |:-----------|:--------|:---------|:--------|:--------|
*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |
*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |
*
* @param {number} x - input value
* @returns {number} arctangent (in radians)
*
* @example
* var v = atan( 0.0 );
* // returns ~0.0
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( -PI/4.0 );
* // returns ~-0.666
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( PI/4.0 );
* // returns ~0.666
*
* @example
* var v = atan( NaN );
* // returns NaN
*/
function atan( x ) {
	var flg;
	var sgn;
	var y;
	var z;
	if ( _$isnan_103( x ) || x === 0.0 ) {
		return x;
	}
	if ( x === _$FLOAT64_PINF_85 ) {
		return _$HALF_PI_62;
	}
	if ( x === _$FLOAT64_NINF_81 ) {
		return -_$HALF_PI_62;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Range reduction:
	flg = 0;
	if ( x > T3P8 ) {
		y = _$HALF_PI_62;
		flg = 1;
		x = -( 1.0/x );
	}
	else if ( x <= 0.66 ) {
		y = 0.0;
	}
	else {
		y = _$FOURTH_PI_59;
		flg = 2;
		x = (x-1.0) / (x+1.0);
	}
	z = x * x;
	z = z*_$evalpoly_143( z ) / _$evalpoly_144( z );
	z = ( x*z ) + x;
	if ( flg === 2 ) {
		z += 0.5 * __MOREBITS_141;
	}
	else if ( flg === 1 ) {
		z += __MOREBITS_141;
	}
	y += z;
	return ( sgn ) ? -y : y;
}


// EXPORTS //

var _$atan_141 = atan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arctangent of a number.
*
* @module @stdlib/math/base/special/atan
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var atan = require( '@stdlib/math/base/special/atan' );
*
* var v = atan( 0.0 );
* // returns ~0.0
*
* v = atan( -PI/4.0 );
* // returns ~-1.0
*
* v = atan( PI/4.0 );
* // returns ~1.0
*
* v = atan( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$atan_141 = require( './atan.js' ); */;


// EXPORTS //

var _$atan_142 = _$atan_141;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_43 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var indices;
var __HIGH_759;
var LOW;

if ( _$IS_LITTLE_ENDIAN_43 === true ) {
	__HIGH_759 = 1; // second index
	LOW = 0; // first index
} else {
	__HIGH_759 = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': __HIGH_759,
	'LOW': LOW
};


// EXPORTS //

var _$indices_759 = indices;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_43 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __indices_779;
var __HIGH_779;
var __LOW_779;

if ( _$IS_LITTLE_ENDIAN_43 === true ) {
	__HIGH_779 = 1; // second index
	__LOW_779 = 0; // first index
} else {
	__HIGH_779 = 0; // first index
	__LOW_779 = 1; // second index
}
__indices_779 = {
	'HIGH': __HIGH_779,
	'LOW': __LOW_779
};


// EXPORTS //

var _$indices_779 = __indices_779;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$indices_779 = require( './indices.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_781 = new _$ctor_2( 1 );
var __UINT32_VIEW_781 = new _$ctor_7( __FLOAT64_VIEW_781.buffer );

var __HIGH_781 = _$indices_779.HIGH;
var __LOW_781 = _$indices_779.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	__FLOAT64_VIEW_781[ 0 ] = x;
	out[ 0 ] = __UINT32_VIEW_781[ __HIGH_781 ];
	out[ 1 ] = __UINT32_VIEW_781[ __LOW_781 ];
	return out;
}


// EXPORTS //

var _$toWords_781 = toWords;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_781 = require( './to_words.js' ); */;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function __toWords_780( out, x ) {
	if ( arguments.length === 1 ) {
		return _$toWords_781( [ 0, 0 ], out );
	}
	return _$toWords_781( out, x );
}


// EXPORTS //

var _$toWords_780 = __toWords_780;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

/* removed: var _$toWords_780 = require( './main.js' ); */;


// EXPORTS //

var _$toWords_778 = _$toWords_780;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$indices_759 = require( './indices.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_760 = new _$ctor_2( 1 );
var __UINT32_VIEW_760 = new _$ctor_7( __FLOAT64_VIEW_760.buffer );

var __HIGH_760 = _$indices_759.HIGH;
var __LOW_760 = _$indices_759.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	__UINT32_VIEW_760[ __HIGH_760 ] = high;
	__UINT32_VIEW_760[ __LOW_760 ] = low;
	return __FLOAT64_VIEW_760[ 0 ];
}


// EXPORTS //

var _$fromWords_760 = fromWords;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$fromWords_760 = require( './main.js' ); */;


// EXPORTS //

var _$fromWords_758 = _$fromWords_760;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	_$toWords_778( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = _$getHighWord_762( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return _$fromWords_758( hx, WORDS[ 1 ] );
}


// EXPORTS //

var _$copysign_223 = copysign;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$copysign_223 = require( './copysign.js' ); */;


// EXPORTS //

var _$copysign_224 = _$copysign_223;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// MAIN //

/**
* Returns a boolean indicating if the sign bit is on (true) or off (false).
*
* @param {number} x - input value
* @returns {boolean} boolean indicating if sign bit is on or off
*
* @example
* var bool = signbit( 4.0 );
* // returns false
*
* @example
* var bool = signbit( -9.14e-307 );
* // returns true
*
* @example
* var bool = signbit( 0.0 );
* // returns false
*
* @example
* var bool = signbit( -0.0 );
* // returns true
*/
function signbit( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:
	var high = _$getHighWord_762( x );

	// Shift off all bits which are not the sign bit and check if the sign bit is on:
	return ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary
}


// EXPORTS //

var _$signbit_777 = signbit;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if the sign bit is on (true) or off (false).
*
* @module @stdlib/number/float64/base/signbit
*
* @example
* var signbit = require( '@stdlib/number/float64/base/signbit' );
*
* var bool = signbit( 4.0 );
* // returns false
*
* bool = signbit( -9.14e-307 );
* // returns true
*
* bool = signbit( 0.0 );
* // returns false
*
* bool = signbit( -0.0 );
* // returns true
*/

// MODULES //

/* removed: var _$signbit_777 = require( './main.js' ); */;


// EXPORTS //

var _$signbit_776 = _$signbit_777;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* // returns 3.141592653589793
*/


// MAIN //

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


// EXPORTS //

var _$PI_84 = PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (c) 2009 The Go Authors. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*
*    * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
*    * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$copysign_224 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$signbit_776 = require( '@stdlib/number/float64/base/signbit' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan_142 = require( '@stdlib/math/base/special/atan' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the arctangent of a quotient of two numbers.
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atan2}(y,\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atan2}(\mathrm{NaN},x) &= \mathrm{NaN}\\
* \operatorname{atan2}( +0,x \ge 0 ) &= +0 \\
* \operatorname{atan2}( -0, x \ge 0 ) &= -0 \\
* \operatorname{atan2}( +0,x \le -0 ) &= +\Pi \\
* \operatorname{atan2}( -0, x \le -0 ) &= -\Pi \\
* \operatorname{atan2}(+\infty, +\infty) &= +\tfrac{\Pi}{4} \\
* \operatorname{atan2}(-\infty, +\infty) &= -\tfrac{\Pi}{4} \\
* \operatorname{atan2}(+\infty, -\infty) &= +\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(-\infty, -\infty) &= -\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(y, +\infty) &= 0.0 \\
* \operatorname{atan2}(y>0, -\infty) &= +\Pi \\
* \operatorname{atan2}(y<0, -\infty) &= -\Pi \\
* \operatorname{atan2}(+\infty, x ) &= +\tfrac{\Pi}{2} \\
* \operatorname{atan2}(-\infty, x ) &= -\tfrac{\Pi}{2} \\
* \end{align*}
* ```
*
* @param {number} y - numerator
* @param {number} x - denominator
* @returns {number} arctangent of `y/x` (in radians)
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* @example
* var v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* @example
* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* @example
* var v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* @example
* var v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* @example
* var v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var v = atan2( 3.0, NaN );
* // returns NaN
*
* @example
* var v = atan2( NaN, 2.0 );
* // returns NaN
*/
function atan2( y, x ) {
	var q;
	if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) ) {
		if ( x === _$FLOAT64_PINF_85 ) {
			if ( _$isInfinite_99( y ) ) {
				return _$copysign_224( _$PI_84 / 4.0, y );
			}
			return _$copysign_224( 0.0, y );
		}
		// Case: x is -Infinity
		if ( _$isInfinite_99( y ) ) {
			return _$copysign_224( 3.0*_$PI_84/4.0, y );
		}
		return _$copysign_224( _$PI_84, y );
	}
	if ( _$isInfinite_99( y ) ) {
		return _$copysign_224( _$PI_84 / 2.0, y );
	}
	if ( y === 0.0 ) {
		if ( x >= 0.0 && !_$signbit_776( x ) ) {
			return _$copysign_224( 0.0, y );
		}
		return _$copysign_224( _$PI_84, y );
	}
	if ( x === 0.0 ) {
		return _$copysign_224( _$PI_84 / 2.0, y );
	}
	q = _$atan_142( y / x );
	if ( x < 0.0 ) {
		if ( q <= 0.0 ) {
			return q + _$PI_84;
		}
		return q - _$PI_84;
	}
	return q;
}


// EXPORTS //

var _$atan2_145 = atan2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the arctangent of the quotient of two numbers.
*
* @module @stdlib/math/base/special/atan2
*
* @example
* var atan2 = require( '@stdlib/math/base/special/atan2' );
*
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* v = atan2( 3.0, NaN );
* // returns NaN
*
* v = atan2( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$atan2_145 = require( './atan2.js' ); */;


// EXPORTS //

var _$atan2_146 = _$atan2_145;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$acos_122 = require( '@stdlib/math/base/special/acos' ); */;


// MAIN //

/**
* Computes the inverse versed cosine.
*
* @param {number} x - input value
* @returns {number} inverse versed cosine
*
* @example
* var v = avercos( 0.0 );
* // returns 0.0
*
* @example
* var v = avercos( -3.141592653589793/2.0 );
* // returns ~2.1783
*
* @example
* var v = avercos( -3.141592653589793/6.0 );
* // returns ~1.0742
*
* @example
* var v = avercos( NaN );
* // returns NaN
*/
function avercos( x ) {
	return _$acos_122( 1.0 + x );
}


// EXPORTS //

var _$avercos_149 = avercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse versed cosine.
*
* @module @stdlib/math/base/special/avercos
*
* @example
* var avercos = require( '@stdlib/math/base/special/avercos' );
*
* var v = avercos( 0.0 );
* // returns 0.0
*
* v = avercos( -3.141592653589793/2.0 );
* // returns ~2.1783
*
* v = avercos( -3.141592653589793/6.0 );
* // returns ~1.0742
*
* v = avercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$avercos_149 = require( './avercos.js' ); */;


// EXPORTS //

var _$avercos_150 = _$avercos_149;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$acos_122 = require( '@stdlib/math/base/special/acos' ); */;


// MAIN //

/**
* Computes the inverse versed sine.
*
* @param {number} x - input value
* @returns {number} inverse versed sine
*
* @example
* var v = aversin( 0.0 );
* // returns 0.0
*
* @example
* var v = aversin( 3.141592653589793/2.0 );
* // returns ~2.1783
*
* @example
* var v = aversin( 3.141592653589793/6.0 );
* // returns ~1.0742
*
* @example
* var v = aversin( NaN );
* // returns NaN
*/
function aversin( x ) {
	return _$acos_122( 1.0 - x );
}


// EXPORTS //

var _$aversin_151 = aversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse versed sine.
*
* @module @stdlib/math/base/special/aversin
*
* @example
* var aversin = require( '@stdlib/math/base/special/aversin' );
*
* var v = aversin( 0.0 );
* // returns 0.0
*
* v = aversin( 3.141592653589793/2.0 );
* // returns ~2.1783
*
* v = aversin( 3.141592653589793/6.0 );
* // returns ~1.0742
*
* v = aversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$aversin_151 = require( './aversin.js' ); */;


// EXPORTS //

var _$aversin_152 = _$aversin_151;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$floor_345 = floor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$floor_345 = require( './floor.js' ); */;


// EXPORTS //

var _$floor_346 = _$floor_345;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a nonnegative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -10.0 );
* // returns false
*/
function isNonNegativeInteger( x ) {
	return (_$floor_346(x) === x && x >= 0);
}


// EXPORTS //

var _$isNonNegativeInteger_110 = isNonNegativeInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a nonnegative integer.
*
* @module @stdlib/math/base/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNonNegativeInteger_110 = require( './is_nonnegative_integer.js' ); */;


// EXPORTS //

var _$isNonNegativeInteger_109 = _$isNonNegativeInteger_110;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (_$floor_346(x) === x);
}


// EXPORTS //

var _$isInteger_102 = isInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

/* removed: var _$isInteger_102 = require( './is_integer.js' ); */;


// EXPORTS //

var _$isInteger_101 = _$isInteger_102;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Tests if a finite numeric value is an even number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an even number
*
* @example
* var bool = isEven( 5.0 );
* // returns false
*
* @example
* var bool = isEven( -2.0 );
* // returns true
*
* @example
* var bool = isEven( 0.0 );
* // returns true
*
* @example
* var bool = isEven( NaN );
* // returns false
*/
function isEven( x ) {
	return _$isInteger_101( x/2.0 );
}


// EXPORTS //

var _$isEven_98 = isEven;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite numeric value is an even number.
*
* @module @stdlib/math/base/assert/is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/is-even' );
*
* var bool = isEven( 5.0 );
* // returns false
*
* bool = isEven( -2.0 );
* // returns true
*
* bool = isEven( 0.0 );
* // returns true
*
* bool = isEven( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isEven_98 = require( './is_even.js' ); */;


// EXPORTS //

var _$isEven_97 = _$isEven_98;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isEven_97 = require( '@stdlib/math/base/assert/is-even' ); */;


// MAIN //

/**
* Tests if a finite numeric value is an odd number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an odd number
*
* @example
* var bool = isOdd( 5.0 );
* // returns true
*
* @example
* var bool = isOdd( -2.0 );
* // returns false
*
* @example
* var bool = isOdd( 0.0 );
* // returns false
*
* @example
* var bool = isOdd( NaN );
* // returns false
*/
function isOdd( x ) {
	// Check sign to prevent overflow...
	if ( x > 0.0 ) {
		return _$isEven_97( x-1.0 );
	}
	return _$isEven_97( x+1.0 );
}


// EXPORTS //

var _$isOdd_112 = isOdd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite numeric value is an odd number.
*
* @module @stdlib/math/base/assert/is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( -2.0 );
* // returns false
*
* bool = isOdd( 0.0 );
* // returns false
*
* bool = isOdd( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isOdd_112 = require( './is_odd.js' ); */;


// EXPORTS //

var _$isOdd_111 = _$isOdd_112;

var _$bernoulli_153=[
  1.00000000000000000000000000000000000000000,
  0.166666666666666666666666666666666666666667,
  -0.0333333333333333333333333333333333333333333,
  0.0238095238095238095238095238095238095238095,
  -0.0333333333333333333333333333333333333333333,
  0.0757575757575757575757575757575757575757576,
  -0.253113553113553113553113553113553113553114,
  1.16666666666666666666666666666666666666667,
  -7.09215686274509803921568627450980392156863,
  54.9711779448621553884711779448621553884712,
  -529.124242424242424242424242424242424242424,
  6192.12318840579710144927536231884057971014,
  -86580.2531135531135531135531135531135531136,
  1.42551716666666666666666666666666666666667e6,
  -2.72982310678160919540229885057471264367816e7,
  6.01580873900642368384303868174835916771401e8,
  -1.51163157670921568627450980392156862745098e10,
  4.29614643061166666666666666666666666666667e11,
  -1.37116552050883327721590879485616327721591e13,
  4.88332318973593166666666666666666666666667e14,
  -1.92965793419400681486326681448632668144863e16,
  8.41693047573682615000553709856035437430786e17,
  -4.03380718540594554130768115942028985507246e19,
  2.11507486380819916056014539007092198581560e21,
  -1.20866265222965259346027311937082525317819e23,
  7.50086674607696436685572007575757575757576e24,
  -5.03877810148106891413789303052201257861635e26,
  3.65287764848181233351104308429711779448622e28,
  -2.84987693024508822262691464329106781609195e30,
  2.38654274996836276446459819192192149717514e32,
  -2.13999492572253336658107447651910973926742e34,
  2.05009757234780975699217330956723102516667e36,
  -2.09380059113463784090951852900279701847092e38,
  2.27526964884635155596492603527692645814700e40,
  -2.62577102862395760473030497361582020814490e42,
  3.21250821027180325182047923042649852435219e44,
  -4.15982781667947109139170744952623589366896e46,
  5.69206954820352800238834562191210586444805e48,
  -8.21836294197845756922906534686173330145509e50,
  1.25029043271669930167323398297028955241772e53,
  -2.00155832332483702749253291988132987687242e55,
  3.36749829153643742333966769033387530162196e57,
  -5.94709705031354477186604968440515408405791e59,
  1.10119103236279775595641307904376916046305e62,
  -2.13552595452535011886583850190410656789733e64,
  4.33288969866411924196166130593792062184514e66,
  -9.18855282416693282262005552155018971389604e68,
  2.03468967763290744934550279902200200659751e71,
  -4.70038339580357310785752555350060606545967e73,
  1.13180434454842492706751862577339342678904e76,
  -2.83822495706937069592641563364817647382847e78,
  7.40642489796788506297508271409209841768797e80,
  -2.00964548027566044834656196727153631868673e83,
  5.66571700508059414457193460305193569614195e85,
  -1.65845111541362169158237133743199123014950e88,
  5.03688599504923774192894219151801548124424e90,
  -1.58614682376581863693634015729664387827410e93,
  5.17567436175456269840732406825071225612408e95,
  -1.74889218402171173396900258776181591451415e98,
  6.11605199949521852558245252642641677807677e100,
  -2.21227769127078349422883234567129324455732e103,
  8.27227767987709698542210624599845957312047e105,
  -3.19589251114157095835916343691808148735263e108,
  1.27500822233877929823100243029266798669572e111,
  -5.25009230867741338994028246245651754469199e113,
  2.23018178942416252098692981988387281437383e116,
  -9.76845219309552044386335133989802393011669e118,
  4.40983619784529542722726228748131691918758e121,
  -2.05085708864640888397293377275830154864566e124,
  9.82144332797912771075729696020975210414919e126,
  -4.84126007982088805087891967099634127611305e129,
  2.45530888014809826097834674040886903996737e132,
  -1.28069268040847475487825132786017857218118e135,
  6.86761671046685811921018885984644004360924e137,
  -3.78464685819691046949789954163795568144895e140,
  2.14261012506652915508713231351482720966602e143,
  -1.24567271371836950070196429616376072194583e146,
  7.43457875510001525436796683940520613117807e148,
  -4.55357953046417048940633332233212748767721e151,
  2.86121128168588683453638472510172325229190e154,
  -1.84377235520338697276882026536287854875414e157,
  1.21811545362210466995013165065995213558174e160,
  -8.24821871853141215484818457296893447301419e162,
  5.72258779378329433296516498142978615918685e165,
  -4.06685305250591047267679693831158655602196e168,
  2.95960920646420500628752695815851870426379e171,
  -2.20495225651894575090311752273445984836379e174,
  1.68125970728895998058311525151360665754464e177,
  -1.31167362135569576486452806355817153004431e180,
  1.04678940094780380821832853929823089643829e183,
  -8.54328935788337077185982546299082774593270e185,
  7.12878213224865423522884066771438224721245e188,
  -6.08029314555358993000847118686477458461988e191,
  5.29967764248499239300942910043247266228490e194,
  -4.71942591687458626443646229013379911103761e197,
  4.29284137914029810894168296541074669045521e200,
  -3.98767449682322074434477655542938795106651e203,
  3.78197804193588827138944181161393327898220e206,
  -3.66142336836811912436858082151197348755196e209,
  3.61760902723728623488554609298914089477541e212,
  -3.64707726451913543621383088655499449048682e215,
  3.75087554364544090983452410104814189306842e218,
  -3.93458672964390282694891288533713429355657e221,
  4.20882111481900820046571171111494898242731e224,
  -4.59022962206179186559802940573325591059371e227,
  5.10317257726295759279198185106496768539760e230,
  -5.78227623036569554015377271242917142512200e233,
  6.67624821678358810322637794412809363451080e236,
  -7.85353076444504163225916259639312444428230e239,
  9.41068940670587255245443288258762485293948e242,
  -1.14849338734651839938498599206805592548354e246,
  1.42729587428487856771416320087122499897180e249,
  -1.80595595869093090142285728117654560926719e252,
  2.32615353076608052161297985184708876161736e255,
  -3.04957517154995947681942819261542593785327e258,
  4.06858060764339734424012124124937318633684e261,
  -5.52310313219743616252320044093186392324280e264,
  7.62772793964343924869949690204961215533859e267,
  -1.07155711196978863132793524001065396932667e271,
  1.53102008959691884453440916153355334355847e274,
  -2.22448916821798346676602348865048510824835e277,
  3.28626791906901391668189736436895275365183e280,
  -4.93559289559603449020711938191575963496999e283,
  7.53495712008325067212266049779283956727824e286,
  -1.16914851545841777278088924731655041783900e290,
  1.84352614678389394126646201597702232396492e293,
  -2.95368261729680829728014917350525183485207e296,
  4.80793212775015697668878704043264072227967e299,
  -7.95021250458852528538243631671158693036798e302,
  1.33527841873546338750122832017820518292039e306
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_109 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isOdd_111 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$bernoulli_153 = require( './bernoulli.json' ); */;


// VARIABLES //

var MAX_BERNOULLI = 258|0; // asm type annotation


// MAIN //

/**
* Computes the nth Bernoulli number.
*
* @param {NonNegativeInteger} n - the Bernoulli number to compute
* @returns {number} Bernoulli number
*
* @example
* var y = bernoulli( 0 );
* // returns 1.0
*
* @example
* var y = bernoulli( 1 );
* // returns 0.0
*
* @example
* var y = bernoulli( 2 );
* // returns ~0.167
*
* @example
* var y = bernoulli( 3 );
* // returns 0.0
*
* @example
* var y = bernoulli( 4 );
* // returns ~-0.033
*
* @example
* var y = bernoulli( 5 );
* // returns 0.0
*
* @example
* var y = bernoulli( 20 );
* // returns ~-529.124
*
* @example
* var y = bernoulli( 260 );
* // returns -Infinity
*
* @example
* var y = bernoulli( 262 );
* // returns Infinity
*
* @example
* var y = bernoulli( NaN );
* // returns NaN
*/
function bernoulli( n ) {
	if ( _$isnan_103( n ) || !_$isNonNegativeInteger_109( n ) ) {
		return NaN;
	}
	if ( _$isOdd_111( n ) ) {
		return 0.0;
	}
	if ( n > MAX_BERNOULLI ) {
		return ( (n/2)&1 ) ? _$FLOAT64_PINF_85 : _$FLOAT64_NINF_81;
	}
	return _$bernoulli_153[ n/2 ];
}


// EXPORTS //

var _$bernoulli_154 = bernoulli;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth Bernoulli number.
*
* @module @stdlib/math/base/special/bernoulli
*
* @example
* var bernoulli = require( '@stdlib/math/base/special/bernoulli' );
*
* var y = bernoulli( 0 );
* // returns 1.0
*
* y = bernoulli( 1 );
* // returns 0.0
*
* y = bernoulli( 2 );
* // returns ~0.166
*
* y = bernoulli( 3 );
* // returns 0.0
*
* y = bernoulli( 4 );
* // returns ~-0.033
*
* y = bernoulli( 5 );
* // returns 0.0
*
* y = bernoulli( 20 );
* // returns ~-529.124
*/

// MODULES //

/* removed: var _$bernoulli_154 = require( './bernoulli.js' ); */;


// EXPORTS //

var _$bernoulli_155 = _$bernoulli_154;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_43 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __LOW_765;
if ( _$IS_LITTLE_ENDIAN_43 === true ) {
	__LOW_765 = 0; // first index
} else {
	__LOW_765 = 1; // second index
}


// EXPORTS //

var _$LOW_765 = __LOW_765;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$LOW_765 = require( './low.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_766 = new _$ctor_2( 1 );
var __UINT32_VIEW_766 = new _$ctor_7( __FLOAT64_VIEW_766.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	__FLOAT64_VIEW_766[ 0 ] = x;
	return __UINT32_VIEW_766[ _$LOW_765 ];
}


// EXPORTS //

var _$getLowWord_766 = getLowWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

/* removed: var _$getLowWord_766 = require( './main.js' ); */;


// EXPORTS //

var _$getLowWord_764 = _$getLowWord_766;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE2_EXPONENT_70 = FLOAT64_MAX_BASE2_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_69 = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/math/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

var _$FLOAT64_SMALLEST_NORMAL_86 = FLOAT64_SMALLEST_NORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( _$isnan_103( x ) || _$isInfinite_99( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && _$abs_118( x ) < _$FLOAT64_SMALLEST_NORMAL_86 ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

var _$normalize_769 = normalize;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$normalize_769 = require( './normalize.js' ); */;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function __normalize_768( out, x ) {
	if ( arguments.length === 1 ) {
		return _$normalize_769( [ 0.0, 0 ], out );
	}
	return _$normalize_769( out, x );
}


// EXPORTS //

var _$normalize_768 = __normalize_768;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$normalize_768 = require( './main.js' ); */;


// EXPORTS //

var _$normalize_767 = _$normalize_768;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_63 = FLOAT64_HIGH_WORD_EXPONENT_MASK;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_63 = require( '@stdlib/constants/math/float64-high-word-exponent-mask' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = _$getHighWord_762( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & _$FLOAT64_HIGH_WORD_EXPONENT_MASK_63 ) >>> 20;

	// Remove the bias and return:
	return (high - _$FLOAT64_EXPONENT_BIAS_58)|0; // asm type annotation
}


// EXPORTS //

var _$exponent_757 = exponent;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

/* removed: var _$exponent_757 = require( './main.js' ); */;


// EXPORTS //

var _$exponent_756 = _$exponent_757;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_70 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_69 = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$copysign_224 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$normalize_767 = require( '@stdlib/number/float64/base/normalize' ); */;
/* removed: var _$exponent_756 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var __WORDS_544 = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		frac === 0.0 || // handles +-0
		_$isnan_103( frac ) ||
		_$isInfinite_99( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	_$normalize_767( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += _$exponent_756( frac );

	// Check for underflow/overflow...
	if ( exp < _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 ) {
		return _$copysign_224( 0.0, frac );
	}
	if ( exp > _$FLOAT64_MAX_BASE2_EXPONENT_70 ) {
		if ( frac < 0.0 ) {
			return _$FLOAT64_NINF_81;
		}
		return _$FLOAT64_PINF_85;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_69 ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	_$toWords_778( __WORDS_544, frac );
	high = __WORDS_544[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+_$FLOAT64_EXPONENT_BIAS_58) << 20);

	// Create a new floating-point number:
	return m * _$fromWords_758( high, __WORDS_544[ 1 ] );
}


// EXPORTS //

var _$ldexp_544 = ldexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$ldexp_544 = require( './ldexp.js' ); */;


// EXPORTS //

var _$ldexp_543 = _$ldexp_544;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var __PIO2_636 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
}

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = _$ldexp_543( z, q0 );
	z -= 8.0 * _$floor_346( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= _$ldexp_543( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = _$ldexp_543( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = _$ldexp_543( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += __PIO2_636[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

var _$kernelRempio2_636 = kernelRempio2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$round_653 = round;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$round_653 = require( './round.js' ); */;


// EXPORTS //

var _$round_652 = _$round_653;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = _$round_652( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = _$getHighWord_762( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = _$getHighWord_762( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

var _$rempio2Medium_638 = rempio2Medium;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$getLowWord_764 = require( '@stdlib/number/float64/base/get-low-word' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;
/* removed: var _$kernelRempio2_636 = require( './kernel_rempio2.js' ); */;
/* removed: var _$rempio2Medium_638 = require( './rempio2_medium.js' ); */;


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var __TWO24_637 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var __PIO2_1_637 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var __PIO2_1T_637 = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * __PIO2_1T_637;
var THREE_PIO2_1T = 3.0 * __PIO2_1T_637;
var FOUR_PIO2_1T = 4.0 * __PIO2_1T_637;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_637 = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = new Array( 3 ); // WARNING: not thread safe
var TY = new Array( 2 ); // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = _$getHighWord_762( x );
	ix = (hx & ABS_MASK)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return _$rempio2Medium_638( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - __PIO2_1_637;
				y[ 0 ] = z - __PIO2_1T_637;
				y[ 1 ] = (z - y[0]) - __PIO2_1T_637;
				return 1;
			}
			z = x + __PIO2_1_637;
			y[ 0 ] = z + __PIO2_1T_637;
			y[ 1 ] = (z - y[0]) + __PIO2_1T_637;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*__PIO2_1_637 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*__PIO2_1_637 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return _$rempio2Medium_638( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*__PIO2_1_637 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*__PIO2_1_637 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return _$rempio2Medium_638( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*__PIO2_1_637 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*__PIO2_1_637 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return _$rempio2Medium_638( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_637 ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = _$getLowWord_764( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = _$fromWords_758( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * __TWO24_637;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = _$kernelRempio2_636( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

var _$rempio2_637 = rempio2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

/* removed: var _$rempio2_637 = require( './rempio2.js' ); */;


// EXPORTS //

var _$rempio2_635 = _$rempio2_637;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C

var C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C
var C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177
var C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590
var C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD
var C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4
var C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4


// MAIN //

/**
* Computes the sine and cosine on \\( \approx \[-\pi/4, \pi/4\] \\) (except for \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value (in radians, assumed to be bounded by `~π/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {(Array|TypedArray|Object)} sine and cosine
*/
function kernelSincos( out, x, y ) {
	var hz;
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		out[ 0 ] = x + (v * (S1 + (z*r)));
	} else {
		out[ 0 ] = x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
	}
	r = z * (C1 + (z * (C2 + (z*C3))));
	r += w * w * (C4 + (z * (C5 + (z*C6))));
	hz = 0.5 * z;
	w = 1.0 - hz;
	out[ 1 ] = w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );

	return out;
}


// EXPORTS //

var _$kernelSincos_688 = kernelSincos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of FreeBSD [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$rempio2_635 = require( '@stdlib/math/base/special/rempio2' ); */;
/* removed: var _$kernelSincos_688 = require( './kernel_sincos.js' ); */;


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_690 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_690 = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var __PIO4_HIGH_WORD_690 = 0x3fe921fb|0; // asm type annotation

// The smaller of the two cutoffs for the sine and cosine kernels: 2^-27 = 0x3e400000 => 00111110010000000000000000000000
var SMALL_HIGH_WORD = 0x3e400000|0; // asm type annotation

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ];


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\) and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value (in radians)
* @returns {(Array|TypedArray|Object)} sine and cosine
*
* @example
* var v = sincos( [ 0.0, 0.0 ], 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], 3.141592653589793/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], -3.141592653589793/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function sincos( out, x ) {
	var ix;
	var n;

	ix = _$getHighWord_762( x );

	// Case: |x| ~< π/4
	ix &= __ABS_MASK_690;
	if ( ix <= __PIO4_HIGH_WORD_690 ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			if ( (x|0) === 0 ) {
				out[ 0 ] = x;
				out[ 1 ] = 0.0;
			}
		}
		return _$kernelSincos_688( out, x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_690 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	// Argument reduction...
	n = _$rempio2_635( x, Y );

	// Compute the sine and cosine together:
	_$kernelSincos_688( out, Y[ 0 ], Y[ 1 ] );

	switch ( n & 3 ) {
	case 1:
		ix = out[ 1 ];
		out[ 1 ] = -out[ 0 ];
		out[ 0 ] = ix;
		return out;
	case 2:
		out[ 0 ] *= -1;
		out[ 1 ] *= -1;
		return out;
	case 3:
		// Passing
		ix = -out[ 1 ];
		out[ 1 ] = out[ 0 ];
		out[ 0 ] = ix;
		return out;
	default:
		return out;
	}
}


// EXPORTS //

var _$sincos_690 = sincos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sincos_690 = require( './sincos.js' ); */;


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number.
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value (in radians)
* @returns {(Array|TypedArray|Object)} sine and cosine
*
* @example
* var v = sincos( 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* @example
* var v = sincos( 3.141592653589793/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* @example
* var v = sincos( -3.141592653589793/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* @example
* var v = sincos( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var v = sincos( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~1.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function __sincos_689( out, x ) {
	if ( arguments.length === 1 ) {
		return _$sincos_690( [ 0.0, 0.0 ], out );
	}
	return _$sincos_690( out, x );
}


// EXPORTS //

var _$sincos_689 = __sincos_689;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Simultaneously compute the sine and cosine of a number.
*
* @module @stdlib/math/base/special/sincos
*
* @example
* var sincos = require( '@stdlib/math/base/special/sincos' );
*
* var v = sincos( 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* v = sincos( 3.141592653589793/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* v = sincos( -3.141592653589793/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* v = sincos( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var sincos = require( '@stdlib/math/base/special/sincos' );
*
* var out = new Float64Array( 2 );
*
* var v = sincos( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~1.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$sincos_689 = require( './main.js' ); */;


// EXPORTS //

var _$sincos_687 = _$sincos_689;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_158( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.17291506903064494;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -412986685009.9087 + (x * (27282507878.60594 + (x * (-621407004.2354012 + (x * (6630299.79048338 + (x * (-36629.81465510709 + (x * (103.44222815443189 + (x * -0.12117036164593528))))))))))); // eslint-disable-line max-len
		s2 = 2388378799633.229 + (x * (26328198300.85965 + (x * (139850973.72263435 + (x * (456126.9622421994 + (x * (936.1402239233771 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.12117036164593528 + (x * (103.44222815443189 + (x * (-36629.81465510709 + (x * (6630299.79048338 + (x * (-621407004.2354012 + (x * (27282507878.60594 + (x * -412986685009.9087))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (1.0 + (x * (936.1402239233771 + (x * (456126.9622421994 + (x * (139850973.72263435 + (x * (26328198300.85965 + (x * 2388378799633.229))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_158 = __evalrational_158;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_159( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.005119512965174424;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1831.9397969392085 + (x * (-12254.07816137899 + (x * (-7287.970246446462 + (x * (10341.910641583727 + (x * (11725.046279757104 + (x * (4417.670702532509 + (x * (743.2119668062425 + (x * 48.5917033559165))))))))))))); // eslint-disable-line max-len
		s2 = -357834.78026152303 + (x * (245991.0226258631 + (x * (-84055.06259116957 + (x * (18680.99000835919 + (x * (-2945.876654550934 + (x * (333.07310774649073 + (x * (-25.258076240801554 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 48.5917033559165 + (x * (743.2119668062425 + (x * (4417.670702532509 + (x * (11725.046279757104 + (x * (10341.910641583727 + (x * (-7287.970246446462 + (x * (-12254.07816137899 + (x * -1831.9397969392085))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-25.258076240801554 + (x * (333.07310774649073 + (x * (-2945.876654550934 + (x * (18680.99000835919 + (x * (-84055.06259116957 + (x * (245991.0226258631 + (x * -357834.78026152303))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_159 = __evalrational_159;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_160( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len
		s2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_160 = __evalrational_160;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_161( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.015625;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len
		s2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_161 = __evalrational_161;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j0.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalrational_158 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_159 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_160 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_161 = require( './rational_psqs.js' ); */;


// VARIABLES //

var ONE_DIV_SQRT_PI = 0.5641895835477563;
var x1 = 2.4048255576957727686e+00;
var x2 = 5.5200781102863106496e+00;
var x11 = 6.160e+02;
var x12 = -1.42444230422723137837e-03;
var x21 = 1.4130e+03;
var x22 = 5.46860286310649596604e-04;

// `sincos` workspace:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the first kind of order zero.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = j0( 0.0 );
* // returns 1.0
*
* v = j0( 1.0 );
* // returns ~0.765
*
* v = j0( Infinity );
* // returns 0.0
*
* v = j0( -Infinity );
* // returns 0.0
*
* v = j0( NaN );
* // returns NaN
*/
function j0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var f;

	if ( x < 0 ) {
		x = -x;
	}
	if ( x === _$FLOAT64_PINF_85 ) {
		return 0.0;
	}
	if ( x === 0 ) {
		return 1.0;
	}
	if ( x <= 4.0 ) {
		y = x * x;
		r = _$evalrational_158( y );
		f = ( x+x1 ) * ( (x - (x11/256.0)) - x12 );
		return f * r;
	}
	if ( x <= 8.0 ) {
		y = 1.0 - ( ( x*x )/64.0 );
		r = _$evalrational_159( y );
		f = ( x+x2 ) * ( (x - (x21/256.0)) - x22 );
		return f * r;
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = _$evalrational_160( y2 );
	rs = _$evalrational_161( y2 );
	f = ONE_DIV_SQRT_PI / _$sqrt_703(x);

	/*
	* What follows is really just:
	*
	* ```
	* var z = x - pi/4;
	* return f * (rc * cos(z) - y * rs * sin(z));
	* ```
	*
	* But using the addition formulae for sin and cos, plus the special values for sin/cos of `π/4`.
	*/
	_$sincos_687( sc, x );
	return f * ( ( rc * (sc[1]+sc[0]) ) - ( (y*rs) * (sc[0]-sc[1]) ) );
}


// EXPORTS //

var _$j0_157 = j0;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the first kind of order zero.
*
* @module @stdlib/math/base/special/besselj0
*
* @example
* var j0 = require( '@stdlib/math/base/special/besselj0' );
*
* var v = j0( 0.0 );
* // returns 1.0
*
* v = j0( 1.0 );
* // returns ~0.765
*
* v = j0( Infinity );
* // returns 0.0
*
* v = j0( -Infinity );
* // returns 0.0
*
* v = j0( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$j0_157 = require( './j0.js' ); */;


// EXPORTS //

var _$j0_156 = _$j0_157;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-sqrt-pi
* @type {number}
*
* @example
* var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
* // returns 1.7724538509055160
*/


// MAIN //

/**
* Square root of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.7724538509055160
* @see [OEIS]{@link https://oeis.org/A002161}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;


// EXPORTS //

var _$SQRT_PI_89 = SQRT_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_164( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.03405537391318949;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -142585098013.66644 + (x * (6678104126.14924 + (x * (-115486967.64841276 + (x * (980629.0409895825 + (x * (-4461.579298277507 + (x * (10.650724020080236 + (x * -0.010767857011487301))))))))))); // eslint-disable-line max-len
		s2 = 4186860446082.0176 + (x * (42091902282.58013 + (x * (202283751.40097034 + (x * (591176.1449417479 + (x * (1074.227223951738 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.010767857011487301 + (x * (10.650724020080236 + (x * (-4461.579298277507 + (x * (980629.0409895825 + (x * (-115486967.64841276 + (x * (6678104126.14924 + (x * -142585098013.66644))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (1.0 + (x * (1074.227223951738 + (x * (591176.1449417479 + (x * (202283751.40097034 + (x * (42091902282.58013 + (x * 4186860446082.0176))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_164 = __evalrational_164;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_165( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.010158790774176108;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -17527881995806512.0 + (x * (1660853173129901.8 + (x * (-36658018905416.664 + (x * (355806656709.1062 + (x * (-1811393126.9860668 + (x * (5079326.614801118 + (x * (-7502.334222078161 + (x * 4.6179191852758255))))))))))))); // eslint-disable-line max-len
		s2 = 1725390588844768000.0 + (x * (17128800897135812.0 + (x * (84899346165481.42 + (x * (276227772862.44086 + (x * (648725028.9959639 + (x * (1126712.5065029138 + (x * (1388.6978985861358 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 4.6179191852758255 + (x * (-7502.334222078161 + (x * (5079326.614801118 + (x * (-1811393126.9860668 + (x * (355806656709.1062 + (x * (-36658018905416.664 + (x * (1660853173129901.8 + (x * -17527881995806512.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1388.6978985861358 + (x * (1126712.5065029138 + (x * (648725028.9959639 + (x * (276227772862.44086 + (x * (84899346165481.42 + (x * (17128800897135812.0 + (x * 1725390588844768000.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_165 = __evalrational_165;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_166( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_166 = __evalrational_166;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_167( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.046875;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_167 = __evalrational_167;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j1.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$SQRT_PI_89 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$evalrational_164 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_165 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_166 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_167 = require( './rational_psqs.js' ); */;


// VARIABLES //

var __x1_163 = 3.8317059702075123156e+00;
var __x2_163 = 7.0155866698156187535e+00;
var __x11_163 = 9.810e+02;
var __x12_163 = -3.2527979248768438556e-04;
var __x21_163 = 1.7960e+03;
var __x22_163 = -3.8330184381246462950e-05;

// `sincos` workspace:
var __sc_163 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the first kind of order one.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = j1( 0.0 );
* // returns 0.0
*
* v = j1( 1.0 );
* // returns ~0.440
*
* v = j1( Infinity );
* // returns 0.0
*
* v = j1( -Infinity );
* // returns 0.0
*
* v = j1( NaN );
* // returns NaN
*/
function j1( x ) {
	var value;
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var f;
	var w;

	w = _$abs_118( x );
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( w === _$FLOAT64_PINF_85 ) {
		return 0.0;
	}
	if ( w <= 4.0 ) {
		y = x * x;
		r = _$evalrational_164( y );
		f = w * ( w+__x1_163 ) * ( ( w - (__x11_163/256.0) ) - __x12_163 );
		value = f * r;
	} else if ( w <= 8.0 ) {
		y = x * x;
		r = _$evalrational_165( y );
		f = w * ( w+__x2_163 ) * ( ( w - (__x21_163/256.0) ) - __x22_163 );
		value = f * r;
	} else {
		y = 8.0 / w;
		y2 = y * y;
		rc = _$evalrational_166( y2 );
		rs = _$evalrational_167( y2 );
		f = 1.0 / ( _$sqrt_703( w ) * _$SQRT_PI_89 );

		/*
		* What follows is really just:
		*
		* ```
		* z = w - 0.75 * pi;
		* value = f * ( rc * cos( z ) - y * rs * sin( z ) );
		* ```
		*
		* but using the sin/cos addition rules plus constants for the values of sin/cos of `3π/4` which then cancel out with corresponding terms in "f".
		*/
		_$sincos_687( __sc_163, w );
		value = f * ( ( rc * (__sc_163[0]-__sc_163[1]) ) + ( (y*rs) * (__sc_163[0]+__sc_163[1]) ) );
	}
	if ( x < 0.0 ) {
		value *= -1.0;
	}
	return value;
}


// EXPORTS //

var _$j1_163 = j1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the first kind of order one.
*
* @module @stdlib/math/base/special/besselj1
*
* @example
* var j1 = require( '@stdlib/math/base/special/besselj1' );
*
* var v = j1( 0.0 );
* // returns 0.0
*
* v = j1( 1.0 );
* // returns ~0.440
*
* v = j1( Infinity );
* // returns 0.0
*
* v = j1( -Infinity );
* // returns 0.0
*
* v = j1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$j1_163 = require( './j1.js' ); */;


// EXPORTS //

var _$j1_162 = _$j1_163;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_169( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.18214429522164177;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 107235387820.03177 + (x * (-8371625545.12605 + (x * (204222743.5737662 + (x * (-2128754.84744018 + (x * (10102.532948020907 + (x * -18.402381979244993))))))))); // eslint-disable-line max-len
		s2 = 588738657389.9703 + (x * (8161718777.729036 + (x * (55662956.624278255 + (x * (238893.93209447255 + (x * (664.7598668924019 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -18.402381979244993 + (x * (10102.532948020907 + (x * (-2128754.84744018 + (x * (204222743.5737662 + (x * (-8371625545.12605 + (x * 107235387820.03177))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (664.7598668924019 + (x * (238893.93209447255 + (x * (55662956.624278255 + (x * (8161718777.729036 + (x * 588738657389.9703))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_169 = __evalrational_169;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_170( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.051200622130023854;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -22213976967566.19 + (x * (-551074352067.2264 + (x * (43600098638.60306 + (x * (-695904393.9461962 + (x * (4690528.861167863 + (x * (-14566.865832663636 + (x * 17.427031242901595))))))))))); // eslint-disable-line max-len
		s2 = 433861465807072.6 + (x * (5426682441941.234 + (x * (34015103849.97124 + (x * (139602027.7098683 + (x * (406699.82352539554 + (x * (830.3085761207029 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 17.427031242901595 + (x * (-14566.865832663636 + (x * (4690528.861167863 + (x * (-695904393.9461962 + (x * (43600098638.60306 + (x * (-551074352067.2264 + (x * -22213976967566.19))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (830.3085761207029 + (x * (406699.82352539554 + (x * (139602027.7098683 + (x * (34015103849.97124 + (x * (5426682441941.234 + (x * 433861465807072.6))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_170 = __evalrational_170;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_171( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.023356489432789604;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8072872690515021.0 + (x * (670166418691732.4 + (x * (-128299123640.88687 + (x * (-193630512667.72083 + (x * (2195882717.0518103 + (x * (-10085539.923498211 + (x * (21363.5341693139 + (x * -17.439661319197498))))))))))))); // eslint-disable-line max-len
		s2 = 345637246288464600.0 + (x * (3927242556964031.0 + (x * (22598377924042.9 + (x * (86926121104.20982 + (x * (247272194.75672302 + (x * (539247.3920976806 + (x * (879.0336216812844 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -17.439661319197498 + (x * (21363.5341693139 + (x * (-10085539.923498211 + (x * (2195882717.0518103 + (x * (-193630512667.72083 + (x * (-128299123640.88687 + (x * (670166418691732.4 + (x * -8072872690515021.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (879.0336216812844 + (x * (539247.3920976806 + (x * (247272194.75672302 + (x * (86926121104.20982 + (x * (22598377924042.9 + (x * (3927242556964031.0 + (x * 345637246288464600.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_171 = __evalrational_171;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_172( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len
		s2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_172 = __evalrational_172;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_173( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.015625;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len
		s2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_173 = __evalrational_173;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y0.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$SQRT_PI_89 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$j0_156 = require( '@stdlib/math/base/special/besselj0' ); */;
/* removed: var _$evalrational_169 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_170 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_171 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_172 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_173 = require( './rational_psqs.js' ); */;


// VARIABLES //

var __ONE_DIV_SQRT_PI_174 = 1.0 / _$SQRT_PI_89;
var TWO_DIV_PI = 2.0 / _$PI_84;

var __x1_174 = 8.9357696627916752158e-01;
var __x2_174 = 3.9576784193148578684e+00;
var x3 = 7.0860510603017726976e+00;
var __x11_174 = 2.280e+02;
var __x12_174 = 2.9519662791675215849e-03;
var __x21_174 = 1.0130e+03;
var __x22_174 = 6.4716931485786837568e-04;
var x31 = 1.8140e+03;
var x32 = 1.1356030177269762362e-04;

// `sincos` workspace:
var __sc_174 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the second kind of order zero.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( Infinity );
* // returns 0.0
*
* v = y0( -Infinity );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/
function y0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( x === _$FLOAT64_PINF_85 ) {
		return 0.0;
	}
	if ( x <= 3.0 ) {
		y = x * x;
		z = ( _$ln_545( x/__x1_174 ) * _$j0_156( x ) ) * TWO_DIV_PI;
		r = _$evalrational_169( y );
		f = ( x+__x1_174 ) * ( ( x - (__x11_174/256.0) ) - __x12_174 );
		return z + ( f*r );
	}
	if ( x <= 5.5 ) {
		y = x * x;
		z = ( _$ln_545( x/__x2_174 ) * _$j0_156( x ) ) * TWO_DIV_PI;
		r = _$evalrational_170( y );
		f = ( x+__x2_174 ) * ( (x - (__x21_174/256.0)) - __x22_174 );
		return z + ( f*r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( _$ln_545( x/x3 ) * _$j0_156( x ) ) * TWO_DIV_PI;
		r = _$evalrational_171( y );
		f = ( x+x3 ) * ( (x - (x31/256.0)) - x32 );
		return z + ( f*r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = _$evalrational_172( y2 );
	rs = _$evalrational_173( y2 );
	f = __ONE_DIV_SQRT_PI_174 / _$sqrt_703( x );

	/*
	* The following code is really just:
	*
	* ```
	* z = x - 0.25 * pi;
	* value = f * ( rc * sin( z ) + y * rs * cos( z ) );
	* ```
	*
	* But using the sin/cos addition formulae and constant values for sin/cos of `π/4` which then cancel part of the "f" term as they're all `1/sqrt(2)`:
	*/
	_$sincos_687( __sc_174, x );
	return f * ( ( rc * (__sc_174[0]-__sc_174[1]) ) + ( (y*rs) * (__sc_174[1]+__sc_174[0]) ) );
}


// EXPORTS //

var _$y0_174 = y0;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the second kind of order zero.
*
* @module @stdlib/math/base/special/bessely0
*
* @example
* var y0 = require( '@stdlib/math/base/special/bessely0' );
*
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( Infinity );
* // returns 0.0
*
* v = y0( -Infinity );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$y0_174 = require( './y0.js' ); */;


// EXPORTS //

var _$y0_168 = _$y0_174;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_176( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.13187550549740895;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 40535726612579.55 + (x * (5470861171652.543 + (x * (-375959744978.196 + (x * (7214454821.450256 + (x * (-59157479.9974084 + (x * (221579.5322228026 + (x * -317.1442466004613))))))))))); // eslint-disable-line max-len
		s2 = 307378739210792.9 + (x * (4127228620040.646 + (x * (27800352738.690586 + (x * (122504351.22182964 + (x * (381364.70753052575 + (x * (820.7990816839387 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -317.1442466004613 + (x * (221579.5322228026 + (x * (-59157479.9974084 + (x * (7214454821.450256 + (x * (-375959744978.196 + (x * (5470861171652.543 + (x * 40535726612579.55))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (820.7990816839387 + (x * (381364.70753052575 + (x * (122504351.22182964 + (x * (27800352738.690586 + (x * (4127228620040.646 + (x * 307378739210792.9))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_176 = __evalrational_176;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_177( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.021593919914419626;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 11514276357909012000.0 + (x * (-5680809457472421000.0 + (x * (-23638408497043136.0 + (x * (4068627528980474.5 + (x * (-59530713129741.984 + (x * (374536739624.3849 + (x * (-1195796191.2070618 + (x * (1915380.6858264203 + (x * -1233.7180442012952))))))))))))))); // eslint-disable-line max-len
		s2 = 533218443133161800000.0 + (x * (5696819882285718000.0 + (x * (30837179548112880.0 + (x * (111870100658569.7 + (x * (302217668529.60406 + (x * (635503180.8708892 + (x * (1045374.8201934079 + (x * (1285.516484932161 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -1233.7180442012952 + (x * (1915380.6858264203 + (x * (-1195796191.2070618 + (x * (374536739624.3849 + (x * (-59530713129741.984 + (x * (4068627528980474.5 + (x * (-23638408497043136.0 + (x * (-5680809457472421000.0 + (x * 11514276357909012000.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1285.516484932161 + (x * (1045374.8201934079 + (x * (635503180.8708892 + (x * (302217668529.60406 + (x * (111870100658569.7 + (x * (30837179548112880.0 + (x * (5696819882285718000.0 + (x * 533218443133161800000.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_177 = __evalrational_177;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_178( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_178 = __evalrational_178;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_179( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.046875;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_179 = __evalrational_179;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y1.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright Xiaogang Zhang, 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$SQRT_PI_89 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$j1_162 = require( '@stdlib/math/base/special/besselj1' ); */;
/* removed: var _$evalrational_176 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_177 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_178 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_179 = require( './rational_psqs.js' ); */;


// VARIABLES //

var __ONE_DIV_SQRT_PI_180 = 1.0 / _$SQRT_PI_89;
var __TWO_DIV_PI_180 = 2.0 / _$PI_84;

var __x1_180 = 2.1971413260310170351e+00;
var __x2_180 = 5.4296810407941351328e+00;
var __x11_180 = 5.620e+02;
var __x12_180 = 1.8288260310170351490e-03;
var __x21_180 = 1.3900e+03;
var __x22_180 = -6.4592058648672279948e-06;

// `sincos` workspace:
var __sc_180 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the second kind of order zero.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = y1( 0.0 );
* // returns -Infinity
*
* v = y1( 1.0 );
* // returns ~-0.781
*
* v = y1( -1.0 );
* // returns NaN
*
* v = y1( Infinity );
* // returns 0.0
*
* v = y1( -Infinity );
* // returns NaN
*
* v = y1( NaN );
* // returns NaN
*/
function y1( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( x === _$FLOAT64_PINF_85 ) {
		return 0.0;
	}
	if ( x <= 4.0 ) {
		y = x * x;
		z = ( _$ln_545( x/__x1_180 ) * _$j1_162( x ) ) * __TWO_DIV_PI_180;
		r = _$evalrational_176( y );
		f = ( ( x+__x1_180 ) * ( (x - (__x11_180/256.0)) - __x12_180 ) ) / x;
		return z + ( f*r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( _$ln_545( x/__x2_180 ) * _$j1_162( x ) ) * __TWO_DIV_PI_180;
		r = _$evalrational_177( y );
		f = ( ( x+__x2_180 ) * ( (x - (__x21_180/256.0)) - __x22_180 ) ) / x;
		return z + ( f*r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = _$evalrational_178( y2 );
	rs = _$evalrational_179( y2 );
	f = __ONE_DIV_SQRT_PI_180 / _$sqrt_703( x );

	/*
	* This code is really just:
	*
	* ```
	* z = x - 0.75 * PI;
	* return f * (rc * sin(z) + y * rs * cos(z));
	* ```
	*
	* But using the sin/cos addition rules, plus constants for sin/cos of `3π/4` which then cancel out with corresponding terms in "f".
	*/
	_$sincos_687( __sc_180, x );
	return f * ( ( ( (y*rs) * (__sc_180[0]-__sc_180[1]) ) - ( rc * (__sc_180[0]+__sc_180[1]) ) ) );
}


// EXPORTS //

var _$y1_180 = y1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Bessel function of the second kind of order zero.
*
* @module @stdlib/math/base/special/bessely1
*
* @example
* var y1 = require( '@stdlib/math/base/special/bessely1' );
*
* var v = y1( 0.0 );
* // returns -Infinity
*
* v = y1( 1.0 );
* // returns ~-0.781
*
* v = y1( -1.0 );
* // returns NaN
*
* v = y1( Infinity );
* // returns 0.0
*
* v = y1( -Infinity );
* // returns NaN
*
* v = y1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$y1_180 = require( './y1.js' ); */;


// EXPORTS //

var _$y1_175 = _$y1_180;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/
var ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$ceil_209 = ceil;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ceil_209 = require( './ceil.js' ); */;


// EXPORTS //

var _$ceil_210 = _$ceil_209;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;


// MAIN //

/**
* Rounds a numeric value toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc( -4.2 );
* // returns -4.0
*
* @example
* var v = trunc( 9.99999 );
* // returns 9.0
*
* @example
* var v = trunc( 0.0 );
* // returns 0.0
*
* @example
* var v = trunc( -0.0 );
* // returns -0.0
*
* @example
* var v = trunc( NaN );
* // returns NaN
*
* @example
* var v = trunc( Infinity );
* // returns Infinity
*
* @example
* var v = trunc( -Infinity );
* // returns -Infinity
*/
function trunc( x ) {
	if ( x < 0.0 ) {
		return _$ceil_210( x );
	}
	return _$floor_346( x );
}


// EXPORTS //

var _$trunc_720 = trunc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward zero.
*
* @module @stdlib/math/base/special/trunc
*
* @example
* var trunc = require( '@stdlib/math/base/special/trunc' );
*
* var v = trunc( -4.2 );
* // returns -4.0
*
* v = trunc( 9.99999 );
* // returns 9.0
*
* v = trunc( 0.0 );
* // returns 0.0
*
* v = trunc( -0.0 );
* // returns -0.0
*
* v = trunc( NaN );
* // returns NaN
*
* v = trunc( Infinity );
* // returns Infinity
*
* v = trunc( -Infinity );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$trunc_720 = require( './trunc.js' ); */;


// EXPORTS //

var _$trunc_719 = _$trunc_720;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_315( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_315 = __evalpoly_315;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$evalpoly_315 = require( './polyval_p.js' ); */;


// MAIN //

/**
* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
*
* @private
* @param {number} hi - upper bound
* @param {number} lo - lower bound
* @param {integer} k - power of 2
* @returns {number} function value
*/
function expmulti( hi, lo, k ) {
	var r;
	var t;
	var c;
	var y;

	r = hi - lo;
	t = r * r;
	c = r - ( t*_$evalpoly_315( t ) );
	y = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);

	return _$ldexp_543( y, k );
}


// EXPORTS //

var _$expmulti_313 = expmulti;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$expmulti_313 = require( './expmulti.js' ); */;


// VARIABLES //

var __LN2_HI_312 = 6.93147180369123816490e-01;
var __LN2_LO_312 = 1.90821492927058770002e-10;
var LOG2_E = 1.44269504088896338700e+00;
var OVERFLOW = 7.09782712893383973096e+02;
var UNDERFLOW = -7.45133219101941108420e+02;
var NEARZERO = 1.0 / (1 << 28); // 2^-28;
var NEG_NEARZERO = -NEARZERO;


// MAIN //

/**
* Evaluates the natural exponential function.
*
* ## Method
*
* 1.  We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
*
*     ```tex
*     \begin{align*}
*     x &= k \cdot \ln(2) + r \\
*     |r| &\leq 0.5 \cdot \ln(2)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
*
*     <!-- </note> -->
*
* 2.  We approximate of \\( e^{r} \\) by a special rational function on the interval \\(\[0,0.34658]\\):
*
*     ```tex
*     \begin{align*}
*     R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
*     &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
*
*     ```tex
*     R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
*     ```
*
*     where \\( z = r^2 \\) and
*
*     ```tex
*     \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
*
*     <!-- </note> -->
*
*     The computation of \\( e^{r} \\) thus becomes
*
*     ```tex
*     \begin{align*}
*     e^{r} &= 1 + \frac{2r}{R-r} \\
*           &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
*     \end{align*}
*     ```
*
*     where
*
*     ```tex
*     R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
*     ```
*
* 3.  We scale back to obtain \\( e^{x} \\). From step 1, we have
*
*     ```tex
*     e^{x} = 2^k e^{r}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* e^\infty &= \infty \\
* e^{-\infty} &= 0 \\
* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
* \end{align*}
* ```
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   For an IEEE double,
*
*     -   if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
*     -   if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
*
* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 4.0 );
* // returns ~54.5982
*
* @example
* var v = exp( -9.0 );
* // returns ~1.234e-4
*
* @example
* var v = exp( 0.0 );
* // returns 1.0
*
* @example
* var v = exp( NaN );
* // returns NaN
*/
function exp( x ) {
	var hi;
	var lo;
	var k;

	if ( _$isnan_103( x ) || x === _$FLOAT64_PINF_85 ) {
		return x;
	}
	if ( x === _$FLOAT64_NINF_81 ) {
		return 0.0;
	}
	if ( x > OVERFLOW ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x < UNDERFLOW ) {
		return 0.0;
	}
	if (
		x > NEG_NEARZERO &&
		x < NEARZERO
	) {
		return 1.0 + x;
	}
	// Reduce and compute `r = hi - lo` for extra precision.
	if ( x < 0.0 ) {
		k = _$trunc_719( (LOG2_E*x) - 0.5 );
	} else {
		k = _$trunc_719( (LOG2_E*x) + 0.5 );
	}
	hi = x - (k*__LN2_HI_312);
	lo = k * __LN2_LO_312;

	return _$expmulti_313( hi, lo, k );
}


// EXPORTS //

var _$exp_312 = exp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural exponential function.
*
* @module @stdlib/math/base/special/exp
*
* @example
* var exp = require( '@stdlib/math/base/special/exp' );
*
* var v = exp( 4.0 );
* // returns ~54.5982
*
* v = exp( -9.0 );
* // returns ~1.234e-4
*
* v = exp( 0.0 );
* // returns 1.0
*
* v = exp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$exp_312 = require( './exp.js' ); */;


// EXPORTS //

var _$exp_314 = _$exp_312;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_43 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __LOW_774;
if ( _$IS_LITTLE_ENDIAN_43 === true ) {
	__LOW_774 = 0; // first index
} else {
	__LOW_774 = 1; // second index
}


// EXPORTS //

var _$LOW_774 = __LOW_774;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$LOW_774 = require( './low.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_775 = new _$ctor_2( 1 );
var __UINT32_VIEW_775 = new _$ctor_7( __FLOAT64_VIEW_775.buffer );


// MAIN //

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/
function setLowWord( x, low ) {
	__FLOAT64_VIEW_775[ 0 ] = x;
	__UINT32_VIEW_775[ _$LOW_774 ] = ( low >>> 0 ); // identity bit shift to ensure integer
	return __FLOAT64_VIEW_775[ 0 ];
}


// EXPORTS //

var _$setLowWord_775 = setLowWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-low-word
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

// MODULES //

/* removed: var _$setLowWord_775 = require( './main.js' ); */;


// EXPORTS //

var _$setLowWord_773 = _$setLowWord_775;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Converts an unsigned 32-bit integer to a signed 32-bit integer.
*
* @param {uinteger32} x - unsigned 32-bit integer
* @returns {integer32} signed 32-bit integer
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/
function uint32ToInt32( x ) {
	// NOTE: we could also use typed-arrays to achieve the same end.
	return x|0; // asm type annotation
}


// EXPORTS //

var _$uint32ToInt32_783 = uint32ToInt32;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert an unsigned 32-bit integer to a signed 32-bit integer.
*
* @module @stdlib/number/uint32/base/to-int32
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
*
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

// MODULES //

/* removed: var _$uint32ToInt32_783 = require( './main.js' ); */;


// EXPORTS //

var _$uint32ToInt32_782 = _$uint32ToInt32_783;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isOdd_111 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$copysign_224 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the exponential function when \\(|x| = 0\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = pow( -0.0, -9 );
* // returns -Infinity
*
* @example
* var v = pow( 0.0, -9 );
* // returns Infinity
*
* @example
* var v = pow( -0.0, 9 );
* // returns 0.0
*
* @example
* var v = pow( 0.0, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 0.0, Infinity );
* // returns 0.0
*/
function pow( x, y ) {
	if ( y === _$FLOAT64_NINF_81 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( y === _$FLOAT64_PINF_85 ) {
		return 0.0;
	}
	if ( y > 0.0 ) {
		if ( _$isOdd_111( y ) ) {
			return x; // handles +-0
		}
		return 0.0;
	}
	// y < 0.0
	if ( _$isOdd_111( y ) ) {
		return _$copysign_224( _$FLOAT64_PINF_85, x ); // handles +-0
	}
	return _$FLOAT64_PINF_85;
}


// EXPORTS //

var _$pow_626 = pow;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_627 = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

var __HUGE_627 = 1.0e300;
var __TINY_627 = 1.0e-300;


// MAIN //

/**
* Evaluates the exponential function when \\(|y| > 2^64\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} overflow or underflow result
*
* @example
* var v = pow( 9.0, 3.6893488147419103e19 );
* // returns Infinity
*
* @example
* var v = pow( -3.14, -3.6893488147419103e19 );
* // returns 0.0
*/
function __pow_627( x, y ) {
	var ahx;
	var hx;

	hx = _$getHighWord_762( x );
	ahx = (hx & __ABS_MASK_627);

	if ( ahx <= HIGH_MAX_NEAR_UNITY ) {
		if ( y < 0 ) {
			// signal overflow...
			return __HUGE_627 * __HUGE_627;
		}
		// signal underflow...
		return __TINY_627 * __TINY_627;
	}
	// `x` has a biased exponent greater than or equal to `0`...

	if ( y > 0 ) {
		// signal overflow...
		return __HUGE_627 * __HUGE_627;
	}
	// signal underflow...
	return __TINY_627 * __TINY_627;
}


// EXPORTS //

var _$pow_627 = __pow_627;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the exponential function when \\( y = \pm \infty\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( -1.0, Infinity );
* // returns NaN
*
* @example
* var v = pow( -1.0, -Infinity  );
* // returns NaN
*
* @example
* var v = pow( 1.0, Infinity );
* // returns 1.0
*
* @example
* var v = pow( 1.0, -Infinity  );
* // returns 1.0
*
* @example
* var v = pow( 0.5, Infinity );
* // returns 0.0
*
* @example
* var v = pow( 0.5, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 1.5, -Infinity  );
* // returns 0.0
*
* @example
* var v = pow( 1.5, Infinity );
* // returns Infinity
*/
function __pow_628( x, y ) {
	if ( x === -1.0 ) {
		// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.
		return (x-x)/(x-x); // signal NaN
	}
	if ( x === 1.0 ) {
		return 1.0;
	}
	// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)
	if ( (_$abs_118(x) < 1.0) === (y === _$FLOAT64_PINF_85) ) {
		return 0.0;
	}
	// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)
	return _$FLOAT64_PINF_85;
}


// EXPORTS //

var _$pow_628 = __pow_628;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_621( x ) {
	if ( x === 0.0 ) {
		return 0.5999999999999946;
	}
	return 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_621 = __evalpoly_621;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_621 = require( './polyval_l.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_619 = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_619 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_619 = 0x3ff00000|0; // asm type annotation

// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023
var HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation

// 0x00080000 = 524288 => 0 00000000000 10000000000000000000
var HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation

// TODO: consider making an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

var __TWO53_619 = 9007199254740992.0;	// 0x43400000, 0x00000000

// 2/(3*LN2)
var CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD

// (float)CP
var CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000

// Low: CP_HI
var CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5

var BP = [
	1.0,
	1.5
];
var DP_HI = [
	0.0,
	5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000
];
var DP_LO = [
	0.0,
	1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006
];


// MAIN //

/**
* Computes \\(\operatorname{log2}(ax)\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @param {number} ahx - high word of `ax`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]
* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
*/
function log2ax( out, ax, ahx ) {
	var tmp;
	var ss; // `hs + ls`
	var s2; // `ss` squared
	var hs;
	var ls;
	var ht;
	var lt;
	var bp; // `BP` constant
	var dp; // `DP` constant
	var hp;
	var lp;
	var hz;
	var lz;
	var t1;
	var t2;
	var t;
	var r;
	var u;
	var v;
	var n;
	var j;
	var k;

	n = 0|0; // asm type annotation

	// Check if `x` is subnormal...
	if ( ahx < __HIGH_MIN_NORMAL_EXP_619 ) {
		ax *= __TWO53_619;
		n -= 53|0; // asm type annotation
		ahx = _$getHighWord_762( ax );
	}
	// Extract the unbiased exponent of `x`:
	n += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - _$FLOAT64_EXPONENT_BIAS_58)|0; // asm type annotation

	// Isolate the significand bits of `x`:
	j = (ahx & __HIGH_SIGNIFICAND_MASK_619)|0; // asm type annotation

	// Normalize `ahx` by setting the (biased) exponent to `1023`:
	ahx = (j | __HIGH_BIASED_EXP_0_619)|0; // asm type annotation

	// Determine the interval of `|x|` by comparing significand bits...

	// |x| < sqrt(3/2)
	if ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110
		k = 0;
	}
	// |x| < sqrt(3)
	else if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010
		k = 1;
	}
	// |x| >= sqrt(3)
	else {
		k = 0;
		n += 1|0; // asm type annotation
		ahx -= __HIGH_MIN_NORMAL_EXP_619;
	}
	// Load the normalized high word into `|x|`:
	ax = _$setHighWord_771( ax, ahx );

	// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:
	bp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5
	u = ax - bp; // (x-1) || (x-1.5)
	v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)
	ss = u * v;
	hs = _$setLowWord_773( ss, 0 ); // set all low word (less significant significand) bits to 0s

	// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):
	tmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
	tmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`
	ht = _$setHighWord_771( 0.0, tmp );
	lt = ax - (ht - bp);
	ls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );

	// Compute `log(ax)`...

	s2 = ss * ss;
	r = s2 * s2 * _$evalpoly_621( s2 );
	r += ls * (hs + ss);
	s2 = hs * hs;
	ht = 3.0 + s2 + r;
	ht = _$setLowWord_773( ht, 0 );
	lt = r - ((ht-3.0) - s2);

	// u+v = ss*(1+...):
	u = hs * ht;
	v = ( ls*ht ) + ( lt*ss );

	// 2/(3LN2) * (ss+...):
	hp = u + v;
	hp = _$setLowWord_773( hp, 0 );
	lp = v - (hp - u);
	hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)
	lz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];

	// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz
	dp = DP_HI[ k ];
	t = n;
	t1 = ((hz+lz) + dp) + t; // log2(ax)
	t1 = _$setLowWord_773( t1, 0 );
	t2 = lz - (((t1-t) - dp) - hz);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

var _$log2ax_619 = log2ax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_623( x ) {
	if ( x === 0.0 ) {
		return 0.5;
	}
	return 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));
}


// EXPORTS //

var _$evalpoly_623 = __evalpoly_623;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$evalpoly_623 = require( './polyval_w.js' ); */;


// VARIABLES //

// 1/LN2
var INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE

// High (24 bits): 1/LN2
var INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000

// Low: 1/LN2
var INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44


// MAIN //

/**
* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]
* // returns [ -1265.7236328125, -0.0008163940840404393 ]
*/
function logx( out, ax ) {
	var t2;
	var t1;
	var t;
	var w;
	var u;
	var v;

	t = ax - 1.0; // `t` has `20` trailing zeros
	w = t * t * _$evalpoly_623( t );
	u = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits
	v = ( t*INV_LN2_LO ) - ( w*INV_LN2 );
	t1 = u + v;
	t1 = _$setLowWord_773( t1, 0 );
	t2 = v - (t1 - u);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

var _$logx_620 = logx;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_622( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_622 = __evalpoly_622;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$uint32ToInt32_782 = require( '@stdlib/number/uint32/base/to-int32' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_622 = require( './polyval_p.js' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_625 = 0x7fffffff|0; // asm type annotation

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_625 = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_625 = 0x00100000|0; // asm type annotation

// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation

// TODO: consider making into an external constant
var __HIGH_NUM_SIGNIFICAND_BITS_625 = 20|0; // asm type annotation

// High: LN2
var __LN2_HI_625 = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000

// Low: LN2
var __LN2_LO_625 = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39


// MAIN //

/**
* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
*
* @private
* @param {number} j - high word of `hp + lp`
* @param {number} hp - first power summand
* @param {number} lp - second power summand
* @returns {number} function value
*
* @example
* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
* // returns ~0.79
*/
function pow2( j, hp, lp ) {
	var tmp;
	var t1;
	var t;
	var r;
	var u;
	var v;
	var w;
	var z;
	var n;
	var i;
	var k;

	i = (j & __ABS_MASK_625)|0; // asm type annotation
	k = ((i>>__HIGH_NUM_SIGNIFICAND_BITS_625) - _$FLOAT64_EXPONENT_BIAS_58)|0; // asm type annotation
	n = 0;

	// `|z| > 0.5`, set `n = z+0.5`
	if ( i > HIGH_BIASED_EXP_NEG_1 ) {
		n = (j + (__HIGH_MIN_NORMAL_EXP_625>>(k+1)))>>>0; // asm type annotation
		k = (((n & __ABS_MASK_625)>>__HIGH_NUM_SIGNIFICAND_BITS_625) - _$FLOAT64_EXPONENT_BIAS_58)|0; // new k for n
		tmp = ((n & ~(__HIGH_SIGNIFICAND_MASK_625 >> k)))>>>0; // asm type annotation
		t = _$setHighWord_771( 0.0, tmp );
		n = (((n & __HIGH_SIGNIFICAND_MASK_625)|__HIGH_MIN_NORMAL_EXP_625) >> (__HIGH_NUM_SIGNIFICAND_BITS_625-k))>>>0; // eslint-disable-line max-len
		if ( j < 0 ) {
			n = -n;
		}
		hp -= t;
	}
	t = lp + hp;
	t = _$setLowWord_773( t, 0 );
	u = t * __LN2_HI_625;
	v = ( (lp - (t-hp))*_$LN2_67 ) + ( t*__LN2_LO_625 );
	z = u + v;
	w = v - (z - u);
	t = z * z;
	t1 = z - ( t*_$evalpoly_622( t ) );
	r = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );
	z = 1.0 - (r - z);
	j = _$getHighWord_762( z );
	j = _$uint32ToInt32_782( j );
	j += (n << __HIGH_NUM_SIGNIFICAND_BITS_625)>>>0; // asm type annotation

	// Check for subnormal output...
	if ( (j>>__HIGH_NUM_SIGNIFICAND_BITS_625) <= 0 ) {
		z = _$ldexp_543( z, n );
	} else {
		z = _$setHighWord_771( z, j );
	}
	return z;
}


// EXPORTS //

var _$pow2_625 = pow2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isOdd_111 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$uint32ToInt32_782 = require( '@stdlib/number/uint32/base/to-int32' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$pow_626 = require( './x_is_zero.js' ); */;
/* removed: var _$pow_627 = require( './y_is_huge.js' ); */;
/* removed: var _$pow_628 = require( './y_is_infinite.js' ); */;
/* removed: var _$log2ax_619 = require( './log2ax.js' ); */;
/* removed: var _$logx_620 = require( './logx.js' ); */;
/* removed: var _$pow2_625 = require( './pow2.js' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_624 = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var __HIGH_MAX_NEAR_UNITY_624 = 0x3fefffff|0; // asm type annotation

// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31
var HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation

// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64
var HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation

// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024
var HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_624 = 0x3ff00000|0; // asm type annotation

// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000
var HIGH_1075 = 0x4090cc00|0; // asm type annotation

// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000
var HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation

var HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation

var __HUGE_624 = 1.0e300;
var __TINY_624 = 1.0e-300;

// -(1024-log2(ovfl+.5ulp))
var OVT = 8.0085662595372944372e-17;

// High/low words workspace:
var __WORDS_624 = [ 0|0, 0|0 ]; // WARNING: not thread safe

// Log workspace:
var LOG_WORKSPACE = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the exponential function.
*
* ## Method
*
* 1.  Let \\(x = 2^n (1+f)\\).
*
* 2.  Compute \\(\operatorname{log2}(x)\\) as
*
*     ```tex
*     \operatorname{log2}(x) = w_1 + w_2
*     ```
*
*     where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
*
* 3.  Compute
*
*     ```tex
*     y \cdot \operatorname{log2}(x) = n + y^\prime
*     ```
*
*     by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
*
* 4.  Return
*
*     ```tex
*     x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
* 1^y &= 1 & \\
* x^0 &= 1 & \\
* x^1 &= x & \\
* (\pm 0)^\infty &= +0 & \\
* (\pm 0)^{-\infty} &= +\infty & \\
* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
* x^{\infty} &= +\infty & |x| > 1 \\
* x^{\infty} &= +0 & |x| < 1 \\
* x^{-\infty} &= +0 & |x| > 1 \\
* x^{-\infty} &= +\infty & |x| < 1 \\
* (-\infty)^y &= (-0)^y & \\
* \infty^y &= +0 & y < 0 \\
* \infty^y &= +\infty & y > 0 \\
* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
* \end{align*}
* ```
*
* ## Notes
*
* -   \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) **always** returns the correct integer, provided the value is representable.
* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
*
*
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* @example
* var v = pow( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var v = pow( 100.0, 0.0 );
* // returns 1.0
*
* @example
* var v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* @example
* var v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* @example
* var v = pow( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = pow( 5.0, NaN );
* // returns NaN
*
* @example
* var v = pow( NaN, NaN );
* // returns NaN
*/
function __pow_624( x, y ) {
	var ahx; // absolute value high word `x`
	var ahy; // absolute value high word `y`
	var ax;  // absolute value `x`
	var hx;  // high word `x`
	var lx;  // low word `x`
	var hy;  // high word `y`
	var ly;  // low word `y`
	var sx;  // sign `x`
	var sy;  // sign `y`
	var y1;
	var hp;
	var lp;
	var t;
	var z;   // y prime
	var j;
	var i;
	if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
		return NaN;
	}
	// Split `y` into high and low words:
	_$toWords_778( __WORDS_624, y );
	hy = __WORDS_624[ 0 ];
	ly = __WORDS_624[ 1 ];

	// Special cases `y`...
	if ( ly === 0 ) {
		if ( y === 0.0 ) {
			return 1.0;
		}
		if ( y === 1.0 ) {
			return x;
		}
		if ( y === -1.0 ) {
			return 1.0 / x;
		}
		if ( y === 0.5 ) {
			return _$sqrt_703( x );
		}
		if ( y === -0.5 ) {
			return 1.0 / _$sqrt_703( x );
		}
		if ( y === 2.0 ) {
			return x * x;
		}
		if ( y === 3.0 ) {
			return x * x * x;
		}
		if ( y === 4.0 ) {
			x *= x;
			return x * x;
		}
		if ( _$isInfinite_99( y ) ) {
			return _$pow_628( x, y );
		}
	}
	// Split `x` into high and low words:
	_$toWords_778( __WORDS_624, x );
	hx = __WORDS_624[ 0 ];
	lx = __WORDS_624[ 1 ];

	// Special cases `x`...
	if ( lx === 0 ) {
		if ( hx === 0 ) {
			return _$pow_626( x, y );
		}
		if ( x === 1.0 ) {
			return 1.0;
		}
		if (
			x === -1.0 &&
			_$isOdd_111( y )
		) {
			return -1.0;
		}
		if ( _$isInfinite_99( x ) ) {
			if ( x === _$FLOAT64_NINF_81 ) {
				// `pow( 1/x, -y )`
				return __pow_624( -0.0, -y );
			}
			if ( y < 0.0 ) {
				return 0.0;
			}
			return _$FLOAT64_PINF_85;
		}
	}
	if (
		x < 0.0 &&
		_$isInteger_101( y ) === false
	) {
		// Signal NaN...
		return (x-x)/(x-x);
	}
	ax = _$abs_118( x );

	// Remove the sign bits (i.e., get absolute values):
	ahx = (hx & __ABS_MASK_624)|0; // asm type annotation
	ahy = (hy & __ABS_MASK_624)|0; // asm type annotation

	// Extract the sign bits:
	sx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation
	sy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation

	// Determine the sign of the result...
	if ( sx && _$isOdd_111( y ) ) {
		sx = -1.0;
	} else {
		sx = 1.0;
	}
	// Case 1: `|y|` is huge...

	// |y| > 2^31
	if ( ahy > HIGH_BIASED_EXP_31 ) {
		// `|y| > 2^64`, then must over- or underflow...
		if ( ahy > HIGH_BIASED_EXP_64 ) {
			return _$pow_627( x, y );
		}
		// Over- or underflow if `x` is not close to unity...

		if ( ahx < __HIGH_MAX_NEAR_UNITY_624 ) {
			// y < 0
			if ( sy === 1 ) {
				// Signal overflow...
				return sx * __HUGE_624 * __HUGE_624;
			}
			// Signal underflow...
			return sx * __TINY_624 * __TINY_624;
		}
		if ( ahx > __HIGH_BIASED_EXP_0_624 ) {
			// y > 0
			if ( sy === 0 ) {
				// Signal overflow...
				return sx * __HUGE_624 * __HUGE_624;
			}
			// Signal underflow...
			return sx * __TINY_624 * __TINY_624;
		}
		// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.
		t = _$logx_620( LOG_WORKSPACE, ax );
	}
	// Case 2: `|y|` is not huge...
	else {
		t = _$log2ax_619( LOG_WORKSPACE, ax, ahx );
	}
	// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...
	y1 = _$setLowWord_773( y, 0 );
	lp = ( (y-y1)*t[0] ) + ( y*t[1] );
	hp = y1 * t[0];
	z = lp + hp;

	// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.
	_$toWords_778( __WORDS_624, z );
	j = _$uint32ToInt32_782( __WORDS_624[0] );
	i = _$uint32ToInt32_782( __WORDS_624[1] );

	// z >= 1024
	if ( j >= HIGH_BIASED_EXP_10 ) {
		// z > 1024
		if ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {
			// Signal overflow...
			return sx * __HUGE_624 * __HUGE_624;
		}
		if ( (lp+OVT) > (z-hp) ) {
			// Signal overflow...
			return sx * __HUGE_624 * __HUGE_624;
		}
	}
	// z <= -1075
	else if ( (j&__ABS_MASK_624) >= HIGH_1075 ) {
		// z < -1075
		if ( ((j-HIGH_NEG_1075)|i) !== 0 ) {
			// signal underflow...
			return sx * __TINY_624 * __TINY_624;
		}
		if ( lp <= (z-hp) ) {
			// signal underflow...
			return sx * __TINY_624 * __TINY_624;
		}
	}
	// Compute `2^(hp+lp)`...
	z = _$pow2_625( j, hp, lp );

	return sx * z;
}


// EXPORTS //

var _$pow_624 = __pow_624;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the exponential function.
*
* @module @stdlib/math/base/special/pow
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* v = pow( 4.0, 0.5 );
* // returns 2.0
*
* v = pow( 100.0, 0.0 );
* // returns 1.0
*
* v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* v = pow( NaN, 3.0 );
* // returns NaN
*
* v = pow( 5.0, NaN );
* // returns NaN
*
* v = pow( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$pow_624 = require( './pow.js' ); */;


// EXPORTS //

var _$pow_618 = _$pow_624;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Euler's number.
*
* @module @stdlib/constants/math/float64-e
* @type {number}
*
* @example
* var E = require( '@stdlib/constants/math/float64-e' );
* // returns 2.718281828459045
*/


// MAIN //

/**
* Euler's number.
*
* @constant
* @type {number}
* @default 2.718281828459045
* @see [OEIS]{@link https://oeis.org/A001113}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
*/
var E = 2.718281828459045235360287471352662497757247093699959574966;


// EXPORTS //

var _$E_55 = E;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

var _$FLOAT64_EPSILON_56 = FLOAT64_EPSILON;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_183( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_183 = __evalrational_183;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$E_55 = require( '@stdlib/constants/math/float64-e' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$evalrational_183 = require( './lanczos_sum_expg_scaled.js' ); */; // Lanczos approximation scaled by exp(G)


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;


// MAIN //

/**
* Evaluate the beta function.
*
* @param {NonNegativeNumber} a - input value
* @param {NonNegativeNumber} b - input value
* @returns {number} evaluated beta function
*
* @example
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* @example
* var v = beta( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = beta( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* @example
* var v = beta( 4.0, 1.0 );
* // returns 0.25
*
* @example
* var v = beta( NaN, 2.0 );
* // returns NaN
*/
function beta( a, b ) {
	var ambh;
	var agh;
	var bgh;
	var cgh;
	var res;
	var tmp;
	var c;

	if ( _$isnan_103( a ) || _$isnan_103( b ) ) {
		return NaN;
	}
	if ( a < 0.0 || b < 0.0 ) {
		return NaN;
	}
	if ( b === 1.0 ) {
		return 1.0 / a;
	}
	if ( a === 1.0 ) {
		return 1.0 / b;
	}
	c = a + b;
	if ( c < _$FLOAT64_EPSILON_56 ) {
		res = c / a;
		res /= b;
		return res;
	}

	// Special cases:
	if ( c === a && b < _$FLOAT64_EPSILON_56 ) {
		return 1.0 / b;
	}
	if ( c === b && a < _$FLOAT64_EPSILON_56 ) {
		return 1.0 / a;
	}

	if ( a < b ) {
		// Swap `a` and `b`:
		tmp = b;
		b = a;
		a = tmp;
	}

	// Lanczos calculation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	res = _$evalrational_183( a ) * ( _$evalrational_183( b )/_$evalrational_183( c ) ); // eslint-disable-line max-len
	ambh = a - 0.5 - b;
	if ( ( _$abs_118( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {
		// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:
		res *= _$exp_314( ambh * _$log1p_558( -b/cgh ) );
	} else {
		res *= _$pow_618( agh/cgh, ambh );
	}
	if ( cgh > 1.0e10 ) {
		// This avoids possible overflow, but appears to be marginally less accurate:
		res *= _$pow_618( (agh/cgh)*(bgh/cgh), b );
	} else {
		res *= _$pow_618( (agh*bgh)/(cgh*cgh), b );
	}
	res *= _$sqrt_703( _$E_55/bgh);
	return res;
}


// EXPORTS //

var _$beta_181 = beta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the beta function.
*
* @module @stdlib/math/base/special/beta
*
* @example
* var beta = require( '@stdlib/math/base/special/beta' );
*
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* v = beta( 1.0, 1.0 );
* // returns 1.0
*
* v = beta( -1.0, 2.0 );
* // returns NaN
*
* v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* v = beta( 4.0, 1.0 );
* // returns 0.25
*
* v = beta( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$beta_181 = require( './beta.js' ); */;


// EXPORTS //

var _$beta_182 = _$beta_181;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the natural logarithm of 2.
*
* @module @stdlib/constants/math/float64-half-ln-two
* @type {number}
*
* @example
* var HALF_LN2 = require( '@stdlib/constants/math/float64-half-ln-two' );
* // returns 3.46573590279972654709e-01
*/

// MAIN //

/**
* One half times the natural logarithm of 2.
*
* ```tex
* \frac{\ln 2}{2}
* ```
*
* @constant
* @type {number}
* @default 3.46573590279972654709e-01
*/
var HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF


// EXPORTS //

var _$HALF_LN2_61 = HALF_LN2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_328( x ) {
	if ( x === 0.0 ) {
		return -0.03333333333333313;
	}
	return -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_328 = __evalpoly_328;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$HALF_LN2_61 = require( '@stdlib/constants/math/float64-half-ln-two' ); */;
/* removed: var _$evalpoly_328 = require( './polyval_q.js' ); */;


// VARIABLES //

var OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF

// High and low words of ln(2):
var __LN2_HI_326 = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000
var __LN2_LO_326 = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76

// 1 / ln(2):
var LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE

// ln(2) * 56:
var LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1

// ln(2) * 1.5:
var LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73


// MAIN //

/**
* Computes `exp(x) - 1`.
*
* ## Method
*
* 1.  Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
*
*     ```tex
*     x = k \cdot \ln(2) + r
*     ```
*
*     where
*
*     ```tex
*     |r| \leq \frac{\ln(2)}{2} \approx 0.34658
*     ```
*
*     <!-- <note> -->
*
*     A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
*
*     <!-- </note> -->
*
* 2.  To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\(\[0,0.34658]\\). Since
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     ```
*
*     we define \\(\operatorname{R1}(r^2)\\) by
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
*     ```
*
*     That is,
*
*     ```tex
*     \begin{align*}
*     \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
*     &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
*     &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
*
*     ```tex
*     \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
*     ```
*
*     where
*
*     ```tex
*     \begin{align*}
*     \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
*     \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
*     \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
*     \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
*     \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
*     \end{align*}
*     ```
*
*     where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
*
*     ```tex
*     \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
*     ```
*
*     \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
*
*     ```tex
*     \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
*     ```
*
*     To compensate for the error in the argument reduction, we use
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
*     &\approx \operatorname{expm1}(r) + c + rc
*     \end{align*}
*     ```
*
*     Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
*     &= r - \mathrm{E}
*     \end{align*}
*     ```
*
* 3.  To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
*
*     ```tex
*     \operatorname{expm1}(x) = \begin{cases}
*     2^k  (\operatorname{expm1}(r) + 1) - 1 \\
*     2^k (\operatorname{expm1}(r) + (1-2^{-k}))
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{expm1}(\infty) &= \infty \\
* \operatorname{expm1}(-\infty) &= -1 \\
* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
*
* -   To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
*
* -   To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
*
*     -   if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
*
*     -   if \\(k = 0\\), return \\(r-\mathrm{E}\\)
*
*     -   if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
*
*     -   if \\(k = 1\\),
*
*         -   if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
*         -   else return \\(1+2(r-\mathrm{E})\\)
*
*     -   if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
*
*     -   if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
*
*     -   else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)
*
* -   For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
*
* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1( 0.2 );
* // returns ~0.221
*
* @example
* var v = expm1( -9.0 );
* // returns ~-0.9999
*
* @example
* var v = expm1( 0.0 );
* // returns 0.0
*
* @example
* var v = expm1( NaN );
* // returns NaN
*/
function expm1( x ) {
	var halfX;
	var sign;
	var hi;
	var lo;
	var hx;
	var r1;
	var y;
	var z;
	var c;
	var t;
	var e;
	var k;

	if ( x === _$FLOAT64_PINF_85 || _$isnan_103( x ) ) {
		return x;
	}
	if ( x === _$FLOAT64_NINF_81 ) {
		return -1.0;
	}
	if ( x === 0.0 ) {
		return x; // handles +-0 (IEEE 754-2008)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		sign = true;
		y = -x;
	} else {
		sign = false;
		y = x;
	}
	// Filter out huge and non-finite arguments...
	if ( y >= LN2x56 ) { // if |x| >= 56*ln(2)
		if ( sign ) { // if x <= -56*ln(2)
			return -1.0;
		}
		if ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...
			return _$FLOAT64_PINF_85;
		}
	}
	// Extract the more significant bits from |x|:
	hx = _$getHighWord_762( y )|0; // asm type annotation

	// Argument reduction...
	if ( y > _$HALF_LN2_61 ) { // if |x| > 0.5*ln(2)
		if ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)
			if ( sign ) {
				hi = x + __LN2_HI_326;
				lo = -__LN2_LO_326;
				k = -1;
			} else {
				hi = x - __LN2_HI_326;
				lo = __LN2_LO_326;
				k = 1;
			}
		} else {
			if ( sign ) {
				k = (LN2_INV*x) - 0.5;
			} else {
				k = (LN2_INV*x) + 0.5;
			}
			k |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)
			t = k;
			hi = x - (t*__LN2_HI_326); // t*ln2_hi is exact here
			lo = t * __LN2_LO_326;
		}
		x = hi - lo;
		c = (hi-x) - lo;
	}
	// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54
	else if ( hx < 1016070144 ) {
		return x;
	}
	else {
		k = 0;
	}
	// x is now in primary range...
	halfX = 0.5 * x;
	z = x * halfX;

	r1 = 1.0 + ( z * _$evalpoly_328( z ) );

	t = 3.0 - (r1*halfX);
	e = z * ( (r1-t) / (6.0 - (x*t)) );
	if ( k === 0 ) {
		return x - ( (x*e) - z );	// c is 0
	}
	e = ( x * (e-c) ) - c;
	e -= z;
	if ( k === -1 ) {
		return ( 0.5*(x-e) )- 0.5;
	}
	if ( k === 1 ) {
		if ( x < -0.25 ) {
			return -2.0 * ( e - (x+0.5) );
		}
		return 1 + ( 2.0 * (x-e) );
	}
	if ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1
		y = 1.0 - (e-x);

		// Add k to y's exponent:
		hi = (_$getHighWord_762( y ) + (k<<20))|0; // asm type annotation
		y = _$setHighWord_771( y, hi );

		return y - 1.0;
	}
	t = 1.0;
	if ( k < 20 ) {
		// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000
		hi = (1072693248 - (0x200000>>k))|0; // asm type annotation
		t = _$setHighWord_771( t, hi ); // t=1-2^-k
		y = t - (e-x);
	} else {
		hi = ( (_$FLOAT64_EXPONENT_BIAS_58-k)<<20 )|0; // asm type annotation
		t = _$setHighWord_771( t, hi ); // t=2^-k
		y = x - (e+t);
		y += 1.0;
	}
	// Add k to y's exponent:
	hi = (_$getHighWord_762( y ) + (k<<20))|0; // asm type annotation
	return _$setHighWord_771( y, hi );
}


// EXPORTS //

var _$expm1_326 = expm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `exp(x) - 1`.
*
* @module @stdlib/math/base/special/expm1
*
* @example
* var expm1 = require( '@stdlib/math/base/special/expm1' );
*
* var v = expm1( 0.2 );
* // returns ~0.221
*
* v = expm1( -9.0 );
* // returns ~-0.999
*
* v = expm1( 0.0 );
* // returns 0.0
*
* v = expm1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$expm1_326 = require( './expm1.js' ); */;


// EXPORTS //

var _$expm1_327 = _$expm1_326;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Tests if a numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/
function isPositiveZero( x ) {
	return (x === 0.0 && 1.0/x === _$FLOAT64_PINF_85);
}


// EXPORTS //

var _$isPositiveZero_114 = isPositiveZero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isPositiveZero_114 = require( './is_positive_zero.js' ); */;


// EXPORTS //

var _$isPositiveZero_113 = _$isPositiveZero_114;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveZero_113 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/
function max( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_PINF_85 || y === _$FLOAT64_PINF_85 ) {
			return _$FLOAT64_PINF_85;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isPositiveZero_113( x ) ) {
				return x;
			}
			return y;
		}
		if ( x > y ) {
			return x;
		}
		return y;
	}
	m = _$FLOAT64_NINF_81;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_103( v ) || v === _$FLOAT64_PINF_85 ) {
			return v;
		}
		if ( v > m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			_$isPositiveZero_113( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

var _$max_576 = max;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$max_576 = require( './max.js' ); */;


// EXPORTS //

var _$max_575 = _$max_576;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Tests if a numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/
function isNegativeZero( x ) {
	return (x === 0.0 && 1.0/x === _$FLOAT64_NINF_81);
}


// EXPORTS //

var _$isNegativeZero_108 = isNegativeZero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNegativeZero_108 = require( './is_negative_zero.js' ); */;


// EXPORTS //

var _$isNegativeZero_107 = _$isNegativeZero_108;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeZero_107 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/
function min( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_81 || y === _$FLOAT64_NINF_81 ) {
			return _$FLOAT64_NINF_81;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isNegativeZero_107( x ) ) {
				return x;
			}
			return y;
		}
		if ( x < y ) {
			return x;
		}
		return y;
	}
	m = _$FLOAT64_PINF_85;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_103( v ) || v === _$FLOAT64_NINF_81 ) {
			return v;
		}
		if ( v < m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			_$isNegativeZero_107( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

var _$min_580 = min;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

// MODULES //

/* removed: var _$min_580 = require( './min.js' ); */;


// EXPORTS //

var _$min_579 = _$min_580;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
* // returns 1.7976931348623157e+308
*/


// MAIN //

/**
* Maximum double-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX = 1.7976931348623157e+308;


// EXPORTS //

var _$FLOAT64_MAX_75 = FLOAT64_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
* // returns 2147483647
*/


// MAIN //

/**
* Maximum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/
var INT32_MAX = 2147483647|0; // asm type annotation


// EXPORTS //

var _$INT32_MAX_93 = INT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_531( x ) {
	if ( x === 0.0 ) {
		return 0.0416666666666666;
	}
	return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_531 = __evalpoly_531;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_532( x ) {
	if ( x === 0.0 ) {
		return -2.7557314351390663e-7;
	}
	return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_532 = __evalpoly_532;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_531 = require( './polyval_c13.js' ); */;
/* removed: var _$evalpoly_532 = require( './polyval_c46.js' ); */;


// MAIN //

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * _$evalpoly_531( z );
	r += w * w * _$evalpoly_532( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
}


// EXPORTS //

var _$kernelCos_530 = kernelCos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$kernelCos_530 = require( './kernel_cos.js' ); */;


// EXPORTS //

var _$kernelCos_529 = _$kernelCos_530;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var __S1_534 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var __S2_534 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var __S3_534 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var __S4_534 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var __S5_534 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var __S6_534 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = __S2_534 + (z * (__S3_534 + (z*__S4_534))) + (z * w * (__S5_534 + (z*__S6_534)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (__S1_534 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*__S1_534));
}


// EXPORTS //

var _$kernelSin_534 = kernelSin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$kernelSin_534 = require( './kernel_sin.js' ); */;


// EXPORTS //

var _$kernelSin_533 = _$kernelSin_534;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelCos_529 = require( '@stdlib/math/base/special/kernel-cos' ); */;
/* removed: var _$kernelSin_533 = require( '@stdlib/math/base/special/kernel-sin' ); */;
/* removed: var _$rempio2_635 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_684 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_684 = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var __PIO4_HIGH_WORD_684 = 0x3fe921fb|0; // asm type annotation

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var __SMALL_HIGH_WORD_684 = 0x3e500000|0; // asm type annotation

// Array for storing remainder elements:
var __Y_684 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the sine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |   S    |   C    |    T   |
*     | 1 |   C    |  -S    |  -1/T  |
*     | 2 |  -S    |  -C    |    T   |
*     | 3 |  -C    |   S    |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;

	ix = _$getHighWord_762( x );
	ix &= __ABS_MASK_684;

	// Case: |x| ~< π/4
	if ( ix <= __PIO4_HIGH_WORD_684 ) {
		// Case: |x| ~< 2^-26
		if ( ix < __SMALL_HIGH_WORD_684 ) {
			return x;
		}
		return _$kernelSin_533( x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_684 ) {
		return NaN;
	}
	// Argument reduction...
	n = _$rempio2_635( x, __Y_684 );
	switch ( n & 3 ) {
	case 0:
		return _$kernelSin_533( __Y_684[ 0 ], __Y_684[ 1 ] );
	case 1:
		return _$kernelCos_529( __Y_684[ 0 ], __Y_684[ 1 ] );
	case 2:
		return -_$kernelSin_533( __Y_684[ 0 ], __Y_684[ 1 ] );
	default:
		return -_$kernelCos_529( __Y_684[ 0 ], __Y_684[ 1 ] );
	}
}


// EXPORTS //

var _$sin_684 = sin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sin_684 = require( './sin.js' ); */;


// EXPORTS //

var _$sin_683 = _$sin_684;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two-pi
* @type {number}
*
* @example
* var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
* // returns 2.5066282746310007
*/


// MAIN //

/**
* Square root of the mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 2.5066282746310007
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;


// EXPORTS //

var _$SQRT_TWO_PI_90 = SQRT_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_388( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333334822;
	}
	return 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_388 = __evalpoly_388;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$SQRT_TWO_PI_90 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$evalpoly_388 = require( './polyval_s.js' ); */;


// VARIABLES //

var MAX_STIRLING = 143.01608;


// MAIN //

/**
* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamma( x ) {
	var w;
	var y;
	var v;

	w = 1.0 / x;
	w = 1.0 + ( w * _$evalpoly_388( w ) );
	y = _$exp_314( x );

	// Check `x` to avoid `pow()` overflow...
	if ( x > MAX_STIRLING ) {
		v = _$pow_618( x, ( 0.5*x ) - 0.25 );
		y = v * (v/y);
	} else {
		y = _$pow_618( x, x-0.5 ) / y;
	}
	return _$SQRT_TWO_PI_90 * y * w;
}


// EXPORTS //

var _$gamma_391 = gamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The Euler-Mascheroni constant.
*
* @module @stdlib/constants/math/float64-eulergamma
* @type {number}
*
* @example
* var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
* // returns 0.5772156649015329
*/


// MAIN //

/**
* The Euler-Mascheroni constant.
*
* @constant
* @type {number}
* @default 0.5772156649015329
* @see [OEIS]{@link http://oeis.org/A001620}
* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
*/
var GAMMA = 0.577215664901532860606512090082402431042;


// EXPORTS //

var _$GAMMA_57 = GAMMA;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$GAMMA_57 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Evaluates the gamma function using a small-value approximation.
*
* @private
* @param {number} x - input value
* @param {number} z - scale factor
* @returns {number} function value
*/
function __gamma_390( x, z ) {
	return z / ( (1.0+( _$GAMMA_57*x )) * x );
}


// EXPORTS //

var _$gamma_390 = __gamma_390;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_389( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len
		s2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_389 = __evalrational_389;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isNegativeZero_107 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$gamma_391 = require( './stirling_approximation.js' ); */;
/* removed: var _$gamma_390 = require( './small_approximation.js' ); */;
/* removed: var _$evalrational_389 = require( './rational_pq.js' ); */;


// MAIN //

/**
* Evaluates the gamma function.
*
* ## Method
*
* 1.  Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
* 2.  Large negative arguments are made positive using a reflection formula.
* 3.  Large arguments are handled by Stirling's formula.
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain    | # trials | peak    | rms     |
*     |:----------:|:---------:|:--------:|:-------:|:-------:|
*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
*
* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gamma( 4.0 );
* // returns 6.0
*
* @example
* var v = gamma( -1.5 );
* // returns ~2.363
*
* @example
* var v = gamma( -0.5 );
* // returns ~-3.545
*
* @example
* var v = gamma( 0.5 );
* // returns ~1.772
*
* @example
* var v = gamma( 0.0 );
* // returns Infinity
*
* @example
* var v = gamma( -0.0 );
* // returns -Infinity
*
* @example
* var v = gamma( NaN );
* // returns NaN
*/
function __gamma_386( x ) {
	var sign;
	var q;
	var p;
	var z;
	if (
		(_$isInteger_101( x ) && x < 0) ||
		x === _$FLOAT64_NINF_81 ||
		_$isnan_103( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( _$isNegativeZero_107( x ) ) {
			return _$FLOAT64_NINF_81;
		}
		return _$FLOAT64_PINF_85;
	}
	if ( x > 171.61447887182298 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x < -170.5674972726612 ) {
		return 0.0;
	}
	q = _$abs_118( x );
	if ( q > 33.0 ) {
		if ( x >= 0.0 ) {
			return _$gamma_391( x );
		}
		p = _$floor_346( q );

		// Check whether `x` is even...
		if ( (p&1) === 0 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		z = q - p;
		if ( z > 0.5 ) {
			p += 1.0;
			z = q - p;
		}
		z = q * _$sin_683( _$PI_84 * z );
		return sign * _$PI_84 / ( _$abs_118(z)*_$gamma_391(q) );
	}
	// Reduce `x`...
	z = 1.0;
	while ( x >= 3.0 ) {
		x -= 1.0;
		z *= x;
	}
	while ( x < 0.0 ) {
		if ( x > -1.0e-9 ) {
			return _$gamma_390( x, z );
		}
		z /= x;
		x += 1.0;
	}
	while ( x < 2.0 ) {
		if ( x < 1.0e-9 ) {
			return _$gamma_390( x, z );
		}
		z /= x;
		x += 1.0;
	}
	if ( x === 2.0 ) {
		return z;
	}
	x -= 2.0;
	return z * _$evalrational_389( x );
}


// EXPORTS //

var _$gamma_386 = __gamma_386;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the gamma function.
*
* @module @stdlib/math/base/special/gamma
*
* @example
* var gamma = require( '@stdlib/math/base/special/gamma' );
*
* var v = gamma( 4.0 );
* // returns 6.0
*
* v = gamma( -1.5 );
* // returns ~2.363
*
* v = gamma( -0.5 );
* // returns ~-3.545
*
* v = gamma( 0.5 );
* // returns ~1.772
*
* v = gamma( 0.0 );
* // returns Infinity
*
* v = gamma( -0.0 );
* // returns -Infinity
*
* v = gamma( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gamma_386 = require( './gamma.js' ); */;


// EXPORTS //

var _$gamma_387 = _$gamma_386;

var _$factorials_332=[
	1,
	1,
	2,
	6,
	24,
	120,
	720,
	5040,
	40320,
	362880.0,
	3628800.0,
	39916800.0,
	479001600.0,
	6227020800.0,
	87178291200.0,
	1307674368000.0,
	20922789888000.0,
	355687428096000.0,
	6402373705728000.0,
	121645100408832000.0,
	0.243290200817664e19,
	0.5109094217170944e20,
	0.112400072777760768e22,
	0.2585201673888497664e23,
	0.62044840173323943936e24,
	0.15511210043330985984e26,
	0.403291461126605635584e27,
	0.10888869450418352160768e29,
	0.304888344611713860501504e30,
	0.8841761993739701954543616e31,
	0.26525285981219105863630848e33,
	0.822283865417792281772556288e34,
	0.26313083693369353016721801216e36,
	0.868331761881188649551819440128e37,
	0.29523279903960414084761860964352e39,
	0.103331479663861449296666513375232e41,
	0.3719933267899012174679994481508352e42,
	0.137637530912263450463159795815809024e44,
	0.5230226174666011117600072241000742912e45,
	0.203978820811974433586402817399028973568e47,
	0.815915283247897734345611269596115894272e48,
	0.3345252661316380710817006205344075166515e50,
	0.1405006117752879898543142606244511569936e52,
	0.6041526306337383563735513206851399750726e53,
	0.265827157478844876804362581101461589032e55,
	0.1196222208654801945619631614956577150644e57,
	0.5502622159812088949850305428800254892962e58,
	0.2586232415111681806429643551536119799692e60,
	0.1241391559253607267086228904737337503852e62,
	0.6082818640342675608722521633212953768876e63,
	0.3041409320171337804361260816606476884438e65,
	0.1551118753287382280224243016469303211063e67,
	0.8065817517094387857166063685640376697529e68,
	0.427488328406002556429801375338939964969e70,
	0.2308436973392413804720927426830275810833e72,
	0.1269640335365827592596510084756651695958e74,
	0.7109985878048634518540456474637249497365e75,
	0.4052691950487721675568060190543232213498e77,
	0.2350561331282878571829474910515074683829e79,
	0.1386831185456898357379390197203894063459e81,
	0.8320987112741390144276341183223364380754e82,
	0.507580213877224798800856812176625227226e84,
	0.3146997326038793752565312235495076408801e86,
	0.1982608315404440064116146708361898137545e88,
	0.1268869321858841641034333893351614808029e90,
	0.8247650592082470666723170306785496252186e91,
	0.5443449390774430640037292402478427526443e93,
	0.3647111091818868528824985909660546442717e95,
	0.2480035542436830599600990418569171581047e97,
	0.1711224524281413113724683388812728390923e99,
	0.1197857166996989179607278372168909873646e101,
	0.8504785885678623175211676442399260102886e102,
	0.6123445837688608686152407038527467274078e104,
	0.4470115461512684340891257138125051110077e106,
	0.3307885441519386412259530282212537821457e108,
	0.2480914081139539809194647711659403366093e110,
	0.188549470166605025498793226086114655823e112,
	0.1451830920282858696340707840863082849837e114,
	0.1132428117820629783145752115873204622873e116,
	0.8946182130782975286851441715398316520698e117,
	0.7156945704626380229481153372318653216558e119,
	0.5797126020747367985879734231578109105412e121,
	0.4753643337012841748421382069894049466438e123,
	0.3945523969720658651189747118012061057144e125,
	0.3314240134565353266999387579130131288001e127,
	0.2817104114380550276949479442260611594801e129,
	0.2422709538367273238176552320344125971528e131,
	0.210775729837952771721360051869938959523e133,
	0.1854826422573984391147968456455462843802e135,
	0.1650795516090846108121691926245361930984e137,
	0.1485715964481761497309522733620825737886e139,
	0.1352001527678402962551665687594951421476e141,
	0.1243841405464130725547532432587355307758e143,
	0.1156772507081641574759205162306240436215e145,
	0.1087366156656743080273652852567866010042e147,
	0.103299784882390592625997020993947270954e149,
	0.9916779348709496892095714015418938011582e150,
	0.9619275968248211985332842594956369871234e152,
	0.942689044888324774562618574305724247381e154,
	0.9332621544394415268169923885626670049072e156,
	0.9332621544394415268169923885626670049072e158,
	0.9425947759838359420851623124482936749562e160,
	0.9614466715035126609268655586972595484554e162,
	0.990290071648618040754671525458177334909e164,
	0.1029901674514562762384858386476504428305e167,
	0.1081396758240290900504101305800329649721e169,
	0.1146280563734708354534347384148349428704e171,
	0.1226520203196137939351751701038733888713e173,
	0.132464181945182897449989183712183259981e175,
	0.1443859583202493582204882102462797533793e177,
	0.1588245541522742940425370312709077287172e179,
	0.1762952551090244663872161047107075788761e181,
	0.1974506857221074023536820372759924883413e183,
	0.2231192748659813646596607021218715118256e185,
	0.2543559733472187557120132004189335234812e187,
	0.2925093693493015690688151804817735520034e189,
	0.339310868445189820119825609358857320324e191,
	0.396993716080872089540195962949863064779e193,
	0.4684525849754290656574312362808384164393e195,
	0.5574585761207605881323431711741977155627e197,
	0.6689502913449127057588118054090372586753e199,
	0.8094298525273443739681622845449350829971e201,
	0.9875044200833601362411579871448208012564e203,
	0.1214630436702532967576624324188129585545e206,
	0.1506141741511140879795014161993280686076e208,
	0.1882677176888926099743767702491600857595e210,
	0.237217324288004688567714730513941708057e212,
	0.3012660018457659544809977077527059692324e214,
	0.3856204823625804217356770659234636406175e216,
	0.4974504222477287440390234150412680963966e218,
	0.6466855489220473672507304395536485253155e220,
	0.8471580690878820510984568758152795681634e222,
	0.1118248651196004307449963076076169029976e225,
	0.1487270706090685728908450891181304809868e227,
	0.1992942746161518876737324194182948445223e229,
	0.269047270731805048359538766214698040105e231,
	0.3659042881952548657689727220519893345429e233,
	0.5012888748274991661034926292112253883237e235,
	0.6917786472619488492228198283114910358867e237,
	0.9615723196941089004197195613529725398826e239,
	0.1346201247571752460587607385894161555836e242,
	0.1898143759076170969428526414110767793728e244,
	0.2695364137888162776588507508037290267094e246,
	0.3854370717180072770521565736493325081944e248,
	0.5550293832739304789551054660550388118e250,
	0.80479260574719919448490292577980627711e252,
	0.1174997204390910823947958271638517164581e255,
	0.1727245890454638911203498659308620231933e257,
	0.2556323917872865588581178015776757943262e259,
	0.380892263763056972698595524350736933546e261,
	0.571338395644585459047893286526105400319e263,
	0.8627209774233240431623188626544191544816e265,
	0.1311335885683452545606724671234717114812e268,
	0.2006343905095682394778288746989117185662e270,
	0.308976961384735088795856467036324046592e272,
	0.4789142901463393876335775239063022722176e274,
	0.7471062926282894447083809372938315446595e276,
	0.1172956879426414428192158071551315525115e279,
	0.1853271869493734796543609753051078529682e281,
	0.2946702272495038326504339507351214862195e283,
	0.4714723635992061322406943211761943779512e285,
	0.7590705053947218729075178570936729485014e287,
	0.1229694218739449434110178928491750176572e290,
	0.2004401576545302577599591653441552787813e292,
	0.3287218585534296227263330311644146572013e294,
	0.5423910666131588774984495014212841843822e296,
	0.9003691705778437366474261723593317460744e298,
	0.1503616514864999040201201707840084015944e301,
	0.2526075744973198387538018869171341146786e303,
	0.4269068009004705274939251888899566538069e305,
	0.7257415615307998967396728211129263114717e307
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$factorials_332 = require( './factorials.json' ); */;


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Evaluates the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} factorial
*
* @example
* var v = factorial( 3.0 );
* // returns 6.0
*
* @example
* var v = factorial( -1.5 );
* // returns ~-3.545
*
* @example
* var v = factorial( -0.5 );
* // returns ~1.772
*
* @example
* var v = factorial( 0.5 );
* // returns ~0.886
*
* @example
* var v = factorial( -10.0 );
* // returns NaN
*
* @example
* var v = factorial( 171.0 );
* // returns Infinity
*
* @example
* var v = factorial( NaN );
* // returns NaN
*/
function factorial( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( _$isInteger_101( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_FACTORIAL ) {
			return _$factorials_332[ x ];
		}
		return _$FLOAT64_PINF_85;
	}
	return _$gamma_387( x + 1.0 );
}


// EXPORTS //

var _$factorial_331 = factorial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the factorial function.
*
* @module @stdlib/math/base/special/factorial
*
* @example
* var factorial = require( '@stdlib/math/base/special/factorial' );
*
* var v = factorial( 3.0 );
* // returns 6.0
*
* v = factorial( -1.5 );
* // returns ~-3.545
*
* v = factorial( -0.5 );
* // returns ~1.772
*
* v = factorial( 0.5 );
* // returns ~0.886
*
* v = factorial( -10.0 );
* // returns NaN
*
* v = factorial( 171.0 );
* // returns Infinity
*
* v = factorial( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$factorial_331 = require( './factorial.js' ); */;


// EXPORTS //

var _$factorial_333 = _$factorial_331;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_385( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_385 = __evalrational_385;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Calculates the Lanczos sum approximation.
*
* @name gammaLanczosSum
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* @example
* var v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* @example
* var v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* @example
* var v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* @example
* var v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSum( NaN );
* // returns NaN
*/
/* removed: var _$evalrational_385 = require( './rational_pq.js' ); */;


// EXPORTS //

var _$gammaLanczosSum_383 = _$evalrational_385;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate the Lanczos sum for the approximation of the gamma function.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum
*
* @example
* var gammaLanczosSum = require( '@stdlib/math/base/special/gamma-lanczos-sum' );
*
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSum( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaLanczosSum_383 = require( './gamma_lanczos_sum.js' ); */;


// EXPORTS //

var _$gammaLanczosSum_384 = _$gammaLanczosSum_383;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @module @stdlib/constants/math/float64-gamma-lanczos-g
* @type {number}
*
* @example
* var FLOAT64_GAMMA_LANCZOS_G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
* // returns 10.900511
*/


// MAIN //

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @constant
* @type {number}
* @default 10.900511
* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}
*/
var FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;


// EXPORTS //

var _$FLOAT64_GAMMA_LANCZOS_G_60 = FLOAT64_GAMMA_LANCZOS_G;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSum_384 = require( '@stdlib/math/base/special/gamma-lanczos-sum' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$E_55 = require( '@stdlib/constants/math/float64-e' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_60 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;


// VARIABLES //

var __MAX_FACTORIAL_378 = 170; // TODO: consider moving to pkg
var FACTORIAL_169 = 4.269068009004705e+304;


// MAIN //

/**
* Calculates the ratio of two gamma functions via Lanczos approximation.
*
* ## Notes
*
* -   When \\( z < \epsilon \\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:
*
*     ```tex
*     \begin{align*}
*     G(z) / G(L) &= 1 / (z \cdot G(L)) ; z < \eps, L = z + \delta = \delta \\
*     z * G(L) &= z * G(lim) \cdot (G(L)/G(lim)) ; lim = \text{largest factorial}
*     \end{align*}
*     ```
*
* @private
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*/
function gammaDeltaRatioLanczos( z, delta ) {
	var result;
	var ratio;
	var zgh;

	if ( z < _$FLOAT64_EPSILON_56 ) {
		if ( delta > __MAX_FACTORIAL_378 ) {
			ratio = gammaDeltaRatioLanczos( delta, __MAX_FACTORIAL_378-delta );
			ratio *= z;
			ratio *= FACTORIAL_169;
			return 1.0 / ratio;
		}
		return 1.0 / ( z * _$gamma_387( z+delta ) );
	}
	zgh = z + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
	if ( z + delta === z ) {
		if ( _$abs_118(delta) < 10.0 ) {
			result = _$exp_314( ( 0.5-z ) * _$log1p_558( delta/zgh ) );
		} else {
			result = 1.0;
		}
	} else {
		if ( _$abs_118(delta) < 10.0 ) {
			result = _$exp_314( ( 0.5-z ) * _$log1p_558( delta/zgh ));
		} else {
			result = _$pow_618( zgh / (zgh+delta), z-0.5 );
		}
		// Split up the calculation to avoid spurious overflow:
		result *= _$gammaLanczosSum_384( z ) / _$gammaLanczosSum_384( z + delta );
	}
	result *= _$pow_618( _$E_55 / ( zgh+delta ), delta );
	return result;
}


// EXPORTS //

var _$gammaDeltaRatioLanczos_378 = gammaDeltaRatioLanczos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$factorial_333 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$gammaDeltaRatioLanczos_378 = require( './gamma_delta_ratio_lanczos.js' ); */;


// VARIABLES //

var __MAX_FACTORIAL_377 = 170; // TODO: consider moving to pkg


// MAIN //

/**
* Computes the ratio of two gamma functions.
*
* ## Notes
*
* -   Specifically, the function evaluates
*
*     ```tex
*     \frac{ \Gamma( z ) }{ \Gamma( z + \delta ) }
*     ```
*
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*
* @example
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* @example
* var y = gammaDeltaRatio( 4.0, 0.5 );
* // returns ~0.516
*
* @example
* var y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/
function gammaDeltaRatio( z, delta ) {
	var result;
	var idelta;
	var iz;

	if ( z <= 0.0 || z + delta <= 0.0 ) {
		// This isn't very sophisticated, or accurate, but it does work:
		return _$gamma_387( z ) / _$gamma_387( z + delta );
	}
	idelta = _$floor_346( delta );
	if ( idelta === delta ) {
		iz = _$floor_346( z );
		if ( iz === z ) {
			// As both `z` and `delta` are integers, see if we can use a table lookup:
			if ( z <= __MAX_FACTORIAL_377 && ( z + delta <= __MAX_FACTORIAL_377 ) ) {
				return _$factorial_333( iz - 1.0 ) / _$factorial_333( idelta + iz - 1.0 );
			}
		}
		if ( _$abs_118(delta) < 20.0 ) {
			// As `delta` is a small integer, we can use a finite product:
			if ( delta === 0.0 ) {
				return 1.0;
			}
			if ( delta < 0.0 ) {
				z -= 1.0;
				result = z;
				delta += 1.0;
				while ( delta !== 0.0 ) {
					z -= 1.0;
					result *= z;
					delta += 1.0;
				}
				return result;
			}
			result = 1.0 / z;
			delta -= 1.0;
			while ( delta !== 0.0 ) {
				z += 1.0;
				result /= z;
				delta -= 1.0;
			}
			return result;
		}
	}
	return _$gammaDeltaRatioLanczos_378( z, delta );
}


// EXPORTS //

var _$gammaDeltaRatio_377 = gammaDeltaRatio;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate the ratio of two gamma functions.
*
* @module @stdlib/math/base/special/gamma-delta-ratio
*
* @example
* var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
*
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* y = gammaDeltaRatio( 4.0, 0.5 );
* // returns 2.0
*
* y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$gammaDeltaRatio_377 = require( './gamma_delta_ratio.js' ); */;


// EXPORTS //

var _$gammaDeltaRatio_379 = _$gammaDeltaRatio_377;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelCos_529 = require( '@stdlib/math/base/special/kernel-cos' ); */;
/* removed: var _$kernelSin_533 = require( '@stdlib/math/base/special/kernel-sin' ); */;
/* removed: var _$rempio2_635 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Scratch array for storing temporary values:
var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;

	ix = _$getHighWord_762( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< pi/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: x < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return 1.0;
		}
		return _$kernelCos_529( x, 0.0 );
	}
	// Case: cos(Inf or NaN) is NaN */
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = _$rempio2_635( x, buffer );
	switch ( n & 3 ) {
	case 0:
		return _$kernelCos_529( buffer[ 0 ], buffer[ 1 ] );
	case 1:
		return -_$kernelSin_533( buffer[ 0 ], buffer[ 1 ] );
	case 2:
		return -_$kernelCos_529( buffer[ 0 ], buffer[ 1 ] );
	default:
		return _$kernelSin_533( buffer[ 0 ], buffer[ 1 ] );
	}
}


// EXPORTS //

var _$cos_225 = cos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

// MODULES //

/* removed: var _$cos_225 = require( './cos.js' ); */;


// EXPORTS //

var _$cos_226 = _$cos_225;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Notes:
*	=> sin(-x) = -sin(x)
*	=> sin(+n) = +0, where `n` is a positive integer
*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
*	=> cos(-x) = cos(x)
*/


// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$copysign_224 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the value of `sin(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = sinpi( 0.0 );
* // returns 0.0
*
* @example
* var y = sinpi( 0.5 );
* // returns 1.0
*
* @example
* var y = sinpi( 0.9 );
* // returns ~0.309
*
* @example
* var y = sinpi( NaN );
* // returns NaN
*/
function sinpi( x ) {
	var ar;
	var r;
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) ) {
		return NaN;
	}
	// Argument reduction (reduce to [0,2))...
	r = x % 2.0; // sign preserving
	ar = _$abs_118( r );

	// If `x` is an integer, the mod is an integer...
	if ( ar === 0.0 || ar === 1.0 ) {
		return _$copysign_224( 0.0, r );
	}
	if ( ar < 0.25 ) {
		return _$sin_683( _$PI_84*r );
	}
	// In each of the following, we further reduce to [-π/4,π/4)...
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		return _$copysign_224( _$cos_226( _$PI_84*ar ), r );
	}
	if ( ar < 1.25 ) {
		r = _$copysign_224( 1.0, r ) - r;
		return _$sin_683( _$PI_84*r );
	}
	if ( ar < 1.75 ) {
		ar -= 1.5;
		return -_$copysign_224( _$cos_226( _$PI_84*ar ), r );
	}
	r -= _$copysign_224( 2.0, r );
	return _$sin_683( _$PI_84*r );
}


// EXPORTS //

var _$sinpi_698 = sinpi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the value of `sin(πx)`.
*
* @module @stdlib/math/base/special/sinpi
*
* @example
* var sinpi = require( '@stdlib/math/base/special/sinpi' );
*
* var y = sinpi( 0.0 );
* // returns 0.0
*
* y = sinpi( 0.5 );
* // returns 1.0
*
* y = sinpi( 0.9 );
* // returns ~0.309
*
* y = sinpi( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinpi_698 = require( './sinpi.js' ); */;


// EXPORTS //

var _$sinpi_697 = _$sinpi_698;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_446( x ) {
	if ( x === 0.0 ) {
		return 0.06735230105312927;
	}
	return 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_446 = __evalpoly_446;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_447( x ) {
	if ( x === 0.0 ) {
		return 0.020580808432516733;
	}
	return 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_447 = __evalpoly_447;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_448( x ) {
	if ( x === 0.0 ) {
		return 1.3920053346762105;
	}
	return 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_448 = __evalpoly_448;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_449( x ) {
	if ( x === 0.0 ) {
		return 0.21498241596060885;
	}
	return 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_449 = __evalpoly_449;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_450( x ) {
	if ( x === 0.0 ) {
		return -0.032788541075985965;
	}
	return -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_450 = __evalpoly_450;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_451( x ) {
	if ( x === 0.0 ) {
		return 0.01797067508118204;
	}
	return 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_451 = __evalpoly_451;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_452( x ) {
	if ( x === 0.0 ) {
		return -0.010314224129834144;
	}
	return -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_452 = __evalpoly_452;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_453( x ) {
	if ( x === 0.0 ) {
		return 0.6328270640250934;
	}
	return 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_453 = __evalpoly_453;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_454( x ) {
	if ( x === 0.0 ) {
		return 2.4559779371304113;
	}
	return 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_454 = __evalpoly_454;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_455( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333297;
	}
	return 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_455 = __evalpoly_455;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$sinpi_697 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalpoly_446 = require( './polyval_a1.js' ); */;
/* removed: var _$evalpoly_447 = require( './polyval_a2.js' ); */;
/* removed: var _$evalpoly_448 = require( './polyval_r.js' ); */;
/* removed: var _$evalpoly_449 = require( './polyval_s.js' ); */;
/* removed: var _$evalpoly_450 = require( './polyval_t1.js' ); */;
/* removed: var _$evalpoly_451 = require( './polyval_t2.js' ); */;
/* removed: var _$evalpoly_452 = require( './polyval_t3.js' ); */;
/* removed: var _$evalpoly_453 = require( './polyval_u.js' ); */;
/* removed: var _$evalpoly_454 = require( './polyval_v.js' ); */;
/* removed: var _$evalpoly_455 = require( './polyval_w.js' ); */;


// VARIABLES //

var A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8
var A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD
var RC = 1.0;
var SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2
var T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509
var T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B
var UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var VC = 1.0;
var WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69
var YMIN = 1.461632144968362245;
var TWO52 = 4503599627370496; // 2**52
var TWO58 = 288230376151711744; // 2**58
var __TINY_444 = 8.470329472543003e-22;
var TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F
var TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42
var TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function.
*
* ## Method
*
* 1.  Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in \[0,8]\\), we may reduce \\(x\\) to a number in \\(\[1.5,2.5]\\) by
*
*     ```tex
*     \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
*     ```
*
*     For example,
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
*     &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
*     &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
*     \end{align*}
*     ```
*
* 2.  Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\(\[\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\(\[1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
*
*     ```tex
*     \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
*     ```
*
*     where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
*
* 3.  Compute a rational approximation in the primary interval \\(\[2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
*
*     ```tex
*     \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
*     ```
*
*     with accuracy
*
*     ```tex
*     \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
*     ```
*
*     The algorithms are based on the observation
*
*     ```tex
*     \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
*     ```
*
*     where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
*
* 4.  For \\(x \geq 8\\),
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
*     ```
*
*     which can be expressed
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
*     ```
*
*     Let \\(z = \frac{1}{x}\\). We can then use the approximation
*
*     ```tex
*     f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
*     ```
*
*     by
*
*     ```tex
*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
*     ```
*
*     where
*
*     ```tex
*     |w - f(z)| < 2^{-58.74}
*     ```
*
* 5.  For negative \\(x\\), since
*
*     ```tex
*     -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
*     ```
*
*     where \\(\Gamma\\) is the gamma function, we have
*
*     ```tex
*     \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
*     ```
*
*     Since \\(\Gamma(-x)\\) is positive,
*
*     ```tex
*     \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     for \\(x < 0\\). Hence, for \\(x < 0\\),
*
*     ```tex
*     \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     and
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
*     &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
*
*     <!-- </note> -->
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
* \operatorname{lgamma}(1) &= 0 & \\
* \operatorname{lgamma}(2) &= 0 & \\
* \operatorname{lgamma}(0) &= \infty & \\
* \operatorname{lgamma}(\infty) &= \infty & \\
* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammaln( 1.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 2.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 4.0 );
* // returns ~1.792
*
* @example
* var v = gammaln( -0.5 );
* // returns ~1.266
*
* @example
* var v = gammaln( 0.5 );
* // returns ~0.572
*
* @example
* var v = gammaln( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaln( NaN );
* // returns NaN
*/
function gammaln( x ) {
	var isNegative;
	var nadj;
	var flg;
	var p3;
	var p2;
	var p1;
	var p;
	var q;
	var t;
	var w;
	var y;
	var z;
	var r;

	// Special cases: NaN, +-infinity
	if ( _$isnan_103( x ) || _$isInfinite_99( x ) ) {
		return x;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x < 0.0 ) {
		isNegative = true;
		x = -x;
	} else {
		isNegative = false;
	}
	// If |x| < 2**-70, return -ln(|x|)
	if ( x < __TINY_444 ) {
		return -_$ln_545( x );
	}
	if ( isNegative ) {
		// If |x| >= 2**52, must be -integer
		if ( x >= TWO52 ) {
			return _$FLOAT64_PINF_85;
		}
		t = _$sinpi_697( x );
		if ( t === 0.0 ) {
			return _$FLOAT64_PINF_85;
		}
		nadj = _$ln_545( _$PI_84 / _$abs_118( t*x ) );
	}
	// If x equals 1 or 2, return 0
	if ( x === 1.0 || x === 2.0 ) {
		return 0.0;
	}
	// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)
	if ( x < 2.0 ) {
		if ( x <= 0.9 ) {
			r = -_$ln_545( x );

			// 0.7316 <= x <=  0.9
			if ( x >= ( YMIN - 1.0 + 0.27 ) ) {
				y = 1.0 - x;
				flg = 0;
			}
			// 0.2316 <= x < 0.7316
			else if ( x >= (YMIN - 1.0 - 0.27) ) {
				y = x - (TC - 1.0);
				flg = 1;
			}
			// 0 < x < 0.2316
			else {
				y = x;
				flg = 2;
			}
		} else {
			r = 0.0;

			// 1.7316 <= x < 2
			if ( x >= (YMIN + 0.27) ) {
				y = 2.0 - x;
				flg = 0;
			}
			// 1.2316 <= x < 1.7316
			else if ( x >= (YMIN - 0.27) ) {
				y = x - TC;
				flg = 1;
			}
			// 0.9 < x < 1.2316
			else {
				y = x - 1.0;
				flg = 2;
			}
		}
		switch ( flg ) { // eslint-disable-line default-case
		case 0:
			z = y * y;
			p1 = A1C + (z*_$evalpoly_446( z ));
			p2 = z * (A2C + (z*_$evalpoly_447( z )));
			p = (y*p1) + p2;
			r += ( p - (0.5*y) );
			break;
		case 1:
			z = y * y;
			w = z * y;
			p1 = T1C + (w*_$evalpoly_450( w ));
			p2 = T2C + (w*_$evalpoly_451( w ));
			p3 = T3C + (w*_$evalpoly_452( w ));
			p = (z*p1) - (TT - (w*(p2+(y*p3))));
			r += ( TF + p );
			break;
		case 2:
			p1 = y * (UC + (y*_$evalpoly_453( y )));
			p2 = VC + (y*_$evalpoly_454( y ));
			r += (-0.5*y) + (p1/p2);
			break;
		}
	}
	// 2 <= x < 8
	else if ( x < 8.0 ) {
		flg = _$trunc_719( x );
		y = x - flg;
		p = y * (SC + (y*_$evalpoly_449( y )));
		q = RC + (y*_$evalpoly_448( y ));
		r = (0.5*y) + (p/q);
		z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)
		switch ( flg ) { // eslint-disable-line default-case
		case 7:
			z *= y + 6.0;

			/* falls through */
		case 6:
			z *= y + 5.0;

			/* falls through */
		case 5:
			z *= y + 4.0;

			/* falls through */
		case 4:
			z *= y + 3.0;

			/* falls through */
		case 3:
			z *= y + 2.0;
			r += _$ln_545( z );
		}
	}
	// 8 <= x < 2**58
	else if ( x < TWO58 ) {
		t = _$ln_545( x );
		z = 1.0 / x;
		y = z * z;
		w = WC + (z*_$evalpoly_455( y ));
		r = ((x-0.5)*(t-1.0)) + w;
	}
	// 2**58 <= x <= Inf
	else {
		r = x * ( _$ln_545(x)-1.0 );
	}
	if ( isNegative ) {
		r = nadj - r;
	}
	return r;
}


// EXPORTS //

var _$gammaln_444 = gammaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the gamma function.
*
* @module @stdlib/math/base/special/gammaln
*
* @example
* var gammaln = require( '@stdlib/math/base/special/gammaln' );
*
* var v = gammaln( 1.0 );
* // returns 0.0
*
* v = gammaln( 2.0 );
* // returns 0.0
*
* v = gammaln( 4.0 );
* // returns ~1.792
*
* v = gammaln( -0.5 );
* // returns ~1.266
*
* v = gammaln( 0.5 );
* // returns ~0.572
*
* v = gammaln( 0.0 );
* // returns Infinity
*
* v = gammaln( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaln_444 = require( './gammaln.js' ); */;


// EXPORTS //

var _$gammaln_445 = _$gammaln_444;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/constants/math/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/


// MAIN //

/**
* Square root of double-precision floating-point epsilon.
*
* ```tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;


// EXPORTS //

var _$FLOAT64_SQRT_EPSILON_88 = FLOAT64_SQRT_EPSILON;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-ln
* @type {number}
*
* @example
* var FLOAT64_MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
* // returns 709.782712893384
*/


// MAIN //

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* ## Notes
*
* The natural logarithm of the maximum is given by
*
* ```tex
* \ln \left( 2^{1023} (2 - 2^{-52}) \right)
* ```
*
* @constant
* @type {number}
* @default 709.782712893384
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_LN = 709.782712893384;


// EXPORTS //

var _$FLOAT64_MAX_LN_71 = FLOAT64_MAX_LN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Calculates normalized Q when a is an integer.
*
* @private
* @param {integer} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteGammaQ( a, x ) {
	var term;
	var sum;
	var e;
	var n;

	e = _$exp_314( -x );
	sum = e;
	if ( sum !== 0.0 ) {
		term = sum;
		for ( n = 1; n < a; ++n ) {
			term /= n;
			term *= x;
			sum += term;
		}
	}
	return sum;
}


// EXPORTS //

var _$finiteGammaQ_398 = finiteGammaQ;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_281( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_281 = __evalpoly_281;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_291( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_291 = __evalpoly_291;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_283( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_283 = __evalpoly_283;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_293( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_293 = __evalpoly_293;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_280( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_280 = __evalpoly_280;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_290( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_290 = __evalpoly_290;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_282( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_282 = __evalpoly_282;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_292( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_292 = __evalpoly_292;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_284( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_284 = __evalpoly_284;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_294( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_294 = __evalpoly_294;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_286( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_286 = __evalpoly_286;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_296( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_296 = __evalpoly_296;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_285( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_285 = __evalpoly_285;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_295( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_295 = __evalpoly_295;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_287( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_287 = __evalpoly_287;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_297( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_297 = __evalpoly_297;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_291 = require( './polyval_pp.js' ); */;
/* removed: var _$evalpoly_293 = require( './polyval_qq.js' ); */;
/* removed: var _$evalpoly_290 = require( './polyval_pa.js' ); */;
/* removed: var _$evalpoly_292 = require( './polyval_qa.js' ); */;
/* removed: var _$evalpoly_294 = require( './polyval_ra.js' ); */;
/* removed: var _$evalpoly_296 = require( './polyval_sa.js' ); */;
/* removed: var _$evalpoly_295 = require( './polyval_rb.js' ); */;
/* removed: var _$evalpoly_297 = require( './polyval_sb.js' ); */;


// VARIABLES //

var __TINY_288 = 1.0e-300;

// 2**-56 = 1/(2**56) = 1/72057594037927940
var __SMALL_288 = 1.3877787807814457e-17;

var ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var QQC = 1.0;

var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var QAC = 1.0;

var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var SAC = 1.0;

var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var SBC = 1.0;


// MAIN //

/**
* Evaluates the complementary error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* @example
* var y = erfc( -1.0 );
* // returns ~1.8427
*
* @example
* var y = erfc( 0.0 );
* // returns 1.0
*
* @example
* var y = erfc( Infinity );
* // returns 0.0
*
* @example
* var y = erfc( -Infinity );
* // returns 2.0
*
* @example
* var y = erfc( NaN );
* // returns NaN
*/
function erfc( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === _$FLOAT64_PINF_85 ) {
		return 0.0;
	}
	// Special case: -infinity
	if ( x === _$FLOAT64_NINF_81 ) {
		return 2.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < __SMALL_288 ) {
			return 1.0 - x; // raise inexact
		}
		z = x * x;
		r = PPC + ( z*_$evalpoly_291( z ) );
		s = QQC + ( z*_$evalpoly_293( z ) );
		y = r / s;

		// x < 1/4
		if ( x < 0.25 ) {
			return 1.0 - ( x + (x*y) );
		}
		r = x * y;
		r += x - 0.5;
		return 0.5 - r;
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*_$evalpoly_290( s ) );
		q = QAC + ( s*_$evalpoly_292( s ) );
		if ( sign ) {
			return 1.0 + ERX + (p/q);
		}
		return 1.0 - ERX - (p/q);
	}
	// |x| < 28
	if ( ax < 28.0 ) {
		s = 1.0 / (ax*ax);

		// |x| < 1/0.35 ~ 2.857143
		if ( ax < 2.857142857142857 ) {
			r = RAC + ( s*_$evalpoly_294( s ) );
			s = SAC + ( s*_$evalpoly_296( s ) );
		}
		// |x| >= 1/0.35 ~ 2.857143
		else {
			// x < -6
			if ( x < -6.0 ) {
				return 2.0 - __TINY_288; // raise inexact
			}
			r = RBC + ( s*_$evalpoly_295( s ) );
			s = SBC + ( s*_$evalpoly_297( s ) );
		}
		z = _$setLowWord_773( ax, 0 ); // pseudo-single (20-bit) precision x
		r = _$exp_314( -(z*z) - 0.5625 ) * _$exp_314( ((z-ax)*(z+ax)) + (r/s) );
		if ( sign ) {
			return 2.0 - (r/ax);
		}
		return r/ax;
	}
	if ( sign ) {
		return 2.0 - __TINY_288; // raise inexact; ~2
	}
	return __TINY_288 * __TINY_288; // raise inexact; ~0
}


// EXPORTS //

var _$erfc_288 = erfc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the complementary error function.
*
* @module @stdlib/math/base/special/erfc
*
* @example
* var erfc = require( '@stdlib/math/base/special/erfc' );
*
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* y = erfc( -1.0 );
* // returns ~1.8427
*
* y = erfc( 0.0 );
* // returns 1.0
*
* y = erfc( Infinity );
* // returns 0.0
*
* y = erfc( -Infinity );
* // returns 2.0
*
* y = erfc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfc_288 = require( './erfc.js' ); */;


// EXPORTS //

var _$erfc_289 = _$erfc_288;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$erfc_289 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Calculates normalized Q when a is a half-integer.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteHalfGammaQ( a, x ) {
	var half;
	var term;
	var sum;
	var e;
	var n;

	e = _$erfc_289( _$sqrt_703(x) );
	if ( e !== 0 && a > 1.0 ) {
		term = _$exp_314( -x ) / _$sqrt_703( _$PI_84 * x );
		term *= x;
		half = 0.5;
		term /= half;
		sum = term;
		for ( n = 2; n < a; ++n ) {
			term /= n - half;
			term *= x;
			sum += term;
		}
		e += sum;
	}
	return e;
}


// EXPORTS //

var _$finiteHalfGammaQ_399 = finiteHalfGammaQ;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-ln
* @type {number}
*
* @example
* var FLOAT64_MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
* // returns -708.3964185322641
*/


// MAIN //

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -\ln \left( 2^{1023-1} \right)
* ```
*
* @constant
* @type {number}
* @default -708.3964185322641
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_LN = -708.3964185322641;


// EXPORTS //

var _$FLOAT64_MIN_LN_80 = FLOAT64_MIN_LN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_80 = require( '@stdlib/constants/math/float64-min-ln' ); */;


// MAIN //

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function fullIGammaPrefix( a, z ) {
	var prefix;
	var alz;

	alz = a * _$ln_545( z );
	if ( z >= 1.0 ) {
		if ( ( alz < _$FLOAT64_MAX_LN_71 ) && ( -z > _$FLOAT64_MIN_LN_80 ) ) {
			prefix = _$pow_618( z, a ) * _$exp_314( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = _$pow_618( z / _$exp_314(z/a), a );
		}
		else {
			prefix = _$exp_314( alz - z );
		}
	}
	else {
		/* eslint-disable no-lonely-if */
		if ( alz > _$FLOAT64_MIN_LN_80 ) {
			prefix = _$pow_618( z, a ) * _$exp_314( -z );
		}
		else if ( z/a < _$FLOAT64_MAX_LN_71 ) {
			prefix = _$pow_618( z / _$exp_314(z/a), a );
		} else {
			prefix = _$exp_314( alz - z );
		}
	}
	return prefix;
}


// EXPORTS //

var _$fullIGammaPrefix_400 = fullIGammaPrefix;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_787 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnly( obj, prop, value ) {
	_$defineProperty_787( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

var _$setNonEnumerableReadOnly_785 = setNonEnumerableReadOnly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_785 = require( './main.js' ); */;


// EXPORTS //

var _$setNonEnumerableReadOnly_784 = _$setNonEnumerableReadOnly_785;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function __evalpoly_748( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
}


// EXPORTS //

var _$evalpoly_748 = __evalpoly_748;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_748 = require( './evalpoly.js' ); */;


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* ## Notes
*
* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return _$evalpoly_748( c, x );
	}
}


// EXPORTS //

var _$factory_749 = factory;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_784 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$evalpoly_748 = require( './evalpoly.js' ); */;
/* removed: var _$factory_749 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_784( _$evalpoly_748, 'factory', _$factory_749 );


// EXPORTS //

var _$evalpoly_750 = _$evalpoly_748;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-two-pi
* @type {number}
*
* @example
* var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
* // returns 6.283185307179586
*/


// MAIN //

/**
* The mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 6.283185307179586
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len


// EXPORTS //

var _$TWO_PI_92 = TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_406( x ) {
	if ( x === 0.0 ) {
		return -0.3333333333333333;
	}
	return -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_406 = __evalpoly_406;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_407( x ) {
	if ( x === 0.0 ) {
		return -0.001851851851851852;
	}
	return -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_407 = __evalpoly_407;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_408( x ) {
	if ( x === 0.0 ) {
		return 0.004133597883597883;
	}
	return 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_408 = __evalpoly_408;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_409( x ) {
	if ( x === 0.0 ) {
		return 0.0006494341563786008;
	}
	return 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_409 = __evalpoly_409;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_410( x ) {
	if ( x === 0.0 ) {
		return -0.0008618882909167117;
	}
	return -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_410 = __evalpoly_410;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_411( x ) {
	if ( x === 0.0 ) {
		return -0.00033679855336635813;
	}
	return -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_411 = __evalpoly_411;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_412( x ) {
	if ( x === 0.0 ) {
		return 0.0005313079364639922;
	}
	return 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_412 = __evalpoly_412;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_413( x ) {
	if ( x === 0.0 ) {
		return 0.00034436760689237765;
	}
	return 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_413 = __evalpoly_413;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_414( x ) {
	if ( x === 0.0 ) {
		return -0.0006526239185953094;
	}
	return -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_414 = __evalpoly_414;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$erfc_289 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$TWO_PI_92 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$evalpoly_406 = require( './polyval_c0.js' ); */;
/* removed: var _$evalpoly_407 = require( './polyval_c1.js' ); */;
/* removed: var _$evalpoly_408 = require( './polyval_c2.js' ); */;
/* removed: var _$evalpoly_409 = require( './polyval_c3.js' ); */;
/* removed: var _$evalpoly_410 = require( './polyval_c4.js' ); */;
/* removed: var _$evalpoly_411 = require( './polyval_c5.js' ); */;
/* removed: var _$evalpoly_412 = require( './polyval_c6.js' ); */;
/* removed: var _$evalpoly_413 = require( './polyval_c7.js' ); */;
/* removed: var _$evalpoly_414 = require( './polyval_c8.js' ); */;


// VARIABLES //

// Pre-allocate workspace array:
var workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} value of asymptotic expansion
*/
function igammaTemmeLarge( a, x ) {
	var result;
	var sigma;
	var phi;
	var y;
	var z;

	sigma = ( x-a ) / a;
	phi = -_$ln_545( 1.0 + sigma ) + sigma;
	y = a * phi;
	z = _$sqrt_703( 2.0 * phi );
	if ( x < a ) {
		z = -z;
	}
	workspace[ 0 ] = _$evalpoly_406( z );
	workspace[ 1 ] = _$evalpoly_407( z );
	workspace[ 2 ] = _$evalpoly_408( z );
	workspace[ 3 ] = _$evalpoly_409( z );
	workspace[ 4 ] = _$evalpoly_410( z );
	workspace[ 5 ] = _$evalpoly_411( z );
	workspace[ 6 ] = _$evalpoly_412( z );
	workspace[ 7 ] = _$evalpoly_413( z );
	workspace[ 8 ] = _$evalpoly_414( z );
	workspace[ 9 ] = -0.00059676129019274625;
	result = _$evalpoly_750( workspace, 1.0/a );
	result *= _$exp_314( -y ) / _$sqrt_703( _$TWO_PI_92 * a );
	if ( x < a ) {
		result = -result;
	}
	result += _$erfc_289( _$sqrt_703(y) ) / 2.0;
	return result;
}


// EXPORTS //

var _$igammaTemmeLarge_402 = igammaTemmeLarge;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Alias for `eval` global.
*
* @module @stdlib/utils/eval
*
* @example
* var evil = require( '@stdlib/utils/eval' );
*
* var v = evil( '5*4*3*2*1' );
* // returns 120
*/

// MODULES //

var evil = eval; // eslint-disable-line no-eval


// EXPORTS //

var _$evil_791 = evil;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$evil_791 = require( '@stdlib/utils/eval' ); */;


// MAIN //

/**
* Tests for native `function*()` support.
*
* @returns {boolean} boolean indicating if an environment has native `function*()` support
*
* @example
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/
function hasGeneratorSupport() {
	var bool;
	try {
		_$evil_791( '"use strict"; (function* () {})' );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasGeneratorSupport_20 = hasGeneratorSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `function*()` support.
*
* @module @stdlib/assert/has-generator-support
*
* @example
* var hasGeneratorSupport = require( '@stdlib/assert/has-generator-support' );
*
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasGeneratorSupport_20 = require( './main.js' ); */;


// EXPORTS //

var _$hasGeneratorSupport_19 = _$hasGeneratorSupport_20;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var MAX_TERMS = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesGenerator( 0.9 );
* var out = sumSeries( gen );
* // returns 10.0
*
* function* geometricSeriesGenerator( x ) {
*     var exponent = 0;
*     while ( true ) {
*         yield Math.pow( x, exponent );
*         exponent += 1;
*     }
* }
*/
function sumSeries( generator, options ) {
	var isgenerator;
	var tolerance;
	var nextTerm;
	var counter;
	var result;
	var opts;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || _$FLOAT64_EPSILON_56;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	isgenerator = typeof generator.next === 'function';
	if ( isgenerator === true ) {
		// Case A: Iterate over generator object created by a generator function...
		for ( nextTerm of generator ) {
			result += nextTerm;
			if (
				_$abs_118(tolerance * result) >= _$abs_118(nextTerm) ||
				--counter === 0 // eslint-disable-line no-plusplus
			) {
				break;
			}
		}
	} else {
		// Case B: Repeatedly call function...
		do {
			nextTerm = generator();
			result += nextTerm;
		}
		while ( ( _$abs_118(tolerance * result) < _$abs_118(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus
	}
	return result;
}


// EXPORTS //

var _$sumSeries_752 = sumSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var __MAX_TERMS_751 = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10.0
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/
function __sumSeries_751( generator, options ) {
	var tolerance;
	var nextTerm;
	var counter;
	var result;
	var opts;

	opts = {};

	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || _$FLOAT64_EPSILON_56;
	counter = opts.maxTerms || __MAX_TERMS_751;
	result = opts.initialValue || 0;

	// Repeatedly call function...
	do {
		nextTerm = generator();
		result += nextTerm;
	}
	while ( ( _$abs_118(tolerance * result) < _$abs_118(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus

	return result;
}


// EXPORTS //

var _$sumSeries_751 = __sumSeries_751;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Sum the elements of the series given by the supplied function.
*
* @module @stdlib/math/base/tools/sum-series
*
* @example
* var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
*
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/

// MODULES //

/* removed: var _$hasGeneratorSupport_19 = require( '@stdlib/assert/has-generator-support' ); */;
/* removed: var _$sumSeries_752 = require( './generators.js' ); */;
/* removed: var _$sumSeries_751 = require( './basic.js' ); */;


// MAIN //

var __sumSeries_753;
if ( _$hasGeneratorSupport_19() ) {
	__sumSeries_753 = _$sumSeries_752;
} else {
	__sumSeries_753 = _$sumSeries_751;
}


// EXPORTS //

var _$sumSeries_753 = __sumSeries_753;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Creates a function to evaluate a series expansion of the incomplete gamma function.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function lowerIncompleteGammaSeries( a1, z1 ) {
	var result = 1.0;
	var a = a1;
	var z = z1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result;
		a += 1.0;
		result *= z/a;
		return r;
	}
}


// EXPORTS //

var _$lowerIncompleteGammaSeries_405 = lowerIncompleteGammaSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sumSeries_753 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$lowerIncompleteGammaSeries_405 = require( './lower_incomplete_gamma_series' ); */;


// MAIN //

/**
* Sums elements of the series expansion of the lower incomplete gamma function.
*
* ## Method
*
* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.
* -   Divide by `tgamma(a)` to get the normalized value.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @param {number} initialValue - initial value of the resulting sum
* @returns {number} sum of terms of lower gamma series
*/
function lowerGammaSeries( a, z, initialValue ) {
	var result;
	var s;

	initialValue = initialValue || 0.0;
	s = _$lowerIncompleteGammaSeries_405( a, z );
	result = _$sumSeries_753( s, {
		'initialValue': initialValue
	});
	return result;
}


// EXPORTS //

var _$lowerGammaSeries_404 = lowerGammaSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_382( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_382 = __evalrational_382;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Calculates the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @name gammaLanczosSumExpGScaled
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* @example
* var v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* @example
* var v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/
/* removed: var _$evalrational_382 = require( './rational_pq.js' ); */;


// EXPORTS //

var _$gammaLanczosSumExpGScaled_380 = _$evalrational_382;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum-expg-scaled
*
* @example
* var gammaLanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
*
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_380 = require( './gamma_lanczos_sum_expg_scaled.js' ); */;


// EXPORTS //

var _$gammaLanczosSumExpGScaled_381 = _$gammaLanczosSumExpGScaled_380;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_381 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_80 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_60 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_55 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function regularisedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
	d = ( (z - a) - _$FLOAT64_GAMMA_LANCZOS_G_60 + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= _$FLOAT64_MIN_LN_80 ) {
			// Use logs, so should be free of cancellation errors:
			return _$exp_314( ( a * _$ln_545(z) ) - z - _$gammaln_445( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return _$pow_618( z, a ) * _$exp_314( -z ) / _$gamma_387( a );
	}
	if ( _$abs_118(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( _$log1p_558( d ) - d ) ) + ( z * ( 0.5-_$FLOAT64_GAMMA_LANCZOS_G_60 ) / agh );
		prefix = _$exp_314( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * _$ln_545(z / agh);
		amz = a - z;
		if (
			_$min_579(alz, amz) <= _$FLOAT64_MIN_LN_80 ||
			_$max_575(alz, amz) >= _$FLOAT64_MAX_LN_71
		) {
			amza = amz / a;
			if (
				_$min_579(alz, amz)/2.0 > _$FLOAT64_MIN_LN_80 &&
				_$max_575(alz, amz)/2.0 < _$FLOAT64_MAX_LN_71
			) {
				// Compute square root of the result and then square it:
				sq = _$pow_618( z / agh, a / 2.0 ) * _$exp_314( amz / 2.0 );
				prefix = sq * sq;
			}
			else if (
				_$min_579(alz, amz)/4.0 > _$FLOAT64_MIN_LN_80 &&
				_$max_575(alz, amz)/4.0 < _$FLOAT64_MAX_LN_71 &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = _$pow_618( z / agh, a / 4.0 ) * _$exp_314( amz / 4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > _$FLOAT64_MIN_LN_80 &&
				amza < _$FLOAT64_MAX_LN_71
			) {
				prefix = _$pow_618( (z * _$exp_314(amza)) / agh, a );
			}
			else {
				prefix = _$exp_314( alz + amz );
			}
		}
		else
		{
			prefix = _$pow_618( z / agh, a ) * _$exp_314( amz );
		}
	}
	prefix *= _$sqrt_703( agh / _$E_55 ) / _$gammaLanczosSumExpGScaled_381( a );
	return prefix;
}


// EXPORTS //

var _$regularisedGammaPrefix_415 = regularisedGammaPrefix;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;


// MAIN //

/**
* Evaluates `bˣ - 1`.
*
* @param {number} b - base
* @param {number} x - exponent
* @returns {number} function value
*
* @example
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* @example
* var y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* @example
* var y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* @example
* var y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* @example
* var y = powm1( NaN, 3.0 );
* // returns NaN
*
* @example
* var y = powm1( 5.0, NaN );
* // returns NaN
*/
function powm1( b, x ) {
	var y;
	if (
		_$isnan_103( b ) ||
		_$isnan_103( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0
		return 0.0;
	}
	if ( b === 0.0 ) {
		// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1
		return -1.0;
	}
	if ( b < 0.0 && x%2.0 === 0 ) {
		// If `x` is even, recognize that `(-b)**x == (b)**x`...
		b = -b;
	}
	if ( b > 0.0 ) {
		if (
			_$abs_118( x*(b-1.0) ) < 0.5 ||
			_$abs_118( x ) < 0.2
		) {
			// No good/quick approximation for ln(b)*x, so we have to evaluate...
			y = _$ln_545( b ) * x;
			if ( y < 0.5 ) {
				return _$expm1_327( y );
			}
		}
	} else if ( _$trunc_719( x ) !== x ) {
		// Exponentiation would yield a complex result...
		return NaN;
	}
	return _$pow_618( b, x ) - 1.0;
}


// EXPORTS //

var _$powm1_630 = powm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate `bˣ - 1`.
*
* @module @stdlib/math/base/special/powm1
*
* @example
* var powm1 = require( '@stdlib/math/base/special/powm1' );
*
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* y = powm1( NaN, 3.0 );
* // returns NaN
*
* y = powm1( 5.0, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$powm1_630 = require( './powm1.js' ); */;


// EXPORTS //

var _$powm1_629 = _$powm1_630;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_395( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.01803556856784494;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len
		s2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_395 = __evalrational_395;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_396( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.04906224540690395;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len
		s2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_396 = __evalrational_396;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_397( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.029232972183027003;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len
		s2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_397 = __evalrational_397;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$evalrational_395 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_396 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_397 = require( './rational_p3q3.js' ); */;


// VARIABLES //

var Y1 = 0.158963680267333984375;
var Y2 = 0.52815341949462890625;
var Y3 = 0.452017307281494140625;


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function for small arguments.
*
* ## Method
*
* 1.  For \\( z > 2 \\), begin by performing argument reduction until \\( z \\) is in \\(\[2,3)\\). Use the following form:
*
*     ```tex
*     \operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))
*     ```
*
*     where \\( R(z-2) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
* 2.  If \\( z < 1 \\), use recurrence to shift to \\( z \\) in the interval \\(\[1,2\]\\). Then, use one of two approximations: one for \\( z \\) in \\(\[1,1.5\]\\) and one for \\( z \\) in \\(\[1.5,2\]\\):
*
*     -   For \(( z \\) in \\(\[1,1.5\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))
*         ```
*
*         where \\( R(z-1) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*     -   For \\( z \\) in \\(\[1.5,2\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))
*         ```
*
*         where \\( R(2-z) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*
* ## Notes
*
* -   Relative error:
*
*     | function | peak         | maximum deviation |
*     |:--------:|:------------:|:-----------------:|
*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |
*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |
*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |
*
*
* @private
* @param {number} z - input value
* @param {number} zm1 - `z` minus one
* @param {number} zm2 - `z` minus two
* @returns {number} function value
*/
function lgammaSmallImp( z, zm1, zm2 ) {
	var prefix;
	var result;
	var r;
	var R;

	if ( z < _$FLOAT64_EPSILON_56 ) {
		return -_$ln_545( z );
	}
	if ( zm1 === 0.0 || zm2 === 0.0 ) {
		return 0.0;
	}
	result = 0.0;
	if ( z > 2.0 ) {
		if ( z >= 3.0 ) {
			do {
				z -= 1.0;
				zm2 -= 1.0;
				result += _$ln_545(z);
			} while ( z >= 3.0 );
			zm2 = z - 2.0;
		}
		r = zm2 * ( z+1.0 );
		R = _$evalrational_395( zm2 );
		result += ( r*Y1 ) + ( r*R );
		return result;
	}
	if ( z < 1.0 ) {
		result += -_$ln_545(z);
		zm2 = zm1;
		zm1 = z;
		z += 1.0;
	}
	if ( z <= 1.5 ) {
		r = _$evalrational_396( zm1 );
		prefix = zm1 * zm2;
		result += ( prefix*Y2 ) + ( prefix*r );
		return result;
	}
	// Case: 1.5 < z <= 2
	r = zm2 * zm1;
	R = _$evalrational_397( -zm2 );
	result += ( r*Y3 ) + ( r*R );
	return result;
}


// EXPORTS //

var _$lgammaSmallImp_394 = lgammaSmallImp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$lgammaSmallImp_394 = require( './lgamma_small_imp.js' ); */;


// MAIN //

/**
* Computes `gamma(x+1) - 1`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammap1m1( 0.2 );
* // returns ~-0.082
*
* @example
* var v = gammap1m1( -9.2 );
* // returns ~-1.0
*
* @example
* var v = gammap1m1( 0.0 );
* // returns 0.0
*
* @example
* var v = gammap1m1( -3.0 );
* // returns NaN
*
* @example
* var v = gammap1m1( NaN );
* // returns NaN
*/
function gammap1m1( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		if ( x < -0.5 ) {
			// Best method is simply to subtract 1 from gamma:
			return _$gamma_387( 1.0+x ) - 1.0;
		}
		// Use expm1 on the logarithm of gamma:
		return _$expm1_327( -_$log1p_558( x ) + _$lgammaSmallImp_394( x+2.0, x+1.0, x ) );
	}
	if ( x < 2.0 ) {
		// Use expm1 on the logarithm of gamma:
		return _$expm1_327( _$lgammaSmallImp_394( x+1.0, x, x-1.0 ) );
	}
	// Best method is simply to subtract 1 from gamma:
	return _$gamma_387( 1.0+x ) - 1.0;
}


// EXPORTS //

var _$gammap1m1_392 = gammap1m1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `gamma(x+1) - 1` without cancellation errors.
*
* @module @stdlib/math/base/special/gamma1pm1
*
* @example
* var gamma1pm1 = require( '@stdlib/math/base/special/gamma1pm1' );
*
* var v = gamma1pm1( 0.2 );
* // returns ~-0.082
*
* v = gamma1pm1( -5.3 );
* // returns ~-1.102
*
* v = gamma1pm1( 0.0 );
* // returns 0.0
*
* v = gamma1pm1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammap1m1_392 = require( './gamma1pm1.js' ); */;


// EXPORTS //

var _$gamma1pm1_393 = _$gammap1m1_392;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

/**
* Series representation for upper fraction when `z` is small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {Function} series function
*/
function smallGamma2Series( a, x ) {
	var result;
	var apn;
	var n;
	var r;

	result = -x;
	x = -x;
	apn = a + 1.0;
	n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		r = result / apn;
		result *= x;
		n += 1;
		result /= n;
		apn += 1.0;
		return r;
	}
}


// EXPORTS //

var _$smallGamma2Series_416 = smallGamma2Series;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$powm1_629 = require( '@stdlib/math/base/special/powm1' ); */;
/* removed: var _$sumSeries_753 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$gamma1pm1_393 = require( '@stdlib/math/base/special/gamma1pm1' ); */;
/* removed: var _$smallGamma2Series_416 = require( './small_gamma2_series.js' ); */;


// MAIN //

/**
* Compute the full upper fraction (Q) when `a` is very small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated
* @returns {Array} full upper fraction (Q) and pgam
*/
function tgammaSmallUpperPart( a, x, invert ) {
	var initialValue;
	var result;
	var pgam;
	var p;
	var s;

	result = _$gamma1pm1_393( a );
	pgam = ( result + 1.0 ) / a;
	p = _$powm1_629( x, a );
	result -= p;
	result /= a;
	s = _$smallGamma2Series_416( a, x );
	p += 1.0;
	initialValue = ( invert ) ? pgam : 0.0;
	result = -p * _$sumSeries_753( s, {
		'initialValue': (initialValue - result) / p
	});
	if ( invert ) {
		result = -result;
	}
	return [ result, pgam ];
}


// EXPORTS //

var _$tgammaSmallUpperPart_417 = tgammaSmallUpperPart;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive single-precision floating-point normal number.
*
* @module @stdlib/constants/math/float32-smallest-normal
* @type {number}
*
* @example
* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/math/float32-smallest-normal' );
* // returns 1.1754943508222875e-38
*/


// MAIN //

/**
* The smallest positive single-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{127-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000001 00000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 1.1754943508222875e-38
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;


// EXPORTS //

var _$FLOAT32_SMALLEST_NORMAL_54 = FLOAT32_SMALLEST_NORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_54 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var MAX_ITER = 1000000;


// FUNCTIONS //

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionA( gen, factor, maxIter ) {
	var isgenerator;
	var delta;
	var a0;
	var f;
	var C;
	var D;
	var v;

	isgenerator = typeof gen.next === 'function';
	v = ( isgenerator ) ? gen.next().value : gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0.0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_54;
	}
	C = f;
	D = 0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( ( _$abs_118( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( _$abs_118( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return a0 / f;
}

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +    a1
*      ---------------
*      b1 +     a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionB( gen, factor, maxIter ) {
	var isgenerator;
	var delta;
	var f;
	var C;
	var D;
	var v;

	isgenerator = typeof gen.next === 'function';
	v = ( isgenerator ) ? gen.next().value : gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_54;
	}
	C = f;
	D = 0.0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( _$abs_118( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_54;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( _$abs_118( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return f;
}


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator();
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function* generator() {
*    var i = 0;
*    while ( true ) {
*        i++;
*        yield [ i, i ];
*    }
* }
*/
function continuedFraction( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	maxIter = opts.maxIter || MAX_ITER;
	eps = opts.tolerance || _$FLOAT64_EPSILON_56;

	if ( opts.keep ) {
		return continuedFractionB( generator, eps, maxIter );
	}
	return continuedFractionA( generator, eps, maxIter );
}


// EXPORTS //

var _$continuedFraction_746 = continuedFraction;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_54 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;


// VARIABLES //

var __MAX_ITER_745 = 1000000;


// FUNCTIONS //

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function __continuedFractionA_745( gen, factor, maxIter ) {
	var delta;
	var a0;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_54;
	}
	C = f;
	D = 0.0;

	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = _$FLOAT32_SMALLEST_NORMAL_54;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = _$FLOAT32_SMALLEST_NORMAL_54;
			}
			D = 1.0 / D;
			delta = C * D;
			f *= delta;
		}
	} while ( v && ( _$abs_118( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus

	return a0 / f;
}

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +   a1
*      ---------------
*      b1 +   a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function __continuedFractionB_745( gen, factor, maxIter ) {
	var delta;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_54;
	}
	C = f;
	D = 0.0;
	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = _$FLOAT32_SMALLEST_NORMAL_54;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = _$FLOAT32_SMALLEST_NORMAL_54;
			}
			D = 1.0 / D;
			delta = C * D;
			f *= delta;
		}
	} while ( v && ( _$abs_118( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	return f;
}


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/
function __continuedFraction_745( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	eps = opts.tolerance || _$FLOAT64_EPSILON_56;
	maxIter = opts.maxIter || __MAX_ITER_745;

	if ( opts.keep ) {
		return __continuedFractionB_745( generator, eps, maxIter );
	}
	return __continuedFractionA_745( generator, eps, maxIter );
}


// EXPORTS //

var _$continuedFraction_745 = __continuedFraction_745;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate a continued fraction approximation.
*
* @module @stdlib/math/base/tools/continued-fraction
*
* @example
* var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
*
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/

// MODULES //

/* removed: var _$hasGeneratorSupport_19 = require( '@stdlib/assert/has-generator-support' ); */;
/* removed: var _$continuedFraction_746 = require( './generators.js' ); */;
/* removed: var _$continuedFraction_745 = require( './basic.js' ); */;


// MAIN //

var __continuedFraction_747;
if ( _$hasGeneratorSupport_19() ) {
	__continuedFraction_747 = _$continuedFraction_746;
} else {
	__continuedFraction_747 = _$continuedFraction_745;
}


// EXPORTS //

var _$continuedFraction_747 = __continuedFraction_747;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function upperIncompleteGammaFract( a1, z1 ) {
	var z = z1 - a1 + 1.0;
	var a = a1;
	var k = 0;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		k += 1;
		z += 2.0;
		return [
			k * (a - k),
			z
		];
	}
}


// EXPORTS //

var _$upperIncompleteGammaFract_419 = upperIncompleteGammaFract;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$continuedFraction_747 = require( '@stdlib/math/base/tools/continued-fraction' ); */;
/* removed: var _$upperIncompleteGammaFract_419 = require( './upper_incomplete_gamma_fract' ); */;


// MAIN //

/**
* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} function value
*/
function upperGammaFraction( a, z ) {
	var f = _$upperIncompleteGammaFract_419( a, z );
	return 1.0 / ( z - a + 1.0 + _$continuedFraction_747( f ) );
}


// EXPORTS //

var _$upperGammaFraction_418 = upperGammaFraction;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SQRT_EPSILON_88 = require( '@stdlib/constants/math/float64-sqrt-eps' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$SQRT_TWO_PI_90 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$finiteGammaQ_398 = require( './finite_gamma_q.js' ); */;
/* removed: var _$finiteHalfGammaQ_399 = require( './finite_half_gamma_q.js' ); */;
/* removed: var _$fullIGammaPrefix_400 = require( './full_igamma_prefix.js' ); */;
/* removed: var _$igammaTemmeLarge_402 = require( './igamma_temme_large.js' ); */;
/* removed: var _$lowerGammaSeries_404 = require( './lower_gamma_series.js' ); */;
/* removed: var _$regularisedGammaPrefix_415 = require( './regularised_gamma_prefix.js' ); */;
/* removed: var _$tgammaSmallUpperPart_417 = require( './tgamma_small_upper_part.js' ); */;
/* removed: var _$upperGammaFraction_418 = require( './upper_gamma_fraction.js' ); */;


// VARIABLES //

var __MAX_FACTORIAL_401 = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.
*
*
* ## Notes
*
* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.
*
* @param {NonNegativeNumber} x - function parameter
* @param {PositiveNumber} a - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function
* @returns {number} function value
*/
function gammainc( x, a, regularized, upper ) {
	var optimisedInvert;
	var normalized;
	var evalMethod;
	var initValue;
	var isHalfInt;
	var useTemme;
	var isSmallA;
	var invert;
	var result;
	var isInt;
	var sigma;
	var gam;
	var res;
	var fa;
	var g;

	if ( x < 0.0 || a <= 0.0 ) {
		return NaN;
	}
	normalized = ( regularized === void 0 ) ? true : regularized;
	invert = upper;
	result = 0.0;
	if ( a >= __MAX_FACTORIAL_401 && !normalized ) {
		if ( invert && ( a * 4.0 < x ) ) {
			// This is method 4 below, done in logs:
			result = ( a * _$ln_545(x) ) - x;
			result += _$ln_545( _$upperGammaFraction_418( a, x ) );
		}
		else if ( !invert && ( a > 4.0 * x ) ) {
			// This is method 2 below, done in logs:
			result = ( a * _$ln_545(x) ) - x;
			initValue = 0;
			result += _$ln_545( _$lowerGammaSeries_404( a, x, initValue ) / a );
		}
		else {
			result = gammainc( a, x, true, invert );
			if ( result === 0.0 ) {
				if ( invert ) {
					// Try http://functions.wolfram.com/06.06.06.0039.01
					result = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );
					result = _$ln_545( result ) - a + ( ( a-0.5 ) * _$ln_545(a) );
					result += _$ln_545( _$SQRT_TWO_PI_90 );
				} else {
					// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:
					result = ( a * _$ln_545( x ) ) - x;
					initValue = 0.0;
					result += _$ln_545( _$lowerGammaSeries_404( a, x, initValue ) / a);
				}
			}
			else {
				result = _$ln_545( result ) + _$gammaln_445( a );
			}
		}
		if ( result > _$FLOAT64_MAX_LN_71 ) {
			return _$FLOAT64_PINF_85;
		}
		return _$exp_314( result );
	}
	isSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < _$FLOAT64_MAX_LN_71 );
	if ( isSmallA ) {
		fa = _$floor_346( a );
		isInt = ( fa === a );
		isHalfInt = ( isInt ) ? false : ( _$abs_118( fa - a ) === 0.5 );
	} else {
		isInt = isHalfInt = false;
	}
	if ( isInt && x > 0.6 ) {
		// Calculate Q via finite sum:
		invert = !invert;
		evalMethod = 0;
	}
	else if ( isHalfInt && x > 0.2 ) {
		// Calculate Q via finite sum for half integer a:
		invert = !invert;
		evalMethod = 1;
	}
	else if ( x < _$FLOAT64_SQRT_EPSILON_88 && a > 1.0 ) {
		evalMethod = 6;
	}
	else if ( x < 0.5 ) {
		// Changeover criterion chosen to give a changeover at Q ~ 0.33:
		if ( -0.4 / _$ln_545( x ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else if ( x < 1.1 ) {
		// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:
		if ( x * 0.75 < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else {
		// Begin by testing whether we're in the "bad" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:
		useTemme = false;
		if ( normalized && a > 20 ) {
			sigma = _$abs_118( (x-a)/a );
			if ( a > 200 ) {
				// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.
				if ( 20 / a > sigma * sigma ) {
					useTemme = true;
				}
			} else if ( sigma < 0.4 ) {
				useTemme = true;
			}
		}
		if ( useTemme ) {
			evalMethod = 5;
		}
		// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.
		else if ( x - ( 1.0 / (3.0 * x) ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 4;
			invert = !invert;
		}
	}

	/* eslint-disable default-case */
	switch ( evalMethod ) {
	case 0:
		result = _$finiteGammaQ_398( a, x );
		if (normalized === false ) {
			result *= _$gamma_387( a );
		}
		break;
	case 1:
		result = _$finiteHalfGammaQ_399( a, x );
		if ( normalized === false ) {
			result *= _$gamma_387( a );
		}
		break;
	case 2:
		// Compute P:
		result = ( normalized ) ?
			_$regularisedGammaPrefix_415( a, x ) :
			_$fullIGammaPrefix_400( a, x );
		if ( result !== 0.0 ) {
			initValue = 0.0;
			optimisedInvert = false;
			if ( invert ) {
				initValue = ( normalized ) ? 1.0 : _$gamma_387(a);
				if (
					normalized ||
					result >= 1.0 ||
					_$FLOAT64_MAX_75 * result > initValue
				) {
					initValue /= result;
					if (
						normalized ||
						a < 1.0 ||
						( _$FLOAT64_MAX_75 / a > initValue )
					) {
						initValue *= -a;
						optimisedInvert = true;
					}
					else {
						initValue = 0.0;
					}
				}
				else {
					initValue = 0.0;
				}
			}
		}
		result *= _$lowerGammaSeries_404( a, x, initValue ) / a;
		if ( optimisedInvert ) {
			invert = false;
			result = -result;
		}
		break;
	case 3:
		// Compute Q:
		invert = !invert;
		res = _$tgammaSmallUpperPart_417( a, x, invert );
		result = res[ 0 ];
		g = res[ 1 ];
		invert = false;
		if ( normalized ) {
			result /= g;
		}
		break;
	case 4:
		// Compute Q:
		result = ( normalized ) ?
			_$regularisedGammaPrefix_415( a, x ) :
			_$fullIGammaPrefix_400( a, x );
		if ( result !== 0 ) {
			result *= _$upperGammaFraction_418( a, x );
		}
		break;
	case 5:
		result = _$igammaTemmeLarge_402( a, x );
		if ( x >= a ) {
			invert = !invert;
		}
		break;
	case 6:
		// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/
		result = ( normalized ) ?
			_$pow_618(x, a) / _$gamma_387( a + 1.0 ) :
			_$pow_618( x, a ) / a;
		result *= 1.0 - ( a * x / ( a + 1.0 ) );
		break;
	}
	if ( normalized && result > 1.0 ) {
		result = 1.0;
	}
	if ( invert ) {
		gam = ( normalized ) ? 1.0 : _$gamma_387( a );
		result = gam - result;
	}
	return result;
}


// EXPORTS //

var _$gammainc_401 = gammainc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the incomplete gamma function.
*
* @module @stdlib/math/base/special/gammainc
*
* @example
* var gammainc = require( '@stdlib/math/base/special/gammainc' );
*
* var v = gammainc( 6.0, 2.0 );
* // returns ~0.9826
*
* v = gammainc( 1.0, 2.0, true, true );
* // returns ~0.7358
*
* v = gammainc( 7.0, 5.0 );
* // returns ~0.8270
*
* v = gammainc( 7.0, 5.0, false );
* // returns ~19.8482
*
* v = gammainc( NaN, 2.0 );
* // returns NaN
*
* v = gammainc( 6.0, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammainc_401 = require( './gammainc.js' ); */;


// EXPORTS //

var _$gammainc_403 = _$gammainc_401;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_80 = require( '@stdlib/constants/math/float64-min-ln' ); */;


// MAIN //

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function __fullIGammaPrefix_483( a, z ) {
	var prefix;
	var alz;

	alz = a * _$ln_545( z );
	if ( z >= 1.0 ) {
		if ( ( alz < _$FLOAT64_MAX_LN_71 ) && ( -z > _$FLOAT64_MIN_LN_80 ) ) {
			prefix = _$pow_618( z, a ) * _$exp_314( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = _$pow_618( z / _$exp_314(z/a), a );
		}
		else {
			prefix = _$exp_314( alz - z );
		}
	}
	else if ( alz > _$FLOAT64_MIN_LN_80 ) {
		prefix = _$pow_618( z, a ) * _$exp_314( -z );
	}
	else if ( z/a < _$FLOAT64_MAX_LN_71 ) {
		prefix = _$pow_618( z / _$exp_314(z/a), a );
	}
	else {
		prefix = _$exp_314( alz - z );
	}
	return prefix;
}


// EXPORTS //

var _$fullIGammaPrefix_483 = __fullIGammaPrefix_483;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_381 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_80 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_60 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_55 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function regularizedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
	d = ( (z - a) - _$FLOAT64_GAMMA_LANCZOS_G_60 + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= _$FLOAT64_MIN_LN_80 ) {
			// Use logs, so should be free of cancellation errors:
			return _$exp_314( ( a * _$ln_545(z) ) - z - _$gammaln_445( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return _$pow_618( z, a ) * _$exp_314( -z ) / _$gamma_387( a );
	}
	if ( _$abs_118(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( _$log1p_558( d ) - d ) ) + ( z * ( 0.5-_$FLOAT64_GAMMA_LANCZOS_G_60 ) / agh );
		prefix = _$exp_314( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * _$ln_545(z / agh);
		amz = a - z;
		if (
			_$min_579(alz, amz) <= _$FLOAT64_MIN_LN_80 ||
			_$max_575(alz, amz) >= _$FLOAT64_MAX_LN_71
		) {
			amza = amz / a;
			if (
				_$min_579(alz, amz)/2.0 > _$FLOAT64_MIN_LN_80 &&
				_$max_575(alz, amz)/2.0 < _$FLOAT64_MAX_LN_71
			) {
				// Compute square root of the result and then square it:
				sq = _$pow_618( z/agh, a/2.0 ) * _$exp_314( amz/2.0 );
				prefix = sq * sq;
			}
			else if (
				_$min_579(alz, amz)/4.0 > _$FLOAT64_MIN_LN_80 &&
				_$max_575(alz, amz)/4.0 < _$FLOAT64_MAX_LN_71 &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = _$pow_618( z/agh, a/4.0 ) * _$exp_314( amz/4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > _$FLOAT64_MIN_LN_80 &&
				amza < _$FLOAT64_MAX_LN_71
			) {
				prefix = _$pow_618( (z * _$exp_314(amza)) / agh, a );
			}
			else {
				prefix = _$exp_314( alz + amz );
			}
		}
		else
		{
			prefix = _$pow_618( z/agh, a ) * _$exp_314( amz );
		}
	}
	prefix *= _$sqrt_703( agh/_$E_55 ) / _$gammaLanczosSumExpGScaled_381( a );
	return prefix;
}


// EXPORTS //

var _$regularizedGammaPrefix_491 = regularizedGammaPrefix;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaDeltaRatio_379 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$factorial_333 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$gammainc_403 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$fullIGammaPrefix_483 = require( './full_igamma_prefix.js' ); */;
/* removed: var _$regularizedGammaPrefix_491 = require( './regularized_gamma_prefix.js' ); */;


// VARIABLES //

var p = new Array( 30 );


// MAIN //

/**
* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} s0 - initial value
* @param {number} mult - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function
* @returns {number} function value
*/
function betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {
	var prefix;
	var tmp1;
	var tnp1;
	var sum;
	var b2n;
	var bm1;
	var lx2;
	var lxp;
	var mbn;
	var lx;
	var t4;
	var h;
	var j;
	var m;
	var n;
	var r;
	var t;
	var u;

	// Some values we'll need later, these are Eq 9.1:
	bm1 = b - 1.0;
	t = a + ( bm1 / 2.0 );
	if ( y < 0.35 ) {
		lx = _$log1p_558( -y );
	} else {
		lx = _$ln_545( x );
	}
	u = -t * lx;

	// And from from 9.2:
	h = _$regularizedGammaPrefix_491( b, u );
	if ( h <= _$FLOAT64_SMALLEST_NORMAL_86 ) {
		return s0;
	}
	if ( normalized ) {
		prefix = h / _$gammaDeltaRatio_379( a, b );
		prefix /= _$pow_618( t, b );
	} else {
		prefix = _$fullIGammaPrefix_483( b, u ) / _$pow_618( t, b );
	}
	prefix *= mult;

	// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...
	p[ 0 ] = 1;  // see 9.3.

	// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )
	j = _$gammainc_403( u, b, true, true );
	j /= h;

	// Now we can start to pull things together and evaluate the sum in Eq 9:
	sum = s0 + ( prefix * j ); // Value at N = 0

	// Some variables we'll need...
	tnp1 = 1.0; // 2*N+1
	lx2 = lx / 2.0;
	lx2 *= lx2;
	lxp = 1.0;
	t4 = 4.0 * t * t;
	b2n = b;
	for ( n = 1; n < p.length; ++n ) {
		// Begin by evaluating the next Pn from Eq 9.4:
		tnp1 += 2.0;
		p[ n ] = 0.0;
		mbn = b - n;
		tmp1 = 3;
		for ( m = 1; m < n; ++m ) {
			mbn = ( m * b ) - n;
			p[ n ] += mbn * p[ n-m ] / _$factorial_333( tmp1 );
			tmp1 += 2;
		}
		p[ n ] /= n;
		p[ n ] += bm1 / _$factorial_333( tnp1 );

		// Now we want Jn from Jn-1 using Eq 9.6:
		j = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;
		lxp *= lx2;
		b2n += 2.0;

		// Pull it together with Eq 9:
		r = prefix * p[ n ] * j;
		sum += r;
		if ( r > 1.0 ) {
			if ( _$abs_118( r ) < _$abs_118( _$FLOAT64_EPSILON_56 * sum ) ) {
				break;
			}
		} else if ( _$abs_118( r / _$FLOAT64_EPSILON_56 ) < _$abs_118( sum ) ) {
			break;
		}
	}
	return sum;
}


// EXPORTS //

var _$betaSmallBLargeASeries_481 = betaSmallBLargeASeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.
*
* ## Notes
*
* Specifically, the function calculates
*
* ```tex
* \frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }
* ```
*
* The function should only called with small `k`; for large `k`, it is grossly inefficient.
*
* @private
* @param {number} a - input value
* @param {number} b - input value
* @param {NonNegativeInteger} k - input value
* @returns {number} ratio value
*/
function risingFactorialRatio( a, b, k ) {
	var result;
	var i;
	if ( k === 0 ) {
		return 1.0;
	}
	result = 1.0;
	for ( i = 0; i < k; i++ ) {
		result *= ( a + i ) / ( b + i );
	}
	return result;
}


// EXPORTS //

var _$risingFactorialRatio_492 = risingFactorialRatio;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the maximum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum absolute value
*
* @example
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* @example
* var v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = maxabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/
function maxabs( x, y ) {
	var nargs;
	var args;
	var i;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( nargs === 2 ) {
		return _$max_575( _$abs_118( x ), _$abs_118( y ) );
	}
	args = new Array( nargs );
	for ( i = 0; i < nargs; i++ ) {
		args[ i ] = _$abs_118( arguments[ i ] );
	}
	return _$max_575.apply( null, args );
}


// EXPORTS //

var _$maxabs_578 = maxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the maximum absolute value.
*
* @module @stdlib/math/base/special/maxabs
*
* @example
* var maxabs = require( '@stdlib/math/base/special/maxabs' );
*
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = maxabs( 3.14, NaN );
* // returns NaN
*
* v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$maxabs_578 = require( './maxabs.js' ); */;


// EXPORTS //

var _$maxabs_577 = _$maxabs_578;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum absolute value
*
* @example
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = minabs( +0.0, -0.0 );
* // returns +0.0
*/
function minabs( x, y ) {
	var nargs;
	var args;
	var i;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( nargs === 2 ) {
		return _$min_579( _$abs_118( x ), _$abs_118( y ) );
	}
	args = new Array( nargs );
	for ( i = 0; i < nargs; i++ ) {
		args[ i ] = _$abs_118( arguments[ i ] );
	}
	return _$min_579.apply( null, args );
}


// EXPORTS //

var _$minabs_582 = minabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum absolute value.
*
* @module @stdlib/math/base/special/minabs
*
* @example
* var minabs = require( '@stdlib/math/base/special/minabs' );
*
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$minabs_582 = require( './minabs.js' ); */;


// EXPORTS //

var _$minabs_581 = _$minabs_582;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_381 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$maxabs_577 = require( '@stdlib/math/base/special/maxabs' ); */;
/* removed: var _$minabs_581 = require( '@stdlib/math/base/special/minabs' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_80 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_60 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_55 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function ibetaPowerTerms( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return _$pow_618( x, a ) * _$pow_618( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
	bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
	cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
	result = _$gammaLanczosSumExpGScaled_381( c );
	result /= _$gammaLanczosSumExpGScaled_381( a ) * _$gammaLanczosSumExpGScaled_381( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= _$sqrt_703( bgh / _$E_55 );
	result *= _$sqrt_703( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( _$minabs_581( l1, l2 ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || _$min_579( a, b ) < 1 ) {
			if ( _$abs_118(l1) < 0.1 ) {
				result *= _$exp_314( a * _$log1p_558( l1 ) );
			} else {
				result *= _$pow_618( ( x*cgh ) / agh, a );
			}
			if ( _$abs_118(l2) < 0.1 ) {
				result *= _$exp_314( b * _$log1p_558( l2 ) );
			} else {
				result *= _$pow_618((y * cgh) / bgh, b);
			}
		}
		else if ( _$maxabs_577( l1, l2 ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = _$expm1_327( ratio * _$log1p_558( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * _$log1p_558( l3 );
				result *= _$exp_314( l3 );
			}
			else {
				l3 = _$expm1_327( _$log1p_558( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * _$log1p_558( l3 );
				result *= _$exp_314( l3 );
			}
		}
		else if ( _$abs_118(l1) < _$abs_118(l2) ) {
			// First base near 1 only:
			l = ( a * _$log1p_558( l1 ) ) + ( b * _$ln_545( ( y*cgh ) / bgh ) );
			if ( l <= _$FLOAT64_MIN_LN_80 || l >= _$FLOAT64_MAX_LN_71 ) {
				l += _$ln_545(result);
				if ( l >= _$FLOAT64_MAX_LN_71 ) {
					return NaN;
				}
				result = _$exp_314( l );
			} else {
				result *= _$exp_314( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * _$log1p_558( l2 ) ) + ( a * _$ln_545( (x*cgh) / agh ) );
			if ( l <= _$FLOAT64_MIN_LN_80 || l >= _$FLOAT64_MAX_LN_71 ) {
				l += _$ln_545(result);
				if ( l >= _$FLOAT64_MAX_LN_71 ) {
					return NaN;
				}
				result = _$exp_314( l );
			} else {
				result *= _$exp_314( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * _$ln_545(b1);
		l2 = b * _$ln_545(b2);
		if (
			l1 >= _$FLOAT64_MAX_LN_71 ||
			l1 <= _$FLOAT64_MIN_LN_80 ||
			l2 >= _$FLOAT64_MAX_LN_71 ||
			l2 <= _$FLOAT64_MIN_LN_80
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = _$pow_618( b2, b / a );
				l3 = a * ( _$ln_545(b1) + _$ln_545(p1) );
				if ( l3 < _$FLOAT64_MAX_LN_71 && l3 > _$FLOAT64_MIN_LN_80 ) {
					result *= _$pow_618( p1 * b1, a );
				} else {
					l2 += l1 + _$ln_545(result);
					if ( l2 >= _$FLOAT64_MAX_LN_71 ) {
						return NaN;
					}
					result = _$exp_314( l2 );
				}
			}
			else {
				p1 = _$pow_618( b1, a / b );
				l3 = ( _$ln_545(p1) + _$ln_545(b2) ) * b;
				if ( l3 < _$FLOAT64_MAX_LN_71 && l3 > _$FLOAT64_MIN_LN_80 ) {
					result *= _$pow_618( p1 * b2, b );
				} else {
					l2 += l1 + _$ln_545( result );
					if (l2 >= _$FLOAT64_MAX_LN_71) {
						return NaN;
					}
					result = _$exp_314( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= _$pow_618( b1, a ) * _$pow_618( b2, b );
		}
	}
	return result;
}


// EXPORTS //

var _$ibetaPowerTerms_486 = ibetaPowerTerms;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$continuedFraction_747 = require( '@stdlib/math/base/tools/continued-fraction' ); */;
/* removed: var _$ibetaPowerTerms_486 = require( './ibeta_power_terms.js' ); */;


// VARIABLES //

var OPTS = {
	'keep': true,
	'maxIter': 1000
};


// FUNCTIONS //

/**
* Continued fraction for the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @returns {Function} series function
*/
function ibetaFraction2t( a, b, x, y ) {
	var m = 0;
	return next;

	/**
	* Calculate the numerator and denominator of the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		var denom;
		var aN;
		var bN;

		aN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;
		denom = a + ( 2.0*m ) - 1.0;
		aN /= denom * denom;
		bN = m;
		bN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );
		bN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len
		m += 1;
		return [ aN, bN ];
	}
}


// MAIN //

/**
* Evaluates the incomplete beta via the continued fraction representation.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} incomplete beta value
*/
function ibetaFraction2( a, b, x, y, normalized, out ) {
	var result;
	var fract;
	var f;

	result = _$ibetaPowerTerms_486( a, b, x, y, normalized );
	if ( out ) {
		out[ 1 ] = result;
	}
	if ( result === 0.0 ) {
		return result;
	}
	f = ibetaFraction2t( a, b, x, y );
	fract = _$continuedFraction_747( f, OPTS );
	return result / fract;
}


// EXPORTS //

var _$ibetaFraction2_485 = ibetaFraction2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isOdd_111 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;


// MAIN //

/**
* Computes the binomial coefficient of two integers.
*
* ## Method
*
* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments
*
*     ```tex
*     \binom nk = \prod_{i=1}^k \frac{n+1-i}{i}
*     ```
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {integer} function value
*
* @example
* var v = binomcoef( 8, 2 );
* // returns 28
*
* @example
* var v = binomcoef( 0, 0 );
* // returns 1
*
* @example
* var v = binomcoef( -4, 2 );
* // returns 10
*
* @example
* var v = binomcoef( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoef( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoef( NaN, NaN );
* // returns NaN
*/
function binomcoef( n, k ) {
	var res;
	var j;
	if ( _$isnan_103( n ) || _$isnan_103( k ) ) {
		return NaN;
	}
	if ( !_$isInteger_101( n ) || !_$isInteger_101( k ) ) {
		return NaN;
	}
	if ( k < 0 ) {
		return 0;
	}
	if ( n < 0 ) {
		res = binomcoef( -n + k - 1, k );
		if ( _$isOdd_111( k ) ) {
			res = -res;
		}
		return res;
	}
	if ( k > n ) {
		return 0;
	}
	if ( k === 0 || k === n ) {
		return 1;
	}
	if ( k === 1 || k === n - 1 ) {
		return n;
	}
	if ( n - k < k ) {
		k = n - k;
	}
	// Use recursive definition...
	res = n;
	for ( j = 2; j <= k; j++ ) {
		res *= ( n - j + 1 ) / j;
	}
	// Correct for rounding errors...
	return ( _$isInteger_101( res ) ) ? res : _$round_652( res );
}


// EXPORTS //

var _$binomcoef_194 = binomcoef;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoef
*
* @example
* var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
*
* var v = binomcoef( 8, 2 );
* // returns 28
*
* v = binomcoef( 0, 0 );
* // returns 1
*
* v = binomcoef( -4, 2 );
* // returns 10
*
* v = binomcoef( 5, 3 );
* // returns 10
*
* v = binomcoef( NaN, 3 );
* // returns NaN
*
* v = binomcoef( 5, NaN );
* // returns NaN
*
* v = binomcoef( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$binomcoef_194 = require( './binomcoef.js' ); */;


// EXPORTS //

var _$binomcoef_195 = _$binomcoef_194;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$binomcoef_195 = require( '@stdlib/math/base/special/binomcoef' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;


// MAIN //

/**
* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.
*
* @private
* @param {NonNegativeInteger} n - number of trials
* @param {NonNegativeInteger} k - function input
* @param {Probability} x - function input
* @param {Probability} y - probability equal to `1-x`
* @returns {number} sum
*/
function binomialCCDF( n, k, x, y ) {
	var startTerm;
	var result;
	var start;
	var term;
	var i;

	result = _$pow_618( x, n );
	if ( result > _$FLOAT64_SMALLEST_NORMAL_86 ) {
		term = result;
		for ( i = _$floor_346( n - 1 ); i > k; i-- ) {
			term *= ((i + 1) * y) / ((n - i) * x);
			result += term;
		}
	} else {
		// First term underflows so we need to start at the mode of the distribution and work outwards:
		start = _$floor_346( n * x );
		if ( start <= k + 1 ) {
			start = _$floor_346( k + 2 );
		}
		result = _$pow_618( x, start ) * _$pow_618( y, n - start );
		result *= _$binomcoef_195( _$floor_346(n), _$floor_346(start) );
		if ( result === 0.0 ) {
			// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:
			for ( i = start - 1; i > k; i-- ) {
				result += _$pow_618( x, i ) * _$pow_618( y, n - i );
				result *= _$binomcoef_195( _$floor_346(n), _$floor_346(i) );
			}
		} else {
			term = result;
			startTerm = result;
			for ( i = start - 1; i > k; i-- ) {
				term *= ((i + 1) * y) / ((n - i) * x);
				result += term;
			}
			term = startTerm;
			for ( i = start + 1; i <= n; i++ ) {
				term *= (n - i + 1) * x / (i * y);
				result += term;
			}
		}
	}
	return result;
}


// EXPORTS //

var _$binomialCCDF_482 = binomialCCDF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ibetaPowerTerms_486 = require( './ibeta_power_terms.js' ); */;


// MAIN //

/**
* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} k - function input
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)
*/
function ibetaAStep( a, b, x, y, k, normalized, out ) {
	var prefix;
	var term;
	var sum;
	var i;

	prefix = _$ibetaPowerTerms_486( a, b, x, y, normalized );
	if ( out ) {
		out[ 1 ] = prefix;
	}
	prefix /= a;
	if ( prefix === 0.0 ) {
		return prefix;
	}
	sum = 1.0;
	term = 1.0;

	// Series summation from 0 to k-1:
	for ( i = 0; i < k-1; ++i ) {
		term *= (a+b+i) * x / (a+i+1.0);
		sum += term;
	}
	prefix *= sum;
	return prefix;
}


// EXPORTS //

var _$ibetaAStep_484 = ibetaAStep;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_381 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$sumSeries_753 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_80 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_60 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_55 = require( '@stdlib/constants/math/float64-e' ); */;


// VARIABLES //

var opts = {
	'maxTerms': 100
};


// FUNCTIONS //

/**
* Series approximation to the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {number} result - initial result value
* @returns {Function} series function
*/
function ibetaSeriesT( a, b, x, result ) {
	var poch = 1.0 - b;
	var n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result / a;
		a += 1.0;
		result *= poch * x / n;
		n += 1;
		poch += 1.0;
		return r;
	}
}


// MAIN //

/**
* Incomplete beta series.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {NonNegativeInteger} s0 - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @param {Probability} y - probability equal to `1-x`
* @returns {number} function value
*/
function ibetaSeries( a, b, x, s0, normalized, out, y ) {
	var result;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var c;
	var s;

	if ( normalized ) {
		c = a + b;

		// Incomplete beta power term, combined with the Lanczos approximation:
		agh = a + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
		bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
		cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_60 - 0.5;
		result = _$gammaLanczosSumExpGScaled_381( c ) / ( _$gammaLanczosSumExpGScaled_381( a ) * _$gammaLanczosSumExpGScaled_381( b ) ); // eslint-disable-line max-len

		l1 = _$ln_545( cgh / bgh ) * ( b - 0.5 );
		l2 = _$ln_545( x * cgh / agh ) * a;

		// Check for over/underflow in the power terms:
		if (
			l1 > _$FLOAT64_MIN_LN_80 &&
			l1 < _$FLOAT64_MAX_LN_71 &&
			l2 > _$FLOAT64_MIN_LN_80 &&
			l2 < _$FLOAT64_MAX_LN_71
		) {
			if ( a * b < bgh * 10.0 ) {
				result *= _$exp_314( ( b-0.5 ) * _$log1p_558( a / bgh ) );
			} else {
				result *= _$pow_618( cgh / bgh, b - 0.5 );
			}
			result *= _$pow_618( x * cgh / agh, a );
			result *= _$sqrt_703( agh / _$E_55 );

			if ( out ) {
				out[ 1 ] = result * _$pow_618( y, b );
			}
		}
		else {
			// We need logs, and this *will* cancel:
			result = _$ln_545( result ) + l1 + l2 + ( ( _$ln_545( agh ) - 1.0 ) / 2.0 );
			if ( out ) {
				out[ 1 ] = _$exp_314( result + ( b * _$ln_545( y ) ) );
			}
			result = _$exp_314( result );
		}
	}
	else {
		// Non-normalized, just compute the power:
		result = _$pow_618( x, a );
	}
	if ( result < _$FLOAT64_SMALLEST_NORMAL_86 ) {
		return s0; // Safeguard: series can't cope with denorms.
	}
	s = ibetaSeriesT( a, b, x, result );
	opts.initialValue = s0;
	return _$sumSeries_753( s, opts );
}


// EXPORTS //

var _$ibetaSeries_487 = ibetaSeries;

/* eslint-disable max-statements, max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$asin_136 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$beta_182 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$INT32_MAX_93 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$betaSmallBLargeASeries_481 = require( './beta_small_b_large_a_series.js' ); */;
/* removed: var _$risingFactorialRatio_492 = require( './rising_factorial_ratio.js' ); */;
/* removed: var _$ibetaPowerTerms_486 = require( './ibeta_power_terms.js' ); */;
/* removed: var _$ibetaFraction2_485 = require( './ibeta_fraction2.js'); */;
/* removed: var _$binomialCCDF_482 = require( './binomial_ccdf.js' ); */;
/* removed: var _$ibetaAStep_484 = require( './ibeta_a_step.js' ); */;
/* removed: var _$ibetaSeries_487 = require( './ibeta_series.js' ); */;


// VARIABLES //

var ONE_OVER_PI = 1.0 / _$PI_84;


// MAIN //

/**
* Evaluates the incomplete beta function and its first derivative. This function divides up the input range and selects the right implementation method for each domain.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*/
function ibetaImp( out, x, a, b, invert, normalized ) {
	var lambda;
	var prefix;
	var fract;
	var bbar;
	var div;
	var tmp;
	var k;
	var n;
	var p;
	var y;
	y = 1.0 - x;

	// Derivative not set...
	out[ 1 ] = -1;
	if ( _$isnan_103( x ) || x < 0.0 || x > 1.0 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( normalized ) {
		if ( a < 0.0 || b < 0.0 ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		// Extend to a few very special cases...
		if ( a === 0.0 ) {
			if ( b === 0.0 ) {
				out[ 0 ] = NaN;
				out[ 1 ] = NaN;
				return out;
			}
			if ( b > 0.0 ) {
				out[ 0 ] = ( invert ) ? 0.0 : 1.0;
				return out;
			}
		} else if ( b === 0.0 ) {
			if ( a > 0.0 ) {
				out[ 0 ] = ( invert ) ? 1.0 : 0.0;
				return out;
			}
		}
	} else if ( a <= 0.0 || b <= 0.0 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x === 0.0 ) {
		if ( a === 1.0 ) {
			out[ 1 ] = 1.0;
		} else {
			out[ 1 ] = ( a < 1.0 ) ? _$FLOAT64_MAX_75 / 2.0 : _$FLOAT64_SMALLEST_NORMAL_86 * 2.0;
		}
		if ( invert ) {
			out[ 0 ] = ( normalized ) ? 1.0 : _$beta_182( a, b );
			return out;
		}
		out[ 0 ] = 0.0;
		return out;
	}
	if ( x === 1.0 ) {
		if ( b === 1.0 ) {
			out[ 1 ] = 1.0;
		} else {
			out[ 1 ] = ( b < 1.0 ) ? _$FLOAT64_MAX_75 / 2.0 : _$FLOAT64_SMALLEST_NORMAL_86 * 2.0;
		}
		if ( invert ) {
			out[ 0 ] = 0.0;
		} else {
			out[ 0 ] = ( normalized ) ? 1.0 : _$beta_182( a, b );
		}
		return out;
	}
	if ( a === 0.5 && b === 0.5 ) {
		out[ 1 ] = ONE_OVER_PI * _$sqrt_703( y * x );

		// We have an arcsine distribution:
		p = ( invert ) ? _$asin_136( _$sqrt_703(y) ) : _$asin_136( _$sqrt_703(x) );
		p /= _$HALF_PI_62;
		if ( !normalized ) {
			p *= _$PI_84;
		}
		out[ 0 ] = p;
		return out;
	}
	if ( a === 1.0 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
	}
	if ( b === 1.0 ) {
		// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/
		if ( a === 1.0 ) {
			out[ 1 ] = 1.0;
			out[ 0 ] = ( invert ) ? y : x;
			return out;
		}
		out[ 1 ] = a * _$pow_618( x, a - 1.0 );
		if ( y < 0.5 ) {
			p = ( invert ) ? -_$expm1_327( a * _$log1p_558(-y) ) : _$exp_314( a * _$log1p_558(-y) );
		} else {
			p = ( invert ) ? -( _$pow_618( x, a ) - 1.0 ) : _$pow_618( x, a );
		}
		if ( !normalized ) {
			p /= a;
		}
		out[ 0 ] = p;
		return out;
	}
	if ( _$min_579( a, b ) <= 1.0 ) {
		if ( x > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;

			invert = !invert;
		}
		if ( _$max_575( a, b ) <= 1.0 ) {
			// Both a,b < 1:
			if ( (a >= _$min_579( 0.2, b ) ) || ( _$pow_618(x, a) <= 0.9 ) ) {
				if ( invert ) {
					fract = -( ( normalized ) ? 1.0 : _$beta_182( a, b ) );
					invert = false;
					fract = -_$ibetaSeries_487( a, b, x, fract, normalized, out, y );
				} else {
					fract = _$ibetaSeries_487( a, b, x, 0, normalized, out, y );
				}
			} else {
				tmp = b;
				b = a;
				a = tmp;

				tmp = y;
				y = x;
				x = tmp;

				invert = !invert;
				if ( y >= 0.3 ) {
					if ( invert ) {
						fract = -( ( normalized ) ? 1.0 : _$beta_182( a, b ) );
						invert = false;
						fract = -_$ibetaSeries_487( a, b, x, fract, normalized, out, y ); // eslint-disable-line max-len
					} else {
						fract = _$ibetaSeries_487( a, b, x, 0, normalized, out, y );
					}
				} else {
					// Sidestep on a, and then use the series representation:
					if ( normalized ) {
						prefix = 1;
					} else {
						prefix = _$risingFactorialRatio_492( a + b, a, 20 );
					}
					fract = _$ibetaAStep_484( a, b, x, y, 20, normalized, out );
					if ( invert ) {
						fract -= ( ( normalized ) ? 1 : _$beta_182( a, b ) );
						invert = false;
						fract = -_$betaSmallBLargeASeries_481( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
					} else {
						fract = _$betaSmallBLargeASeries_481( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
					}
				}
			}
		} else if ( b <= 1.0 || ( x < 0.1 && ( _$pow_618( b * x, a ) <= 0.7 ) ) ) {
			if ( invert ) {
				fract = -( ( normalized ) ? 1 : _$beta_182( a, b ) );
				invert = false;
				fract = -_$ibetaSeries_487( a, b, x, fract, normalized, out, y );
			} else {
				fract = _$ibetaSeries_487( a, b, x, 0.0, normalized, out, y );
			}
		} else {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;

			if ( y >= 0.3 ) {
				if (invert) {
					fract = -(( normalized ) ? 1.0 : _$beta_182( a, b ));
					invert = false;
					fract = -_$ibetaSeries_487( a, b, x, fract, normalized, out, y );
				} else {
					fract = _$ibetaSeries_487( a, b, x, 0.0, normalized, out, y );
				}
			}
			else if ( a >= 15.0 ) {
				if ( invert ) {
					fract = -(( normalized ) ? 1.0 : _$beta_182( a, b ));
					invert = false;
					fract = -_$betaSmallBLargeASeries_481( a, b, x, y, fract, 1.0, normalized ); // eslint-disable-line max-len
				} else {
					fract = _$betaSmallBLargeASeries_481( a, b, x, y, 0.0, 1.0, normalized ); // eslint-disable-line max-len
				}
			}
			else {
				if ( normalized ) {
					prefix = 1;
				} else {
					// Sidestep to improve errors:
					prefix = _$risingFactorialRatio_492( a + b, a, 20.0 );
				}
				fract = _$ibetaAStep_484( a, b, x, y, 20.0, normalized, out );
				if ( invert ) {
					fract -= ( ( normalized ) ? 1.0 : _$beta_182( a, b ) );
					invert = false;
					fract = -_$betaSmallBLargeASeries_481( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
				} else {
					fract = _$betaSmallBLargeASeries_481( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
				}
			}
		}
	} else {
		// Both a,b >= 1:
		if ( a < b ) {
			lambda = a - ( (a + b) * x );
		} else {
			lambda = ( (a + b) * y ) - b;
		}
		if ( lambda < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;
		}
		if ( b < 40.0 ) {
			if (
				_$floor_346(a) === a &&
				_$floor_346(b) === b &&
				a < _$INT32_MAX_93 - 100
			) {
				// Relate to the binomial distribution and use a finite sum:
				k = a - 1.0;
				n = b + k;
				fract = _$binomialCCDF_482( n, k, x, y );
				if ( !normalized ) {
					fract *= _$beta_182( a, b );
				}
			}
			else if ( b * x <= 0.7 ) {
				if ( invert ) {
					fract = -( ( normalized ) ? 1.0 : _$beta_182( a, b ) );
					invert = false;
					fract = -_$ibetaSeries_487( a, b, x, fract, normalized, out, y );
				} else {
					fract = _$ibetaSeries_487( a, b, x, 0.0, normalized, out, y );
				}
			}
			else if ( a > 15.0 ) {
				// Sidestep so we can use the series representation:
				n = _$floor_346( b );
				if ( n === b ) {
					n -= 1;
				}
				bbar = b - n;
				if ( normalized ) {
					prefix = 1;
				} else {
					prefix = _$risingFactorialRatio_492( a + bbar, bbar, n );
				}
				fract = _$ibetaAStep_484( bbar, a, y, x, n, normalized );
				fract = _$betaSmallBLargeASeries_481( a, bbar, x, y, fract, 1.0, normalized ); // eslint-disable-line max-len
				fract /= prefix;
			}
			else if ( normalized ) {
				n = _$floor_346( b );
				bbar = b - n;
				if ( bbar <= 0 ) {
					n -= 1;
					bbar += 1;
				}
				fract = _$ibetaAStep_484( bbar, a, y, x, n, normalized );
				fract += _$ibetaAStep_484( a, bbar, x, y, 20.0, normalized );
				if ( invert ) {
					fract -= 1;
				}
				fract = _$betaSmallBLargeASeries_481( a + 20.0, bbar, x, y, fract, 1, normalized ); // eslint-disable-line max-len
				if ( invert ) {
					fract = -fract;
					invert = false;
				}
			}
			else {
				fract = _$ibetaFraction2_485( a, b, x, y, normalized, out );
			}
		} else {
			fract = _$ibetaFraction2_485( a, b, x, y, normalized, out );
		}
	}
	if ( out[ 1 ] < 0.0 ) {
		out[ 1 ] = _$ibetaPowerTerms_486( a, b, x, y, true );
	}
	div = y * x;
	if ( out[ 1 ] !== 0.0 ) {
		if ( ( _$FLOAT64_MAX_75 * div < out[ 1 ] ) ) {
			// Overflow, return an arbitrarily large value:
			out[ 1 ] = _$FLOAT64_MAX_75 / 2.0;
		} else {
			out[ 1 ] /= div;
		}
	}
	out[ 0 ] = ( invert ) ? ( ( normalized ) ? 1.0 : _$beta_182( a, b ) ) - fract : fract; // eslint-disable-line max-len
	return out;
}


// EXPORTS //

var _$ibetaImp_489 = ibetaImp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ibetaImp_489 = require( './kernel_betainc.js' ); */;


// MAIN //

/**
* Evaluates the incomplete beta function and its first derivative.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var arr = new Array( 2 );
* var out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/
function kernelBetainc( out, x, a, b, invert, normalized ) {
	if ( arguments.length === 5 ) {
		return _$ibetaImp_489( new Array( 2 ), out, x, a, b, invert );
	}
	return _$ibetaImp_489( out, x, a, b, invert, normalized );
}


// EXPORTS //

var _$kernelBetainc_490 = kernelBetainc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the incomplete beta function and its first derivative.
*
* @module @stdlib/math/base/special/kernel-betainc
*
* @example
* var kernelBetainc = require( '@stdlib/math/base/special/kernel-betainc' );
*
* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* var arr = new Array( 2 );
* out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/

// MODULES //

/* removed: var _$kernelBetainc_490 = require( './main.js' ); */;


// EXPORTS //

var _$kernelBetainc_488 = _$kernelBetainc_490;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$kernelBetainc_488 = require( '@stdlib/math/base/special/kernel-betainc' ); */;


// VARIABLES //

var out = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the incomplete beta function.
*
* @param {Probability} x - function parameter
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* @example
* var y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* @example
* var y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*/
function betainc( x, a, b, regularized, upper ) {
	/* eslint-disable no-unneeded-ternary */
	regularized = ( regularized === false ) ? false : true;
	upper = ( upper === true ) ? true : false;
	out = _$kernelBetainc_488( out, x, a, b, upper, regularized );
	return out[ 0 ];
}


// EXPORTS //

var _$betainc_184 = betainc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the incomplete beta function.
*
* @module @stdlib/math/base/special/betainc
*
* @example
* var betainc = require( '@stdlib/math/base/special/betainc' );
*
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*
* y = betainc( 0.2, 1.0, 2.0, true, true );
* // returns 0.64
*/

// MODULES //

/* removed: var _$betainc_184 = require( './betainc.js' ); */;


// EXPORTS //

var _$betainc_185 = _$betainc_184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_300( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_300 = __evalrational_300;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_301( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_301 = __evalrational_301;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_302( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_302 = __evalrational_302;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_303( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_303 = __evalrational_303;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_304( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_304 = __evalrational_304;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalrational_300 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_301 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_302 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_303 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_304 = require( './rational_p5q5.js' ); */;


// VARIABLES //

var __Y1_298 = 8.91314744949340820313e-2;
var __Y2_298 = 2.249481201171875;
var __Y3_298 = 8.07220458984375e-1;
var Y4 = 9.3995571136474609375e-1;
var Y5 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse complementary error function.
*
* Note that
*
* ```tex
* \operatorname{erfc^{-1}}(1-z) = \operatorname{erf^{-1}}(z)
* ```
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfcinv( 0.8 );
* // returns ~0.1791
*
* @example
* var y = erfcinv( 0.0 );
* // returns Infinity
*
* @example
* var y = erfcinv( 2.0 );
* // returns -Infinity
*
* @example
* var y = erfcinv( NaN );
* // returns NaN
*/
function erfcinv( x ) {
	var sign;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_85;
	}
	// Special case: 2
	if ( x === 2.0 ) {
		return _$FLOAT64_NINF_81;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x > 2.0 || x < 0.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.
	if ( x > 1.0 ) {
		sign = -1.0;
		q = 2.0 - x;
	} else {
		sign = 1.0;
		q = x;
	}
	x = 1.0 - q;

	// x = 1-q <= 0.5
	if ( x <= 0.5 ) {
		g = x * ( x + 10.0 );
		r = _$evalrational_300( x );
		return sign * ( (g*__Y1_298) + (g*r) );
	}
	// q >= 0.25
	if ( q >= 0.25 ) {
		g = _$sqrt_703( -2.0 * _$ln_545(q) );
		q -= 0.25;
		r = _$evalrational_301( q );
		return sign * ( g / (__Y2_298+r) );
	}
	q = _$sqrt_703( -_$ln_545( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = _$evalrational_302( qs );
		return sign * ( (__Y3_298*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = _$evalrational_303( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = _$evalrational_304( qs );
	return sign * ( (Y5*q) + (r*q) );
}


// EXPORTS //

var _$erfcinv_298 = erfcinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse complementary error function.
*
* @module @stdlib/math/base/special/erfcinv
*
* @example
* var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
*
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* y = erfcinv( 0.0 );
* // returns Infinity
*
* y = erfcinv( 2.0 );
* // returns -Infinity
*
* y = erfcinv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfcinv_298 = require( './erfcinv.js' ); */;


// EXPORTS //

var _$erfcinv_299 = _$erfcinv_298;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two
* @type {number}
*
* @example
* var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
* // returns 1.4142135623730951
*/


// MAIN //

/**
* Square root of `2`.
*
* ```tex
* \sqrt{2}
* ```
*
* @constant
* @type {number}
* @default 1.4142135623730951
*/
var SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len


// EXPORTS //

var _$SQRT2_91 = SQRT2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_508( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666666;
	}
	return 0.16666666666666666 + (x * 0.16666666666666666);
}


// EXPORTS //

var _$evalpoly_508 = __evalpoly_508;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_509( x ) {
	if ( x === 0.0 ) {
		return 0.058333333333333334;
	}
	return 0.058333333333333334 + (x * (0.06666666666666667 + (x * 0.008333333333333333))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_509 = __evalpoly_509;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_510( x ) {
	if ( x === 0.0 ) {
		return 0.0251984126984127;
	}
	return 0.0251984126984127 + (x * (0.026785714285714284 + (x * (0.0017857142857142857 + (x * 0.0001984126984126984))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_510 = __evalpoly_510;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_511( x ) {
	if ( x === 0.0 ) {
		return 0.012039792768959435;
	}
	return 0.012039792768959435 + (x * (0.010559964726631394 + (x * (-0.0011078042328042327 + (x * (0.0003747795414462081 + (x * 0.0000027557319223985893))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_511 = __evalpoly_511;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_512( x ) {
	if ( x === 0.0 ) {
		return 0.003837005972422639;
	}
	return 0.003837005972422639 + (x * (0.00610392115600449 + (x * (-0.0016095979637646305 + (x * (0.0005945867404200738 + (x * (-0.00006270542728876062 + (x * 2.505210838544172e-8))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_512 = __evalpoly_512;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_513( x ) {
	if ( x === 0.0 ) {
		return 0.0032177478835464946;
	}
	return 0.0032177478835464946 + (x * (0.0010898206731540065 + (x * (-0.0012579159844784845 + (x * (0.0006908420797309686 + (x * (-0.00016376804137220805 + (x * (0.0000154012654012654 + (x * 1.6059043836821613e-10))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_513 = __evalpoly_513;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_515( x ) {
	if ( x === 0.0 ) {
		return 0.001743826229834001;
	}
	return 0.001743826229834001 + (x * (0.00003353097688001788 + (x * (-0.0007624513544032393 + (x * (0.0006451304695145635 + (x * (-0.000249472580470431 + (x * (0.000049255746366361444 + (x * (-0.0000039851014346715405 + (x * 7.647163731819816e-13))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_515 = __evalpoly_515;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_516( x ) {
	if ( x === 0.0 ) {
		return 0.0009647274732138864;
	}
	return 0.0009647274732138864 + (x * (-0.0003110108632631878 + (x * (-0.00036307660358786886 + (x * (0.0005140660578834113 + (x * (-0.00029133414466938067 + (x * (0.00009086710793521991 + (x * (-0.000015303004486655377 + (x * (0.0000010914179173496788 + (x * 2.8114572543455206e-15))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_516 = __evalpoly_516;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_517( x ) {
	if ( x === 0.0 ) {
		return 0.0005422926281312969;
	}
	return 0.0005422926281312969 + (x * (-0.0003694266780000966 + (x * (-0.00010230378073700413 + (x * (0.00035764655430568635 + (x * (-0.00028690924218514614 + (x * (0.00012645437628698076 + (x * (-0.000033202652391372056 + (x * (0.000004890304529197534 + (x * (-3.123956959982987e-7 + (x * 8.22063524662433e-18))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_517 = __evalpoly_517;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaDeltaRatio_379 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$evalpoly_508 = require( './polyval_co14.js' ); */;
/* removed: var _$evalpoly_509 = require( './polyval_co15.js' ); */;
/* removed: var _$evalpoly_510 = require( './polyval_co16.js' ); */;
/* removed: var _$evalpoly_511 = require( './polyval_co17.js' ); */;
/* removed: var _$evalpoly_512 = require( './polyval_co18.js' ); */;
/* removed: var _$evalpoly_513 = require( './polyval_co19.js' ); */;
/* removed: var _$evalpoly_515 = require( './polyval_co20.js' ); */;
/* removed: var _$evalpoly_516 = require( './polyval_co21.js' ); */;
/* removed: var _$evalpoly_517 = require( './polyval_co22.js' ); */;


// VARIABLES //

var c0 = 0.0;

// Workspace for the polynomial coefficients:
var c = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTBodySeries( df, u ) {
	var idf;
	var v;

	// Body series for small N, start with Eq 56 of Shaw:
	v = _$gammaDeltaRatio_379( df/2, 0.5 ) * _$sqrt_703( df*_$PI_84 ) * ( u-0.5 );

	// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):
	idf = 1.0 / df;
	c[ 1 ] = _$evalpoly_508( idf );
	c[ 2 ] = _$evalpoly_509( idf );
	c[ 3 ] = _$evalpoly_510( idf );
	c[ 4 ] = _$evalpoly_511( idf );
	c[ 5 ] = _$evalpoly_512( idf );
	c[ 6 ] = _$evalpoly_513( idf );
	c[ 7 ] = _$evalpoly_515( idf );
	c[ 8 ] = _$evalpoly_516( idf );
	c[ 9 ] = _$evalpoly_517( idf );

	// Result is then an odd polynomial in v (see Eq 56 of Shaw)...
	return c0 + ( v*_$evalpoly_750( c, v*v ) );
}


// EXPORTS //

var _$inverseStudentsTBodySeries_498 = inverseStudentsTBodySeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaDeltaRatio_379 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

// Array for the coefficients d(k), these depend only on the number of degrees of freedom df, so at least in theory we could tabulate these for fixed df, see p15 of Shaw:
var d = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {number} df - degrees of freedom
* @param {number} v - function value
* @returns {number} tail value
*/
function inverseStudentsTTailSeries( df, v ) { // eslint-disable-line id-length
	var result;
	var power;
	var div;
	var np2;
	var np4;
	var np6;
	var rn;
	var w;

	// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:
	w = _$gammaDeltaRatio_379( df/2.0, 0.5 ) * _$sqrt_703( df*_$PI_84 ) * v;

	// Define some variables:
	np2 = df + 2.0;
	np4 = df + 4.0;
	np6 = df + 6.0;

	d[ 0 ] = 1.0;
	d[ 1 ] = -(df+1.0) / (2.0*np2);
	np2 *= (df + 2.0);
	d[ 2 ] = -df * (df+1.0) * (df+3.0) / (8.0*np2*np4);
	np2 *= df + 2.0;
	d[ 3 ] = -df * (df+1.0) * (df+5.0) * (((3.0*df) + 7.0) * df - 2.0) / (48.0*np2*np4*np6); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	np4 *= (df + 4.0);
	d[ 4 ] = -df * (df+1.0) * (df+7.0) * ( (((((15.0*df) + 154.0) * df + 465.0) * df + 286.0) * df - 336.0) * df + 64.0) / (384.0*np2*np4*np6*(df+8.0)); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	d[ 5 ] = -df * (df+1.0) * (df+3.0) * (df+9.0) * (((((((35.0 * df + 452.0) * df+1573.0) * df + 600.0) * df - 2020.0) * df) + 928.0) * df - 128.0) / (1280.0*np2*np4*np6*(df+8.0) * (df+10.0)); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	np4 *= (df + 4.0);
	np6 *= (df + 6.0);
	d[ 6 ] = -df * (df+1.0) * (df+11.0) * ((((((((((((945.0*df) + 31506.0) * df + 425858.0) * df + 2980236.0) * df + 11266745.0) * df + 20675018.0) * df + 7747124.0) * df - 22574632.0) * df - 8565600.0) * df + 18108416.0) * df - 7099392.0) * df + 884736.0) / (46080.0*np2*np4*np6*(df+8.0) * (df+10.0) * (df+12.0)); // eslint-disable-line max-len, no-mixed-operators

	// Now bring everything together to provide the result this is Eq 62 of Shaw:
	rn = _$sqrt_703( df );
	div = _$pow_618( rn*w, 1.0/df );
	power = div * div;
	result = _$evalpoly_750( d, power );
	result *= rn;
	result /= div;
	return -result;
}


// EXPORTS //

var _$inverseStudentsTTailSeries_500 = inverseStudentsTTailSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/* eslint-disable no-mixed-operators */

'use strict';

// MODULES //

/* removed: var _$erfcinv_299 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$SQRT2_91 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Evaluates Student's t quantiles via a method due to Hill.
*
* ## References
*
* -   Hill, G. W. 1970. "Algorithm 396: Student's T-Quantiles." _Communications of the ACM_ 13 (10). New York, NY, USA: ACM: 619–20. doi:[10.1145/355598.355600](https://doi.org/10.1145/355598.355600).
*
* @private
* @param {PositiveNumber} ndf - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTHill( ndf, u ) {
	var a;
	var b;
	var c;
	var d;
	var q;
	var x;
	var y;

	if ( ndf > 1e20 ) {
		return -_$erfcinv_299( 2 * u ) * _$SQRT2_91;
	}
	a = 1.0 / ( ndf - 0.5 );
	b = 48.0 / (a * a);
	c = ( ( ( ( (20700.0*a/b) - 98.0 ) * a ) - 16.0 ) * a ) + 96.36;
	d = ( ( ( (94.5/(b+c)) - 3.0 ) / b ) + 1.0 ) * _$sqrt_703( a * _$HALF_PI_62 ) * ndf;
	y = _$pow_618( d * 2.0 * u, 2.0 / ndf );

	if ( y > ( 0.05 + a ) ) {
		// Asymptotic inverse expansion about normal:
		x = -_$erfcinv_299( 2.0 * u ) * _$SQRT2_91;
		y = x * x;

		if ( ndf < 5.0 ) {
			c += 0.3 * ( ndf-4.5 ) * ( x + 0.6 );
		}
		c += ( ( ( ( ( ( (0.05*d*x)-5.0 ) * x ) - 7.0 ) * x )- 2.0 ) * x ) + b;
		y = ((((((0.4*y+6.3)*y)+36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;
		y = _$expm1_327( a * y * y );
	} else {
		y = ((1.0 / ( ( (ndf+6.0) / (ndf*y) - 0.089 * d - 0.822 ) *
		(ndf+2.0) * 3.0 ) + 0.5 / (ndf+4.0)) * y - 1.0) *
		(ndf+1.0) / (ndf+2.0) + 1.0 / y;
	}
	q = _$sqrt_703( ndf * y );
	return -q;
}


// EXPORTS //

var _$inverseStudentsTHill_499 = inverseStudentsTHill;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$erfcinv_299 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$acos_122 = require( '@stdlib/math/base/special/acos' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$SQRT2_91 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$inverseStudentsTBodySeries_498 = require( './inverse_students_t_body_series.js' ); */;
/* removed: var _$inverseStudentsTTailSeries_500 = require( './inverse_students_t_tail_series.js' ); */;
/* removed: var _$inverseStudentsTHill_499 = require( './inverse_students_t_hill.js' ); */;


// VARIABLES //

var DF_THRESHOLD = 0x10000000; // 2^28
var __ONE_THIRD_497 = 1.0 / 3.0;
var EXP = ( 2.0 * 53.0 ) / 3.0;
var C = 0.85498797333834849467655443627193;


// MAIN //

/**
* Evaluates Student's t quantiles.
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @param {Probability} v - probability equal to `1-u`
* @returns {number} function value
*/
function inverseStudentsT( df, u, v ) {
	var crossover;
	var tolerance;
	var rootAlpha;
	var invert;
	var result;
	var alpha;
	var tmp;
	var p0;
	var p2;
	var p4;
	var p5;
	var p;
	var r;
	var x;
	var a;
	var b;

	result = 0;
	if ( u > v ) {
		// Function is symmetric, so invert it:
		tmp = v;
		v = u;
		u = tmp;
		invert = true;
	} else {
		invert = false;
	}
	if ( _$floor_346(df) === df && df < 20 ) {
		// We have integer degrees of freedom, try for the special cases first:
		tolerance = _$ldexp_543( 1.0, EXP );

		switch ( _$floor_346( df ) ) {
		case 1:
			// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:
			if ( u === 0.5 ) {
				result = 0.0;
			} else {
				result = -_$cos_226( _$PI_84 * u ) / _$sin_683( _$PI_84 * u );
			}
			break;
		case 2:
			// `df = 2` has an exact result, see Shaw Eq 36:
			result = ( (2.0*u) - 1.0 ) / _$sqrt_703( 2.0 * u * v );
			break;
		case 4:
			// `df = 4` has an exact result, see Shaw Eq 38 & 39:
			alpha = 4.0 * u * v;
			rootAlpha = _$sqrt_703( alpha );
			r = 4 * _$cos_226( _$acos_122( rootAlpha ) / 3.0 ) / rootAlpha;
			x = _$sqrt_703( r - 4.0 );
			result = ( u - 0.5 < 0.0 ) ? -x : x;
			break;
		case 6:
			// We get numeric overflow in this area:
			if ( u < 1.0e-150 ) {
				return ( ( invert ) ? -1 : 1 ) * _$inverseStudentsTHill_499( df, u );
			}
			// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:
			a = 4.0 * ( u - (u*u) );// 1 - 4 * (u - 0.5f) * (u - 0.5f);
			b = _$pow_618( a, __ONE_THIRD_497 );
			p = 6.0 * ( 1.0 + ( C * ( (1.0/b) - 1.0 ) ) );
			do {
				p2 = p * p;
				p4 = p2 * p2;
				p5 = p * p4;
				p0 = p;

				// Next term is given by Eq 41:
				p = 2.0 * ( (8.0*a*p5) - (270.0*p2) + 2187 ) /
					( 5.0 * ( (4.0*a*p4) - (216.0*p) - 243.0 ) );
			} while ( _$abs_118( (p - p0) / p ) > tolerance );

			// Use Eq 45 to extract the result:
			p = _$sqrt_703( p - df );
			result = ( u - 0.5 < 0.0 ) ? -p : p;
			break;
		default:
			if ( df > DF_THRESHOLD ) { // 2^28
				result = _$erfcinv_299( 2.0 * u ) * _$SQRT2_91;
			} else if ( df < 3 ) {
				// Use a roughly linear scheme to choose between Shaw's tail series and body series:
				crossover = 0.2742 - ( df * 0.0242143 );
				if ( u > crossover ) {
					result = _$inverseStudentsTBodySeries_498( df, u );
				} else {
					result = _$inverseStudentsTTailSeries_500( df, u );
				}
			} else {
				// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
				crossover = _$ldexp_543( 1.0, _$round_652( df / -0.654 ) );
				if ( u > crossover ) {
					result = _$inverseStudentsTHill_499( df, u );
				} else {
					result = _$inverseStudentsTTailSeries_500( df, u );
				}
			}
		}
	} else if ( df > DF_THRESHOLD ) {
		result = -_$erfcinv_299( 2.0 * u ) * _$SQRT2_91;
	} else if ( df < 3 ) {
		// Use a roughly linear scheme to choose between Shaw's tail series and body series:
		crossover = 0.2742 - ( df * 0.0242143 );
		if ( u > crossover ) {
			result = _$inverseStudentsTBodySeries_498( df, u );
		} else {
			result = _$inverseStudentsTTailSeries_500( df, u );
		}
	} else {
		// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
		crossover = _$ldexp_543( 1.0, _$round_652( df / -0.654 ) );
		if ( u > crossover ) {
			result = _$inverseStudentsTHill_499( df, u );
		} else {
			result = _$inverseStudentsTTailSeries_500( df, u );
		}
	}
	return ( invert ) ? -result : result;
}


// EXPORTS //

var _$inverseStudentsT_497 = inverseStudentsT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$inverseStudentsT_497 = require( './inverse_students_t.js' ); */;


// MAIN //

/**
* Returns the inverse of the incomplete beta function via the Student t distribution.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {Probability} p - probability value
* @param {Object} py - placeholder object holding one minus the returned value
* @returns {number} function value
*/
function findIBetaInvFromTDist( a, p, py ) {
	var df;
	var u;
	var v;
	var t;

	u = p / 2.0;
	v = 1.0 - u;
	df = a * 2.0;
	t = _$inverseStudentsT_497( df, u, v );
	if ( py ) {
		py.value = t * t / ( df + ( t*t ) );
	}
	return df / ( df + ( t*t ) );
}


// EXPORTS //

var _$findIBetaInvFromTDist_493 = findIBetaInvFromTDist;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$erfcinv_299 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$SQRT2_91 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// VARIABLES //

// Workspaces for the polynomial coefficients:
var __workspace_526 = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
var terms = [ 0.0, 0.0, 0.0, 0.0 ];


// MAIN //

/**
* Carries out the first method by Temme (described in section 2).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} z - function parameter
* @returns {number} function value
*/
function temme1( a, b, z ) {
	var eta0;
	var eta2;
	var eta;
	var B2;
	var B3;
	var B;
	var c;

	// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):
	eta0 = _$erfcinv_299( 2.0 * z );
	eta0 /= -_$sqrt_703( a / 2.0 );

	terms[ 0 ] = eta0;

	// Calculate powers:
	B = b - a;
	B2 = B * B;
	B3 = B2 * B;

	// Calculate correction terms:

	// See eq following 2.15:
	__workspace_526[ 0 ] = -B * _$SQRT2_91 / 2;
	__workspace_526[ 1 ] = ( 1 - (2.0*B) ) / 8.0;
	__workspace_526[ 2 ] = -(B * _$SQRT2_91 / 48.0);
	__workspace_526[ 3 ] = -1.0 / 192.0;
	__workspace_526[ 4 ] = -B * _$SQRT2_91 / 3840.0;
	__workspace_526[ 5 ] = 0.0;
	__workspace_526[ 6 ] = 0.0;
	terms[ 1 ] = _$evalpoly_750( __workspace_526, eta0 );

	// Eq Following 2.17:
	__workspace_526[ 0 ] = B * _$SQRT2_91 * ( (3.0*B) - 2.0) / 12.0;
	__workspace_526[ 1 ] = ( (20.0*B2) - (12.0*B) + 1.0 ) / 128.0;
	__workspace_526[ 2 ] = B * _$SQRT2_91 * ( (20.0*B) - 1.0) / 960.0;
	__workspace_526[ 3 ] = ( (16.0*B2) + (30.0*B) - 15.0) / 4608.0;
	__workspace_526[ 4 ] = B * _$SQRT2_91 * ( (21.0*B) + 32) / 53760.0;
	__workspace_526[ 5 ] = (-(32.0*B2) + 63.0) / 368640.0;
	__workspace_526[ 6 ] = -B * _$SQRT2_91 * ( (120.0*B) + 17.0) / 25804480.0;
	terms[ 2 ] = _$evalpoly_750( __workspace_526, eta0 );

	// Eq Following 2.17:
	__workspace_526[ 0 ] = B * _$SQRT2_91 * ( (-75*B2) + (80.0*B) - 16.0) / 480.0;
	__workspace_526[ 1 ] = ( (-1080.0*B3) + (868.0*B2) - (90.0*B) - 45.0) / 9216.0;
	__workspace_526[ 2 ] = B * _$SQRT2_91 * ( (-1190.0*B2) + (84.0*B) + 373.0) / 53760.0;
	__workspace_526[ 3 ] = ( (-2240.0*B3)-(2508.0*B2)+(2100.0*B)-165.0 ) / 368640.0;
	__workspace_526[ 4 ] = 0.0;
	__workspace_526[ 5 ] = 0.0;
	__workspace_526[ 6 ] = 0.0;
	terms[ 3 ] = _$evalpoly_750( __workspace_526, eta0 );

	// Bring them together to get a final estimate for eta:
	eta = _$evalpoly_750( terms, 1.0/a );

	// Now we need to convert eta to the return value `x`, by solving the appropriate quadratic equation:
	eta2 = eta * eta;
	c = -_$exp_314( -eta2 / 2.0 );
	if ( eta2 === 0.0 ) {
		return 0.5;
	}
	return ( 1.0 + ( eta * _$sqrt_703( ( 1.0+c ) / eta2 ) ) ) / 2.0;
}


// EXPORTS //

var _$temme1_526 = temme1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;


// VARIABLES //

var BIG = _$FLOAT64_MAX_75 / 4.0;


// MAIN //

/**
* Helper function used by root finding code to convert `eta` to `x`.
*
* @private
* @param {number} t - first parameter
* @param {number} a - second parameter
* @returns {Function} root function
*/
function temmeRootFinder( t, a ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - function value
	* @returns {Array} function roots
	*/
	function roots( x ) {
		var f1;
		var f;
		var y;

		y = 1.0 - x;
		if ( y === 0.0 ) {
			return [ -BIG, -BIG ];
		}
		if ( x === 0.0 ) {
			return [ -BIG, -BIG ];
		}
		f = _$ln_545( x ) + ( a * _$ln_545( y ) ) + t;
		f1 = ( 1.0 / x ) - ( a / y );
		return [ f, f1 ];
	}
}


// EXPORTS //

var _$temmeRootFinder_525 = temmeRootFinder;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the signum function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var sign = signum( -5.0 );
* // returns -1.0
*
* @example
* var sign = signum( 5.0 );
* // returns 1.0
*
* @example
* var sign = signum( -0.0 );
* // returns -0.0
*
* @example
* var sign = signum( 0.0 );
* // returns 0.0
*
* @example
* var sign = signum( NaN );
* // returns NaN
*/
function signum( x ) {
	if ( x === 0.0 || _$isnan_103( x ) ) {
		return x; // addresses both +-0
	}
	return ( x < 0.0 ) ? -1.0 : 1.0;
}


// EXPORTS //

var _$signum_682 = signum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the signum function.
*
* @module @stdlib/math/base/special/signum
*
* @example
* var signum = require( '@stdlib/math/base/special/signum' );
*
* var sign = signum( -5.0 );
* // returns -1.0
*
* sign = signum( 5.0 );
* // returns 1.0
*
* sign = signum( -0.0 );
* // returns -0.0
*
* sign = signum( 0.0 );
* // returns 0.0
*
* sign = signum( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$signum_682 = require( './signum.js' ); */;


// EXPORTS //

var _$signum_681 = _$signum_682;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$signum_681 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;


// MAIN //

/**
* Performs root finding via second order Newton-Raphson iteration.
*
* @private
* @param {Array} fun - two-element array of the function and its first derivative
* @param {number} guess - initial starting value.
* @param {number} min - minimum possible value for the result,used as initial lower bracket.
* @param {number} max - maximum possible value for the result, used as initial upper bracket.
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function newtonRaphsonIterate( fun, guess, min, max, digits, maxIter ) {
	var f0last;
	var delta1;
	var delta2;
	var factor;
	var result;
	var count;
	var delta;
	var res;
	var f0;
	var f1;

	f0 = 0.0;
	f0last = 0.0;
	result = guess;

	factor = _$ldexp_543( 1.0, 1.0 - digits );
	delta = _$FLOAT64_MAX_75;
	delta1 = _$FLOAT64_MAX_75;
	delta2 = _$FLOAT64_MAX_75;

	count = maxIter;
	do {
		f0last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun(result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		count -= 1;
		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === min ) {
					guess = max;
				} else {
					guess = min;
				}
				f0last = fun( guess );
				delta = guess - result;
			}
			if ( _$signum_681(f0last) * _$signum_681(f0) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = (result - min) / 2.0;
				} else {
					delta = (result - max) / 2.0;
				}
			} else if ( delta < 0 ) {
				delta = (result - max) / 2.0;
			} else {
				delta = (result - min) / 2.0;
			}
		} else {
			delta = f0 / f1;
		}
		if ( _$abs_118(delta * 2.0) > _$abs_118(delta2) ) {
			// Last two steps haven't converged, try bisection:
			delta = ( delta > 0.0 ) ? (result-min) / 2.0 : (result-max) / 2.0;
		}
		guess = result;
		result -= delta;
		if ( result <= min ) {
			delta = 0.5 * (guess - min);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		} else if ( result >= max ) {
			delta = 0.5 * (guess - max);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			max = guess;
		} else {
			min = guess;
		}
	}
	while ( count && ( _$abs_118(result * factor) < _$abs_118(delta) ) );

	return result;
}


// EXPORTS //

var _$newtonRaphsonIterate_502 = newtonRaphsonIterate;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_503( x ) {
	if ( x === 0.0 ) {
		return -1.0;
	}
	return -1.0 + (x * (-5.0 + (x * 5.0)));
}


// EXPORTS //

var _$evalpoly_503 = __evalpoly_503;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_507( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));
}


// EXPORTS //

var _$evalpoly_507 = __evalpoly_507;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_514( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));
}


// EXPORTS //

var _$evalpoly_514 = __evalpoly_514;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_518( x ) {
	if ( x === 0.0 ) {
		return 7.0;
	}
	return 7.0 + (x * (-2.0 + (x * (33.0 + (x * (-62.0 + (x * 31.0)))))));
}


// EXPORTS //

var _$evalpoly_518 = __evalpoly_518;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_519( x ) {
	if ( x === 0.0 ) {
		return 25.0;
	}
	return 25.0 + (x * (-52.0 + (x * (-17.0 + (x * (88.0 + (x * (-115.0 + (x * 46.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_519 = __evalpoly_519;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_520( x ) {
	if ( x === 0.0 ) {
		return 7.0;
	}
	return 7.0 + (x * (12.0 + (x * (-78.0 + (x * 52.0)))));
}


// EXPORTS //

var _$evalpoly_520 = __evalpoly_520;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_521( x ) {
	if ( x === 0.0 ) {
		return -7.0;
	}
	return -7.0 + (x * (2.0 + (x * (183.0 + (x * (-370.0 + (x * 185.0)))))));
}


// EXPORTS //

var _$evalpoly_521 = __evalpoly_521;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_522( x ) {
	if ( x === 0.0 ) {
		return -533.0;
	}
	return -533.0 + (x * (776.0 + (x * (-1835.0 + (x * (10240.0 + (x * (-13525.0 + (x * 5410.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_522 = __evalpoly_522;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_523( x ) {
	if ( x === 0.0 ) {
		return -1579.0;
	}
	return -1579.0 + (x * (3747.0 + (x * (-3372.0 + (x * (-15821.0 + (x * (45588.0 + (x * (-45213.0 + (x * 15071.0))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_523 = __evalpoly_523;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_524( x ) {
	if ( x === 0.0 ) {
		return 449.0;
	}
	return 449.0 + (x * (-1259.0 + (x * (-769.0 + (x * (6686.0 + (x * (-9260.0 + (x * 3704.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_524 = __evalpoly_524;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_504( x ) {
	if ( x === 0.0 ) {
		return 63149.0;
	}
	return 63149.0 + (x * (-151557.0 + (x * (140052.0 + (x * (-727469.0 + (x * (2239932.0 + (x * (-2251437.0 + (x * 750479.0))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_504 = __evalpoly_504;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_505( x ) {
	if ( x === 0.0 ) {
		return 29233.0;
	}
	return 29233.0 + (x * (-78755.0 + (x * (105222.0 + (x * (146879.0 + (x * (-1602610.0 + (x * (3195183.0 + (x * (-2554139.0 + (x * 729754.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_505 = __evalpoly_505;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_506( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (-13.0 + (x * 13.0)));
}


// EXPORTS //

var _$evalpoly_506 = __evalpoly_506;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$erfcinv_299 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$temmeRootFinder_525 = require( './root_finder.js'); */;
/* removed: var _$newtonRaphsonIterate_502 = require( './newton_raphson.js' ); */;
/* removed: var _$evalpoly_503 = require( './polyval_co1.js' ); */;
/* removed: var _$evalpoly_514 = require( './polyval_co2.js' ); */;
/* removed: var _$evalpoly_518 = require( './polyval_co3.js' ); */;
/* removed: var _$evalpoly_519 = require( './polyval_co4.js' ); */;
/* removed: var _$evalpoly_520 = require( './polyval_co5.js' ); */;
/* removed: var _$evalpoly_521 = require( './polyval_co6.js' ); */;
/* removed: var _$evalpoly_522 = require( './polyval_co7.js' ); */;
/* removed: var _$evalpoly_523 = require( './polyval_co8.js' ); */;
/* removed: var _$evalpoly_524 = require( './polyval_co9.js' ); */;
/* removed: var _$evalpoly_504 = require( './polyval_co10.js' ); */;
/* removed: var _$evalpoly_505 = require( './polyval_co11.js' ); */;
/* removed: var _$evalpoly_506 = require( './polyval_co12.js' ); */;
/* removed: var _$evalpoly_507 = require( './polyval_co13.js' ); */;


// VARIABLES //

// Workspaces for polynomial coefficients:
var __workspace_527 = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
var __terms_527 = [ 0.0, 0.0, 0.0, 0.0 ];


// MAIN //

/**
* Carries out the second method by Temme (described in section 3).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {number} z - function parameter
* @param {number} r - function parameter
* @param {number} theta - function parameter
* @returns {number} function value
*/
function temme2( z, r, theta ) {
	var upper;
	var lower;
	var alpha;
	var roots;
	var eta0;
	var eta;
	var sc7;
	var sc6;
	var sc5;
	var sc4;
	var sc3;
	var sc2;
	var sc;
	var lu;
	var s2;
	var c2;
	var c;
	var s;
	var u;
	var x;

	// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:
	eta0 = _$erfcinv_299( 2.0*z ) / (-_$sqrt_703( r/2.0 ));

	s = _$sin_683( theta );
	c = _$cos_226( theta );

	// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array "terms".  Since these terms are themselves polynomials, we'll need another array "workspace" to calculate those...
	__terms_527[ 0 ] = eta0;

	// Some powers of sin(theta) cos(theta) that we'll need later:
	s2 = s * s;
	c2 = c * c;
	sc = s * c;
	sc2 = sc * sc;
	sc3 = sc2 * sc;
	sc4 = sc2 * sc2;
	sc5 = sc2 * sc3;
	sc6 = sc3 * sc3;
	sc7 = sc4 * sc3;

	// Calculate e1 and put it in terms[1], see the middle of page 151:
	__workspace_527[ 0 ] = ((2.0*s2) - 1.0) / ( 3.0*sc );
	__workspace_527[ 1 ] = -_$evalpoly_503( s2 ) / (36.0*sc2);
	__workspace_527[ 2 ] = _$evalpoly_514( s2 ) / (1620.0*sc3);
	__workspace_527[ 3 ] = _$evalpoly_518( s2 ) / (6480.0*sc4);
	__workspace_527[ 4 ] = _$evalpoly_519( s2 ) / (90720.0*sc5);
	__workspace_527[ 5 ] = 0.0;
	__terms_527[ 1 ] = _$evalpoly_750( __workspace_527, eta0 );

	// Now evaluate e2 and put it in terms[2]:
	__workspace_527[ 0 ] = -_$evalpoly_520( s2 ) / (405.0*sc3);
	__workspace_527[ 1 ] = _$evalpoly_521( s2 ) / (2592.0*sc4);
	__workspace_527[ 2 ] = -_$evalpoly_522( s2 ) / (204120.0*sc5);
	__workspace_527[ 3 ] = -_$evalpoly_523( s2 ) / (2099520.0*sc6);
	__workspace_527[ 4 ] = 0.0;
	__workspace_527[ 5 ] = 0.0;
	__terms_527[ 2 ] = _$evalpoly_750( __workspace_527, eta0 );

	// And e3, and put it in terms[3]:
	__workspace_527[ 0 ] = _$evalpoly_524( s2 ) / (102060.0*sc5);
	__workspace_527[ 1 ] = -_$evalpoly_504( s2 ) / (20995200.0*sc6);
	__workspace_527[ 2 ] = _$evalpoly_505( s2 ) / (36741600.0*sc7);
	__workspace_527[ 3 ] = 0.0;
	__workspace_527[ 4 ] = 0.0;
	__workspace_527[ 5 ] = 0.0;
	__terms_527[ 3 ] = _$evalpoly_750( __workspace_527, eta0 );

	// Bring the correction terms together to evaluate eta; this is the last equation on page 151:
	eta = _$evalpoly_750( __terms_527, 1.0/r );

	// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:
	alpha = c / s;
	alpha *= alpha;
	lu = ( -( eta*eta )/( 2.0*s2 ) ) + _$ln_545(s2) + ( c2*_$ln_545(c2)/s2 );

	// Temme doesn't specify what value to switch on here, but this seems to work pretty well:
	if ( _$abs_118(eta) < 0.7 ) {
		// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:
		__workspace_527[ 0 ] = s2;
		__workspace_527[ 1 ] = sc;
		__workspace_527[ 2 ] = (1.0-(2.0*s2)) / 3.0;
		__workspace_527[ 3 ] = _$evalpoly_506( s2 ) / ( 36.0*sc );
		__workspace_527[ 4 ] = _$evalpoly_507( s2 ) / ( 270.0*sc2 );
		__workspace_527[ 5 ] = 0.0;
		x = _$evalpoly_750( __workspace_527, eta );
	} else {
		// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:
		u = _$exp_314( lu );
		__workspace_527[ 0 ] = u;
		__workspace_527[ 1 ] = alpha;
		__workspace_527[ 2 ] = 0.0;
		__workspace_527[ 3 ] = 3.0 * alpha * ((3.0*alpha)+1.0) / 6.0;
		__workspace_527[ 4 ] = 4.0 * alpha * ((4.0*alpha)+1.0) * ((4.0*alpha)+2.0) / 24.0; // eslint-disable-line max-len
		__workspace_527[ 5 ] = 5.0 * alpha * ((5.0*alpha)+1.0) * ((5.0*alpha)+2.0) * ((5.0*alpha)+3.0) / 120.0; // eslint-disable-line max-len
		x = _$evalpoly_750( __workspace_527, u );

		// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:
		if ( (x-s2)*eta < 0.0 ) {
			x = 1.0 - x;
		}
	}
	// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.
	if ( eta < 0.0 ) {
		lower = 0.0;
		upper = s2;
	} else {
		lower = s2;
		upper = 1.0;
	}
	// If our initial approximation is out of bounds then bisect:
	if ( x < lower || x > upper ) {
		x = (lower+upper) / 2.0;
	}
	roots = _$temmeRootFinder_525( -lu, alpha );

	// And iterate:
	x = _$newtonRaphsonIterate_502( roots, x, lower, upper, 32, 100 );
	return x;
}


// EXPORTS //

var _$temme2_527 = temme2;

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var __d_799 = h * 24;
var y = __d_799 * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var _$ms_799 = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * __d_799;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= __d_799) {
    return Math.round(ms / __d_799) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, __d_799, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

var _$debug_798 = {};

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

_$debug_798 = _$debug_798 = createDebug.debug = createDebug['default'] = createDebug;
_$debug_798.coerce = coerce;
_$debug_798.disable = disable;
_$debug_798.enable = enable;
_$debug_798.enabled = enabled;
_$debug_798.humanize = _$ms_799;

/**
 * The currently active debug mode names, and names to skip.
 */

_$debug_798.names = [];
_$debug_798.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

_$debug_798.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return _$debug_798.colors[Math.abs(hash) % _$debug_798.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = _$debug_798.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = _$debug_798.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    _$debug_798.formatArgs.call(self, args);

    var logFn = debug.log || _$debug_798.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = _$debug_798.enabled(namespace);
  debug.useColors = _$debug_798.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof _$debug_798.init) {
    _$debug_798.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  _$debug_798.save(namespaces);

  _$debug_798.names = [];
  _$debug_798.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      _$debug_798.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      _$debug_798.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  _$debug_798.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = _$debug_798.skips.length; i < len; i++) {
    if (_$debug_798.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = _$debug_798.names.length; i < len; i++) {
    if (_$debug_798.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

var _$browser_800 = {};
// shim for using process in browser
var process = _$browser_800 = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

var _$browser_797 = {};
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

_$browser_797 = _$browser_797 = _$debug_798;
_$browser_797.log = log;
_$browser_797.formatArgs = formatArgs;
_$browser_797.save = save;
_$browser_797.load = load;
_$browser_797.useColors = useColors;
_$browser_797.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

_$browser_797.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

_$browser_797.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + _$browser_797.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      _$browser_797.storage.removeItem('debug');
    } else {
      _$browser_797.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = _$browser_797.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

_$browser_797.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,_$browser_800)
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum single-precision floating-point number.
*
* @module @stdlib/constants/math/float32-max
* @type {number}
*
* @example
* var FLOAT32_MAX = require( '@stdlib/constants/math/float32-max' );
* // returns 3.4028234663852886e+38
*/


// MAIN //

/**
* Maximum single-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{127} (2 - 2^{-23})
* ```
*
* @constant
* @type {number}
* @default 3.4028234663852886e+38
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_MAX = 3.4028234663852886e+38;


// EXPORTS //

var _$FLOAT32_MAX_53 = FLOAT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$gammainc_403 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT32_MAX_53 = require( '@stdlib/constants/math/float32-max' ); */;


// VARIABLES //

var debug = _$browser_797( 'gammaincinv:higher_newton' );


// MAIN //

/**
* Implementation of the high order Newton-like method.
*
* @private
* @param {number} x0 - initial value
* @param {number} a - scale parameter
* @param {number} m - indicator
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @param {number} lgama - logarithm of scale parameter
* @param {number} invfp - one over `fp`
* @param {boolean} pcase - boolean indicating whether p < 0.5
* @returns {number} function value of the inverse
*/
function higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {
	var dlnr;
	var xini;
	var ck0;
	var ck1;
	var ck2;
	var a2;
	var x2;
	var px;
	var qx;
	var xr;
	var t;
	var n;
	var r;
	var x;

	x = x0;
	t = 1;
	n = 1;
	a2 = a * a;
	xini = x0;
	do {
		x = x0;
		x2 = x * x;
		if ( m === 0 ) {
			dlnr = ( ( 1.0-a ) * _$ln_545( x ) ) + x + lgama;
			if ( dlnr > _$ln_545( _$FLOAT32_MAX_53 ) ) {
				debug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );
				return xini;
			}
			r = _$exp_314( dlnr );
		} else {
			r = -invfp * x;
		}
		if ( pcase ) {
			// Call: gammainc( x, s[, regularized = true ][, upper = false ] )
			px = _$gammainc_403( x, a, true, false );
			ck0 = -r * ( px - p );
		} else {
			// Call: gammainc( x, s[, regularized = true ][, upper = true ] )
			qx = _$gammainc_403( x, a, true, true );
			ck0 = r * ( qx - q );
		}
		r = ck0;
		if ( ( p > 1e-120 ) || ( n > 1 ) ) {
			ck1 = 0.5 * ( x - a + 1.0 ) / x;
			ck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;
			ck2 /= 6.0;
			x0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );
		} else {
			x0 = x + r;
		}
		t = _$abs_118( ( x/x0 ) - 1.0 );
		n += 1;
		x = x0;
		if ( x < 0 ) {
			x = xini;
			n = 100;
		}
	} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );
	if ( ( t > 2e-14 ) || ( n > 99 ) ) {
		debug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );
	}
	xr = x || 0;
	return xr;
}


// EXPORTS //

var _$higherNewton_427 = higherNewton;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_430( x ) {
	if ( x === 0.0 ) {
		return 0.0;
	}
	return 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_430 = __evalpoly_430;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_431( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_431 = __evalpoly_431;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$evalpoly_430 = require( './polyval_ak1.js' ); */;
/* removed: var _$evalpoly_431 = require( './polyval_ak2.js' ); */;


// VARIABLES //

var THRESHOLD = 1.0e-8;
var ONEO12 = 0.0833333333333333333333333333333;
var ONEO120 = 0.00833333333333333333333333333333;

// Polynomial coefficient workspace:
var AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns the positive number satisfying \\( \eta^2/2=\lambda-1-\ln(\lambda) \\) with \\( \operatorname{sign}(\lambda-1)=\operatorname{sign}(\eta) \\).
*
* @private
* @param {number} eta - eta value
* @returns {number} value satisfying equation
*/
function lambdaeta( eta ) {
	var L2;
	var L3;
	var L4;
	var L5;
	var la;
	var L;
	var q;
	var r;
	var s;

	s = eta * eta * 0.5;
	if ( eta === 0.0 ) {
		la = 0.0;
	}
	else if ( eta < -1.0 ) {
		r = _$exp_314( -1.0 - s );
		la = _$evalpoly_430( r );
	}
	else if ( eta < 1.0 ) {
		r = eta;
		la = _$evalpoly_431( r );
	}
	else {
		r = 11.0 + s;
		L = _$ln_545( r );
		la = r + L;
		r = 1.0 / r;
		L2 = L * L;
		L3 = L2 * L;
		L4 = L3 * L;
		L5 = L4 * L;
		AK[ 1 ] = ( 2.0-L ) * 0.5;
		AK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;
		AK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;
		AK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len
		AK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len
		la += ( L * r * _$evalpoly_750( AK, r ) );
	}
	r = 1.0;
	if (
		( eta > -3.5 && eta < -0.03 ) ||
		( eta > 0.03 && eta < 40.0 )
	) {
		r = 1.0;
		q = la;
		do {
			la = q * ( s+_$ln_545(q) ) / ( q-1.0 );
			r = _$abs_118( ( q/la ) - 1.0 );
			q = la;
		} while ( r > THRESHOLD );
	}
	return la;
}


// EXPORTS //

var _$lambdaeta_429 = lambdaeta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the square root of `2π`.
*
* @module @stdlib/constants/math/float64-ln-sqrt-two-pi
* @type {number}
*
* @example
* var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
* // returns 0.9189385332046728
*/


// MAIN //

/**
* Natural logarithm of the square root of `2π`.
*
* ```tex
* \ln \sqrt{2\pi}
* ```
*
* @constant
* @type {number}
* @default 0.9189385332046728
*/
var LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len


// EXPORTS //

var _$LN_SQRT_TWO_PI_66 = LN_SQRT_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// Chebyshev polynomial coefficients...
var A = [
	1.996379051590076518221,
	-0.17971032528832887213e-2,
	0.131292857963846713e-4,
	-0.2340875228178749e-6,
	0.72291210671127e-8,
	-0.3280997607821e-9,
	0.198750709010e-10,
	-0.15092141830e-11,
	0.1375340084e-12,
	-0.145728923e-13,
	0.17532367e-14,
	-0.2351465e-15,
	0.346551e-16,
	-0.55471e-17,
	0.9548e-18,
	-0.1748e-18,
	0.332e-19,
	-0.58e-20
];


// MAIN //

/**
* Computes the sum of a Chebyshev polynomial.
*
* @private
* @param {PositiveInteger} n - degree of polynomial
* @param {number} t - input value
* @returns {number} Chebyshev sum
*/
function chepolsum( n, t ) {
	var tt;
	var u0;
	var u1;
	var u2;
	var k;

	u0 = 0.0;
	u1 = 0.0;
	tt = t + t;
	k = n;
	do {
		u2 = u1;
		u1 = u0;
		u0 = ( tt*u1 ) - u2 + A[ k ];
		k -= 1;
	} while ( k >= 0 );
	return ( u0-u2 ) / 2.0;
}


// EXPORTS //

var _$chepolsum_420 = chepolsum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_432( x ) {
	if ( x === 0.0 ) {
		return 0.025721014990011306;
	}
	return 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_432 = __evalpoly_432;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_433( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333333;
	}
	return 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_433 = __evalpoly_433;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_SQRT_TWO_PI_66 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_54 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;
/* removed: var _$FLOAT32_MAX_53 = require( '@stdlib/constants/math/float32-max' ); */;
/* removed: var _$chepolsum_420 = require( './chepolsum.js' ); */;
/* removed: var _$evalpoly_432 = require( './polyval_c.js' ); */;
/* removed: var _$evalpoly_433 = require( './polyval_d.js' ); */;


// VARIABLES //

var __C6_443 = 0.30865217988013567769;


// MAIN //

/**
* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.
*
* ```tex
* \frac{1}{12x}-\frac{1}{360x^3}\ldots; x \ge 3
* ```
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function stirling( x ) {
	var z;
	if ( x < _$FLOAT32_SMALLEST_NORMAL_54 ) {
		return _$FLOAT32_MAX_53;
	}
	if ( x < 1.0 ) {
		return _$gammaln_445( x+1.0 ) - ( (x+0.5) * _$ln_545(x) ) + x - _$LN_SQRT_TWO_PI_66;
	}
	if ( x < 2.0 ) {
		return _$gammaln_445( x ) - ( (x-0.5) * _$ln_545(x) ) + x - _$LN_SQRT_TWO_PI_66;
	}
	if ( x < 3.0 ) {
		return _$gammaln_445( x-1.0 ) - ( (x-0.5) * _$ln_545(x) ) + x - _$LN_SQRT_TWO_PI_66 + _$ln_545( x-1.0 ); // eslint-disable-line max-len
	}
	if ( x < 12.0 ) {
		z = ( 18.0/( x*x ) ) - 1.0;
		return _$chepolsum_420( 17, z ) / ( 12.0*x );
	}
	z = 1.0 / ( x * x );
	if ( x < 1000.0 ) {
		return _$evalpoly_432( z ) / ( __C6_443+z ) / x;
	}
	return _$evalpoly_433( z ) / x;
}


// EXPORTS //

var _$stirling_443 = stirling;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT32_MAX_53 = require( '@stdlib/constants/math/float32-max' ); */;
/* removed: var _$SQRT_TWO_PI_90 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$stirling_443 = require( './stirling.js' ); */;


// MAIN //

/**
* Computes the regulated gamma function.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamstar( x ) {
	if ( x >= 3.0 ) {
		return _$exp_314( _$stirling_443(x) );
	}
	if ( x > 0.0 ) {
		return _$gamma_387(x) / ( _$exp_314( -x + ( ( x-0.5 ) * _$ln_545(x) ) ) * _$SQRT_TWO_PI_90 );
	}
	// Case: x <= 0.0
	return _$FLOAT32_MAX_53;
}


// EXPORTS //

var _$gamstar_426 = gamstar;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_434( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.3333333333438;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len
		s2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_434 = __evalrational_434;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$lambdaeta_429 = require( './lambdaeta.js' ); */;
/* removed: var _$evalrational_434 = require( './rational_ak0bk0.js' ); */;


// MAIN //

/**
* Evaluates the `eps1` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps1( eta ) {
	var la;
	if ( _$abs_118( eta ) < 1.0 ) {
		return _$evalrational_434( eta );
	}
	la = _$lambdaeta_429( eta );
	return _$ln_545( eta / ( la - 1.0 ) ) / eta;
}


// EXPORTS //

var _$eps1_422 = eps1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_435( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0172847633523;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len
		s2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_435 = __evalrational_435;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_436( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0172839517431;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len
		s2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_436 = __evalrational_436;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_437( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.99994466948;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len
		s2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_437 = __evalrational_437;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalrational_435 = require( './rational_ak1bk1.js' ); */;
/* removed: var _$evalrational_436 = require( './rational_ak2bk2.js' ); */;
/* removed: var _$evalrational_437 = require( './rational_ak3bk3.js' ); */;


// MAIN //

/**
* Evaluates the `eps2` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps2( eta ) {
	var lnmeta;
	var x;
	if ( eta < -5.0 ) {
		x = eta * eta;
		lnmeta = _$ln_545( -eta );
		return ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );
	}
	if ( eta < -2.0 ) {
		return _$evalrational_435( eta );
	}
	if ( eta < 2.0 ) {
		return _$evalrational_436( eta );
	}
	if ( eta < 1000.0 ) {
		x = 1.0 / eta;
		return _$evalrational_437( eta ) / ( -12.0*eta );
	}
	return -1.0 / ( 12.0 * eta );
}


// EXPORTS //

var _$eps2_423 = eps2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_438( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.0495346498136;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len
		s2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_438 = __evalrational_438;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_439( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.00452313583942;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len
		s2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_439 = __evalrational_439;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_440( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.00439937562904;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len
		s2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_440 = __evalrational_440;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_441( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0011481191232;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len
		s2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_441 = __evalrational_441;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_442( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.000145727889667;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len
		s2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_442 = __evalrational_442;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalrational_438 = require( './rational_ak4bk4.js' ); */;
/* removed: var _$evalrational_439 = require( './rational_ak5bk5.js' ); */;
/* removed: var _$evalrational_440 = require( './rational_ak6bk6.js' ); */;
/* removed: var _$evalrational_441 = require( './rational_ak7bk7.js' ); */;
/* removed: var _$evalrational_442 = require( './rational_ak8bk8.js' ); */;


// MAIN //

/**
* Evaluates the `eps3` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps3( eta ) {
	var x;
	var y;

	if ( eta < -8.0 ) {
		x = eta * eta;
		y = _$ln_545( -eta ) / eta;
		return ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );
	}
	if ( eta < -4.0 ) {
		return _$evalrational_438( eta ) / ( eta*eta );
	}
	if ( eta < -2.0 ) {
		return _$evalrational_439( eta );
	}
	if ( eta < 2.0 ) {
		return _$evalrational_440( eta );
	}
	if ( eta < 10.0 ) {
		x = 1.0 / eta;
		return _$evalrational_441( x ) / ( eta*eta );
	}
	if ( eta < 100.0 ) {
		x = 1.0 / eta;
		return _$evalrational_442( x ) / ( eta*eta );
	}
	return -_$ln_545( eta ) / ( 12.0*eta*eta*eta );
}


// EXPORTS //

var _$eps3_424 = eps3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-statements */

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$erfcinv_299 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$SQRT_TWO_PI_90 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$FLOAT32_MAX_53 = require( '@stdlib/constants/math/float32-max' ); */;
/* removed: var _$TWO_PI_92 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$higherNewton_427 = require( './higher_newton.js' ); */;
/* removed: var _$lambdaeta_429 = require( './lambdaeta.js' ); */;
/* removed: var _$gamstar_426 = require( './gamstar.js' ); */;
/* removed: var _$eps1_422 = require( './eps1.js' ); */;
/* removed: var _$eps2_423 = require( './eps2.js' ); */;
/* removed: var _$eps3_424 = require( './eps3.js' ); */;


// VARIABLES //

var __debug_421 = _$browser_797( 'gammaincinv:compute' );
var HALF = 0.5;
var ONEO3 = 0.333333333333333333333333333333;
var ONEO4 = 0.25;
var ONEO5 = 0.2;
var ONEO6 = 0.166666666666666666666666666667;
var __ONEO12_421 = 0.0833333333333333333333333333333;
var ONEO24 = 0.0416666666666666666666666666667;

// Coefficient workspace:
var CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.
*
* ## Notes
*
* -   The equation is inverted with `min(p,q)`.
*
* @private
* @param {number} a - scale value of incomplete gamma function
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter
*/
function __compute_421( a, p, q ) {
	var ap1inv;
	var invfp;
	var lgama;
	var pcase;
	var porq;
	var ainv;
	var logr;
	var ap22;
	var ap14;
	var ap13;
	var ap12;
	var vgam;
	var vmin;
	var xini;
	var ap1;
	var ap2;
	var ap3;
	var eta;
	var p6;
	var p5;
	var x0;
	var a2;
	var L2;
	var L3;
	var L4;
	var b2;
	var b3;
	var p3;
	var a4;
	var fp;
	var p4;
	var p2;
	var a3;
	var xr;
	var ck;
	var b;
	var L;
	var i;
	var k;
	var m;
	var r;
	var s;
	var t;
	var y;

	if ( p < HALF ) {
		pcase = true;
		porq = p;
		s = -1.0;
	} else {
		pcase = false;
		porq = q;
		s = 1.0;
	}
	k = 0;
	if ( _$abs_118( a-1.0 ) < 1.0e-4 ) {
		m = 0;
		if ( pcase ) {
			if ( p < 1.0e-3 ) {
				p2 = p * p;
				p3 = p2 * p;
				p4 = p3 * p;
				p5 = p4 * p;
				p6 = p5 * p;
				x0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len
			} else {
				x0 = -_$ln_545( 1.0-p );
			}
		} else {
			x0 = -_$ln_545( q );
		}
		if ( a === 1.0 ) {
			k = 2;
			xr = x0;
		} else {
			lgama = _$gammaln_445( a );
			k = 1;
		}
	}
	if ( q < 1.0e-30 && a < HALF ) {
		m = 0;
		x0 = -_$ln_545( q*_$gamma_387(a) ) + ( ( a-1.0 ) * _$ln_545( -_$ln_545( q*_$gamma_387(a) ) ));
		k = 1;
		lgama = _$gammaln_445( a );
	}
	if ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {
		m = 0;
		ainv = 1.0 / a;
		ap1inv = 1.0 / ( a+1.0 );
		x0 = ( _$gammaln_445( a+1.0 ) + _$ln_545( p ) ) * ainv;
		x0 = _$exp_314( x0 );
		xini = x0;
		for ( i = 0; i < 10; i++ ) {
			x0 = xini * _$exp_314( x0*ainv ) * _$pow_618( 1.0-( x0*ap1inv ), ainv );
		}
		k = 1;
		lgama = _$gammaln_445( a );
	}

	logr = (1.0/a) * ( _$ln_545(p) + _$gammaln_445( a+1.0 ) );
	if ( ( logr < _$ln_545( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {
		r = _$exp_314( logr );
		m = 0;
		a2 = a * a;
		a3 = a2 * a;
		a4 = a3 * a;
		ap1 = a + 1.0;
		ap12 = ap1 * ap1;
		ap13 = ap1 * ap12;
		ap14 = ap12 * ap12;
		ap2 = a + 2.0;
		ap22 = ap2 * ap2;
		ap3 = a + 3.0;
		CK[ 0 ] = 1.0;
		CK[ 1 ] = 1.0 / ap1;
		CK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );
		CK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );
		CK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) + (5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len
		x0 = r * _$evalpoly_750( CK, r );
		lgama = _$gammaln_445( a );
		k = 1;
	}
	if ( ( a < 10.0 ) && ( k === 0 ) ) {
		vgam = _$sqrt_703( a ) / ( _$gamstar_426(a)*_$SQRT_TWO_PI_90 );
		vmin = _$min_579( 0.02, vgam );
		if ( q < vmin ) {
			m = 0;
			b = 1.0 - a;
			b2 = b * b;
			b3 = b2 * b;
			eta = _$sqrt_703( -2.0/a * _$ln_545( q/vgam ) );
			x0 = a * _$lambdaeta_429( eta );
			L = _$ln_545( x0 );
			if ( x0 > 5.0 ) {
				L2 = L * L;
				L3 = L2 * L;
				L4 = L3 * L;
				r = 1.0 / x0;
				CK[ 0 ] = L - 1.0;
				CK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;
				CK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len
				CK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * __ONEO12_421; // eslint-disable-line max-len
				CK[ 4 ] = 0.0;
				x0 = x0 - L + ( b*r*_$evalpoly_750( CK, r ) );
			} else {
				r = 1.0 / x0;
				L2 = L * L;
				ck = L - 1.0;
				t = L - (b*r*ck);
				if ( t < x0 ) {
					x0 -= t;
				}
			}
			lgama = _$gammaln_445( a );
			k = 1;
		}
	}
	if ( ( _$abs_118( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {
		m = 0;
		ainv = 1.0 / a;
		x0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +
			( 0.00721144424848128551832255535959*ainv ) ) * ainv );
		lgama = _$gammaln_445( a );
		k = 1;
	}
	if ( ( a < 1.0 ) && ( k === 0 ) ) {
		m = 0;
		if (pcase) {
			x0 = _$exp_314( (1.0/a) * ( _$ln_545(porq) + _$gammaln_445(a+1.0) ) );
		} else {
			x0 = _$exp_314( (1.0/a) * ( _$ln_545(1.0-porq) + _$gammaln_445(a+1.0) ) );
		}
		lgama = _$gammaln_445( a );
		k = 1;
	}
	if ( k === 0 ) {
		m = 1;
		ainv = 1.0 / a;
		r = _$erfcinv_299( 2.0 * porq );
		eta = s * r / _$sqrt_703( a*HALF );
		if ( r < _$FLOAT32_MAX_53 ) {
			eta += ( _$eps1_422(eta) + ( (_$eps2_423(eta)+(_$eps3_424(eta)*ainv))*ainv ) ) * ainv;
			x0 = a * _$lambdaeta_429(eta);
			y = eta;
			fp = -_$sqrt_703( a/_$TWO_PI_92 ) * _$exp_314( -HALF*a*y*y ) / ( _$gamstar_426(a) );
			invfp = 1.0 / fp;
		} else {
			__debug_421( 'Warning: Overflow problems in one or more steps of the computation.' );
			return NaN;
		}
	}
	if ( k < 2 ) {
		xr = _$higherNewton_427( x0, a, m, p, q, lgama, invfp, pcase );
	}
	return xr;
}


// EXPORTS //

var _$compute_421 = __compute_421;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Translated from the Fortran module by
* ----------------------------------------------------------------------
* Authors:
*  Amparo Gil    (U. Cantabria, Santander, Spain)
*                 e-mail: amparo.gil@unican.es
*  Javier Segura (U. Cantabria, Santander, Spain)
*                 e-mail: javier.segura@unican.es
*  Nico M. Temme (CWI, Amsterdam, The Netherlands)
*                 e-mail: nico.temme@cwi.nl
* ---------------------------------------------------------------------
*/

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_54 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$compute_421 = require( './compute.js' ); */;


// MAIN //

/**
* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.
*
* ## Method
*
* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.
*
* ## Notes
*
* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.
*
* ## References
*
* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun
* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981
*
*
* @param {Probability} p - probability value
* @param {number} a - scale parameter
* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.
* @returns {number} function value of the inverse
*/
function gammaincinv( p, a, upper ) {
	if ( _$isnan_103( p ) || _$isnan_103( a ) ) {
		return NaN;
	}
	if ( a < _$FLOAT32_SMALLEST_NORMAL_54 ) {
		return NaN;
	}
	if ( p > 1.0 || p < 0.0 ) {
		return NaN;
	}
	// Case: invert upper gamma function
	if ( upper === true ) {
		if ( p === 0.0 ) {
			return _$FLOAT64_PINF_85;
		}
		if ( p === 1.0 ) {
			return 0.0;
		}
		return _$compute_421( a, 1.0-p, p );
	}
	// Default: invert lower gamma function
	if ( p === 0.0 ) {
		return 0.0;
	}
	if ( p === 1.0 ) {
		return _$FLOAT64_PINF_85;
	}
	return _$compute_421( a, p, 1.0-p );
}


// EXPORTS //

var _$gammaincinv_425 = gammaincinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse of the lower incomplete gamma function.
*
* @module @stdlib/math/base/special/gammaincinv
*
* @example
* var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
*
* var val = gammaincinv( 0.5, 2.0 );
* // returns ~1.678
*
* val = gammaincinv( 0.1, 10.0 );
* // returns ~6.221
*
* val = gammaincinv( 0.75, 3.0 );
* // returns ~3.92
*
* val = gammaincinv( 0.75, 3.0, true );
* // returns ~1.727
*
* val = gammaincinv( 0.75, NaN );
* // returns NaN
*
* val = gammaincinv( NaN, 3.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaincinv_425 = require( './gammaincinv.js' ); */;


// EXPORTS //

var _$gammaincinv_428 = _$gammaincinv_425;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point subnormal number.
*
* @module @stdlib/constants/math/float64-smallest-subnormal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float64-smallest-subnormal' );
* // returns 4.940656458412465e-324
*/


// MAIN //

/**
* The smallest positive double-precision floating-point subnormal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1} 2^{52}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000000 00000000000000000000 00000000000000000000000000000001
* ```
*
* @constant
* @type {number}
* @default 4.940656458412465e-324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;


// EXPORTS //

var _$FLOAT64_SMALLEST_SUBNORMAL_87 = FLOAT64_SMALLEST_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/* eslint-disable no-mixed-operators, max-len */

'use strict';

// MODULES //

/* removed: var _$gammaincinv_428 = require( '@stdlib/math/base/special/gammaincinv' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_SMALLEST_SUBNORMAL_87 = require( '@stdlib/constants/math/float64-smallest-subnormal' ); */;
/* removed: var _$temmeRootFinder_525 = require( './root_finder.js' ); */;
/* removed: var _$newtonRaphsonIterate_502 = require( './newton_raphson.js' ); */;


// MAIN //

/**
* Carries out the third method by Temme (described in section 4).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1-p`
* @returns {number} function value
*/
function temme3( a, b, p, q ) {
	var cross;
	var roots;
	var lower;
	var upper;
	var eta0;
	var eta;
	var w10;
	var w12;
	var w13;
	var w14;
	var e1;
	var e2;
	var e3;
	var mu;
	var d2;
	var d3;
	var d4;
	var w2;
	var w3;
	var w4;
	var w5;
	var w6;
	var w7;
	var w8;
	var w9;
	var w1;
	var d;
	var w;
	var u;
	var x;

	// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:
	if ( p < q ) {
		eta0 = _$gammaincinv_428( p, b, true );
	} else {
		eta0 = _$gammaincinv_428( q, b, false );
	}
	eta0 /= a;

	// Define the variables and powers we'll need later on:
	mu = b / a;
	w = _$sqrt_703( 1.0+mu );
	w2 = w * w;
	w3 = w2 * w;
	w4 = w2 * w2;
	w5 = w3 * w2;
	w6 = w3 * w3;
	w7 = w4 * w3;
	w8 = w4 * w4;
	w9 = w5 * w4;
	w10 = w5 * w5;
	d = eta0 - mu;
	d2 = d * d;
	d3 = d2 * d;
	d4 = d2 * d2;
	w1 = w + 1.0;
	w12 = w1 * w1;
	w13 = w1 * w12;
	w14 = w12 * w12;

	// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well. Refer to p154-p155 for the details of these expansions:
	e1 = (w+2.0) * (w-1.0) / (3.0*w);
	e1 += (w3 + 9.0*w2 + 21.0*w + 5.0) * d / (36.0*w2*w1);
	e1 -= (w4 - 13.0*w3 + 69.0*w2 + 167.0*w + 46.0) * d2 / (1620.0*w12*w3);
	e1 -= (7.0*w5 + 21.0*w4 + 70.0*w3 + 26.0*w2 - 93.0*w - 31.0) * d3 / (6480.0*w13*w4);
	e1 -= (75.0*w6 + 202.0*w5 + 188.0*w4 - 888.0*w3 - 1345.0*w2 + 118.0*w + 138.0) * d4 / (272160.0*w14*w5);

	e2 = (28.0*w4 + 131.0*w3 + 402.0*w2 + 581.0*w + 208.0) * (w-1.0) / (1620.0*w1*w3);
	e2 -= (35.0*w6 - 154.0*w5 - 623.0*w4 - 1636.0*w3 - 3983.0*w2 - 3514.0*w - 925.0) * d / (12960.0*w12*w4);
	e2 -= (2132.0*w7 + 7915.0*w6 + 16821.0*w5 + 35066.0*w4 + 87490.0*w3 + 141183.0*w2 + 95993.0*w + 21640.0) * d2 / (816480.0*w5*w13);
	e2 -= (11053.0*w8 + 53308.0*w7 + 117010.0*w6 + 163924.0*w5 + 116188.0*w4 - 258428.0*w3 - 677042.0*w2 - 481940.0*w - 105497.0) * d3 / (14696640.0*w14*w6);

	e3 = -((3592.0*w7 + 8375.0*w6 - 1323.0*w5 - 29198.0*w4 - 89578.0*w3 - 154413.0*w2 - 116063.0*w - 29632.0) * (w-1.0)) / (816480.0*w5*w12);
	e3 -= (442043.0*w9 + 2054169.0*w8 + 3803094.0*w7 + 3470754.0*w6 + 2141568.0*w5 - 2393568.0*w4 - 19904934.0*w3 - 34714674.0*w2 - 23128299.0*w - 5253353.0) * d / (146966400.0*w6*w13);
	e3 -= (116932.0*w10 + 819281.0*w9 + 2378172.0*w8 + 4341330.0*w7 + 6806004.0*w6 + 10622748.0*w5 + 18739500.0*w4 + 30651894.0*w3 + 30869976.0*w2 + 15431867.0*w + 2919016.0) * d2 / (146966400.0*w14*w7);

	// Combine eta0 and the error terms to compute eta (Second equation p155):
	eta = eta0 + (e1/a) + (e2/(a*a)) + (e3/(a*a*a));

	/*
		Now we need to solve Eq 4.2 to obtain x.  For any given value of
		eta there are two solutions to this equation, and since the distribution
		may be very skewed, these are not related by x ~ 1-x we used when
		implementing section 3 above.  However we know that:

			cross < x <= 1       ; iff eta < mu
				x == cross   ; iff eta == mu
				0 <= x < cross    ; iff eta > mu

		Where cross == 1 / (1 + mu)
		Many thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:
	*/
	if ( eta <= 0 ) {
		eta = _$FLOAT64_SMALLEST_SUBNORMAL_87;
	}
	u = eta - ( mu*_$ln_545(eta) ) + ( ( 1.0+mu ) * _$ln_545( 1.0+mu ) ) - mu;
	cross = 1.0 / ( 1.0+mu );
	lower = (eta < mu) ? cross : 0.0;
	upper = (eta < mu) ? 1.0 : cross;
	x = (lower+upper) / 2.0;
	roots = _$temmeRootFinder_525( u, mu );
	return _$newtonRaphsonIterate_502( roots, x, lower, upper, 32, 100 );
}


// EXPORTS //

var _$temme3_528 = temme3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$signum_681 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;


// MAIN //

/**
* Performs root finding via third order Halley iteration.
*
* @private
* @param {Array} fun - array of function and its first two derivatives
* @param {number} guess - initial starting value
* @param {number} minimum - minimum possible value for the result, used as initial lower bracket
* @param {number} maximum - maximum possible value for the result, used as initial upper bracket
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function halleyIterate( fun, guess, minimum, maximum, digits, maxIter ) {
	var convergence;
	var outOfBounds;
	var delta1;
	var delta2;
	var factor;
	var result;
	var f0Last;
	var count;
	var delta;
	var denom;
	var diff;
	var num;
	var res;
	var f0;
	var f1;
	var f2;

	f0 = 0.0;
	outOfBounds = false;
	result = guess;
	factor = _$ldexp_543( 1.0, 1.0-digits );
	delta = _$max_575( 10000000*guess, 10000000 );  // Arbitrarily large delta...
	f0Last = 0;
	delta1 = delta;
	delta2 = delta;

	count = maxIter;
	do {
		f0Last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun( result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		f2 = res[ 2 ];
		count -= 1;

		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0Last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === minimum ) {
					guess = maximum;
				} else {
					guess = minimum;
				}
				f0Last = fun( guess );
				delta = guess - result;
			}
			if ( _$signum_681( f0Last ) * _$signum_681( f0 ) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = ( result-minimum ) / 2.0;
				} else {
					delta = ( result-maximum ) / 2.0;
				}
			// Move in same direction as last step:
			} else if ( delta < 0 ) {
				delta = (result-maximum) / 2.0;
			} else {
				delta = (result-minimum) / 2.0;
			}
		} else if ( f2 === 0.0 ) {
			delta = f0 / f1;
		} else {
			denom = 2.0 * f0;
			num = ( 2.0 * f1 ) - ( f0 * ( f2 / f1 ) );
			if ( _$abs_118(num) < 1.0 && ( _$abs_118(denom) >= _$abs_118(num) * _$FLOAT64_MAX_75 ) ) {
				// Possible overflow, use Newton step:
				delta = f0 / f1;
			} else {
				delta = denom / num;
			}
			if ( delta * f1 / f0 < 0.0 ) {
				// Probably cancellation error, try a Newton step instead:
				delta = f0 / f1;
				if ( _$abs_118(delta) > 2.0 * _$abs_118(guess) ) {
					delta = ( (delta < 0.0) ? -1.0 : 1.0 ) * 2.0 * _$abs_118( guess );
				}
			}
		}
		convergence = _$abs_118( delta / delta2 );
		if ( convergence > 0.8 && convergence < 2.0 ) {
			// Last two steps haven't converged, try bisection:
			delta = ( delta > 0.0 ) ? ( result-minimum )/2.0 : ( result-maximum )/2.0; // eslint-disable-line max-len
			if ( _$abs_118(delta) > result ) {
				delta = _$signum_681( delta ) * result; // Protect against huge jumps!
			}
			// Reset delta2 so that this branch will *not* be taken on the next iteration:
			delta2 = delta * 3.0;
		}
		guess = result;
		result -= delta;

		// Check for out of bounds step:
		if ( result < minimum ) {
			if (
				_$abs_118(minimum) < 1 &&
				_$abs_118(result) > 1 &&
				( _$FLOAT64_MAX_75 / _$abs_118(result) < _$abs_118(minimum) )
			) {
				diff = 1000.0;
			} else {
				diff = result / minimum;
			}
			if ( _$abs_118(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - minimum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = (guess - minimum) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		} else if ( result > maximum ) {
			if (
				_$abs_118(maximum) < 1.0 &&
				_$abs_118(result) > 1.0 &&
				_$FLOAT64_MAX_75 / _$abs_118(result) < _$abs_118(maximum)
			) {
				diff = 1000.0;
			} else {
				diff = result / maximum;
			}
			if ( _$abs_118(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - maximum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = ( guess - maximum ) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			maximum = guess;
		} else {
			minimum = guess;
		}
	} while ( count && ( _$abs_118(result * factor) < _$abs_118(delta) ) );

	return result;
}


// EXPORTS //

var _$halleyIterate_494 = halleyIterate;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$kernelBetainc_488 = require( '@stdlib/math/base/special/kernel-betainc' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;


// VARIABLES //

var __out_495 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a root finding function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} target - probability value
* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function
* @returns {Function} root finding function
*/
function ibetaRoots( a, b, target, invert ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - input value
	* @returns {Array} roots
	*/
	function roots( x ) {
		var f1;
		var f2;
		var f;
		var y;

		y = 1.0 - x;
		__out_495 = _$kernelBetainc_488( __out_495, x, a, b, invert, true );
		f = __out_495[ 0 ] - target;
		f1 = __out_495[ 1 ];
		if ( invert ) {
			f1 = -f1;
		}
		if ( y === 0.0 ) {
			y = _$FLOAT64_SMALLEST_NORMAL_86 * 64.0;
		}
		if ( x === 0.0 ) {
			x = _$FLOAT64_SMALLEST_NORMAL_86 * 64.0;
		}
		f2 = f1 * ( -(y*a) + ( ( b-2.0 ) * x ) + 1.0 );
		if ( _$abs_118( f2 ) < y * x * _$FLOAT64_MAX_75 ) {
			f2 /= (y * x);
		}
		if ( invert ) {
			f2 = -f2;
		}
		// Make sure we don't have a zero derivative:
		if ( f1 === 0.0 ) {
			f1 = ( ( invert ) ? -1.0 : 1.0 ) * _$FLOAT64_SMALLEST_NORMAL_86 * 64.0;
		}
		return [ f, f1, f2 ];
	}
}


// EXPORTS //

var _$ibetaRoots_495 = ibetaRoots;

/* eslint-disable max-statements, max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$betainc_185 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$asin_136 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$beta_182 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$findIBetaInvFromTDist_493 = require( './find_ibeta_inv_from_t_dist.js' ); */;
/* removed: var _$temme1_526 = require( './temme1.js' ); */;
/* removed: var _$temme2_527 = require( './temme2.js' ); */;
/* removed: var _$temme3_528 = require( './temme3.js' ); */;
/* removed: var _$halleyIterate_494 = require( './halley_iterate.js' ); */;
/* removed: var _$ibetaRoots_495 = require( './ibeta_roots.js' ); */;


// VARIABLES //

var DIGITS = 32;
var MAX_ITERATIONS = 1000;

// Workspace for the polynomial coefficients:
var __terms_501 = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Calculates the inverse of the incomplete beta function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1 - p`
* @returns {Array} two-element array holding function value `y` and `1-y`
*/
function ibetaInvImp( a, b, p, q ) {
	var digits;
	var invert;
	var lambda;
	var lower;
	var theta;
	var upper;
	var roots;
	var maxv;
	var minv;
	var bet;
	var ppa;
	var tmp;
	var xs2;
	var ap1;
	var bm1;
	var fs;
	var lx;
	var ps;
	var xg;
	var xs;
	var yp;
	var a2;
	var a3;
	var b2;
	var r;
	var l;
	var u;
	var x;
	var y;

	// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:
	invert = false;

	// Handle trivial cases first...
	if ( q === 0.0 ) {
		return [ 1.0, 0.0 ];
	}
	if ( p === 0.0 ) {
		return [ 0.0, 1.0 ];
	}
	if ( a === 1.0 ) {
		if ( b === 1.0 ) {
			return [ p, 1.0-p ];
		}
		// Change things around so we can handle as b == 1 special case below:
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		invert = true;
	}
	// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):
	x = 0.0; // Set to a safe zero to avoid a

	// For some of the methods we can put tighter bounds on the result than simply [0,1]:
	lower = 0.0;
	upper = 1.0;

	// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the "wrong" order:
	if ( a === 0.5 ) {
		if ( b === 0.5 ) {
			x = _$sin_683( p*_$HALF_PI_62 );
			x *= x;
			y = _$sin_683( q*_$HALF_PI_62 );
			y *= y;
			return [ x, y ];
		}
		if ( b > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
	}
	// Select calculation method for the initial estimate:
	if ( b === 0.5 && a >= 0.5 && p !== 1.0 ) {
		// We have a Student's T distribution:
		yp = {};
		x = _$findIBetaInvFromTDist_493( a, p, yp );
		y = yp.value;
	}
	else if ( b === 1.0 ) {
		if ( p < q ) {
			if ( a > 1.0 ) {
				x = _$pow_618( p, 1.0/a );
				y = -_$expm1_327( _$ln_545(p) / a );
			} else {
				x = _$pow_618( p, 1.0/a );
				y = 1.0 - x;
			}
		} else {
			x = _$exp_314( _$log1p_558(-q) / a );
			y = -_$expm1_327( _$log1p_558(-q) / a );
		}
		if ( invert ) {
			tmp = y;
			y = x;
			x = tmp;
		}
		return [ x, y ];
	}
	else if ( a+b > 5.0 ) {
		// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.
		if ( p > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
		minv = _$min_579( a, b );
		maxv = _$max_575( a, b );
		if ( ( _$sqrt_703(minv) > (maxv-minv) ) && minv > 5.0 ) {
			// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.
			x = _$temme1_526( a, b, p );
			y = 1.0 - x;
		} else {
			r = a + b;
			theta = _$asin_136( _$sqrt_703( a/r ) );
			lambda = minv / r;
			if (
				lambda >= 0.2 &&
				lambda <= 0.8 &&
				r >= 10
			) {
				// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.
				ppa = _$pow_618( p, 1.0/a );
				if ( ppa < 0.0025 && ( a+b ) < 200.0 ) {
					x = ppa * _$pow_618( a*_$beta_182( a, b ), 1.0/a );
				} else {
					x = _$temme2_527( p, r, theta );
				}
				y = 1.0 - x;
			} else {
				// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.
				if ( a < b ) {
					tmp = b;
					b = a;
					a = tmp;

					tmp = q;
					q = p;
					p = tmp;
					invert = !invert;
				}
				// Try and compute the easy way first:
				bet = 0.0;
				if ( b < 2.0 ) {
					bet = _$beta_182( a, b );
				}
				if ( bet === 0.0 ) {
					y = 1.0;
				} else {
					y = _$pow_618( b*q*bet, 1.0/b );
					x = 1.0 - y;
				}
			}
			if ( y > 1.0e-5 ) {
				x = _$temme3_528( a, b, p, q );
				y = 1.0 - x;
			}
		}
	}
	else if ( a < 1.0 && b < 1.0 ) {
		// Both a and b less than 1, there is a point of inflection at xs:
		xs = ( 1.0-a ) / ( 2.0-a-b );

		// Now we need to ensure that we start our iteration from the right side of the inflection point:
		fs = _$betainc_185( xs, a, b ) - p;
		if ( _$abs_118(fs)/p < _$FLOAT64_EPSILON_56*3.0 ) {
			// The result is at the point of inflection, best just return it:
			if ( invert ) {
				return [ 1.0-xs, xs ];
			}
			return [ xs, 1.0-xs ];
		}
		if ( fs < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
			xs = 1.0 - xs;
		}
		xg = _$pow_618( a*p*_$beta_182( a, b ), 1.0/a );
		x = xg / ( 1.0+xg );
		y = 1.0 / ( 1.0+xg );

		// And finally we know that our result is below the inflection point, so set an upper limit on our search:
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	}
	else if ( a > 1.0 && b > 1.0 ) {
		// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.
		xs = ( a-1.0 ) / ( a+b-2.0 );
		xs2 = ( b-1.0 ) / ( a+b-2.0 );
		ps = _$betainc_185( xs, a, b ) - p;

		if ( ps < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			tmp = xs2;
			xs2 = xs;
			xs = tmp;

			invert = !invert;
		}
		// Estimate x and y, using expm1 to get a good estimate for y when it's very small:
		lx = _$ln_545( p*a*_$beta_182( a, b ) ) / a;
		x = _$exp_314( lx );
		y = ( x < 0.9 ) ? 1.0-x : -_$expm1_327(lx);

		if ( b < a && x < 0.2 ) {
			// Under a limited range of circumstances we can improve our estimate for x...
			ap1 = a - 1.0;
			bm1 = b - 1.0;
			a2 = a * a;
			a3 = a * a2;
			b2 = b * b;
			__terms_501[ 0 ] = 0.0;
			__terms_501[ 1 ] = 1.0;
			__terms_501[ 2 ] = bm1 / ap1;
			ap1 *= ap1;
			__terms_501[ 3 ] = bm1 * (3.0*a*b + 5.0*b + a2 - a - 4.0) / (2.0 * (a+2.0) * ap1); // eslint-disable-line max-len, no-mixed-operators
			ap1 *= (a + 1.0);
			__terms_501[ 4 ] = bm1 * (33.0*a*b2 + 31.0*b2 + 8.0*a2*b2 - 30.0*a*b - 47.0*b + 11.0*a2*b + 6.0*a3*b + 18.0 + 4.0*a - a3 + a2*a2 - 10.0*a2); // eslint-disable-line max-len, no-mixed-operators
			__terms_501[ 4 ] /= (3.0 * (a+3.0) * (a+2.0) * ap1);
			x = _$evalpoly_750( __terms_501, x );
		}
		// Know that result is below the inflection point, so set an upper limit on search...
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	} else {
		// Case: ( a <= 1 ) != ( b <= 1 ). If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate "round the corner" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.
		if ( b < a ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;
			invert = !invert;
		}
		if ( _$pow_618( p, 1.0/a ) < 0.5 ) {
			x = _$pow_618( p*a*_$beta_182( a, b ), 1.0/a );
			if ( x === 0.0 ) {
				x = _$FLOAT64_SMALLEST_NORMAL_86;
			}
			y = 1.0 - x;
		}
		// Case: pow(q, 1/b) < 0.1
		else {
			// Model a distorted quarter circle:
			y = _$pow_618( 1.0-_$pow_618( p, b*_$beta_182( a, b ) ), 1.0/b );
			if ( y === 0 ) {
				y = _$FLOAT64_SMALLEST_NORMAL_86;
			}
			x = 1.0 - y;
		}
	}
	// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:
	if ( x > 0.5 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
		l = 1.0 - upper;
		u = 1.0 - lower;
		lower = l;
		upper = u;
	}
	// Lower bound for our search:  We're not interested in denormalized answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).
	if ( lower === 0 ) {
		if ( invert ) {
			// We're not interested in answers smaller than machine epsilon:
			lower = _$FLOAT64_EPSILON_56;
			if ( x < lower ) {
				x = lower;
			}
		} else {
			lower = _$FLOAT64_SMALLEST_NORMAL_86;
		}
		if ( x < lower ) {
			x = lower;
		}
	}
	// Figure out how many digits to iterate towards:
	digits = DIGITS;
	if ( x < 1.0e-50 && ( a < 1.0 || b < 1.0 ) ) {
		// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:
		digits *= 3;
		digits /= 2;
	}
	// Now iterate, we can use either p or q as the target here depending on which is smaller:
	roots = _$ibetaRoots_495( a, b, ( (p < q) ? p : q ), p >= q );
	x = _$halleyIterate_494( roots, x, lower, upper, digits, MAX_ITERATIONS );

	// Tidy up, if we "lower" was too high then zero is the best answer we have:
	if ( x === lower ) {
		x = 0.0;
	}
	if ( invert ) {
		return [ 1.0-x, x ];
	}
	return [ x, 1.0-x ];
}


// EXPORTS //

var _$ibetaInvImp_501= ibetaInvImp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/kernel-betaincinv
*
* @example
* var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
*
* var y = kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 );
* // returns [ ~0.327, ~0.673 ]
*
* y = kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 );
* // returns [ ~0.446, ~0.554 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 );
* // returns [ ~0.082, ~0.918 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 );
* // returns [ ~0.235, ~0.765 ]
*/

// MODULES //

/* removed: var _$ibetaInvImp_501 = require( './kernel_betaincinv.js' ); */;


// EXPORTS //

var _$kernelBetaincinv_496 = _$ibetaInvImp_501;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$kernelBetaincinv_496 = require( '@stdlib/math/base/special/kernel-betaincinv' ); */;


// MAIN //

/**
* Returns a value `p` such that `p = betainc(a, b, x)`.
*
* @param {Probability} p - function parameter
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {boolean} [upper=false] - boolean indicating if the function should return the inverse of the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* @example
* var y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* @example
* var y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/
function betaincinv( p, a, b, upper ) {
	if (
		_$isnan_103( p ) ||
		_$isnan_103( a ) ||
		_$isnan_103( b )
	) {
		return NaN;
	}
	if ( a <= 0.0 || b <= 0.0 ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( upper ) {
		return _$kernelBetaincinv_496( a, b, 1.0 - p, p )[ 0 ];
	}
	return _$kernelBetaincinv_496( a, b, p, 1.0 - p )[ 0 ];
}


// EXPORTS //

var _$betaincinv_186 = betaincinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/betaincinv
*
* @example
* var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
*
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/

// MODULES //

/* removed: var _$betaincinv_186 = require( './betaincinv.js' ); */;


// EXPORTS //

var _$betaincinv_187 = _$betaincinv_186;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// VARIABLES //

var ALGMCS = [
	+0.1276642195630062933333333333333e-30,
	-0.3401102254316748799999999999999e-29,
	+0.1025680058010470912000000000000e-27,
	-0.3547598158101070547199999999999e-26,
	+0.1429227355942498147573333333333e-24,
	-0.6831888753985766870111999999999e-23,
	+0.3962837061046434803679306666666e-21,
	-0.2868042435334643284144622399999e-19,
	+0.2683181998482698748957538846666e-17,
	-0.3399615005417721944303330599666e-15,
	+0.6221098041892605227126015543416e-13,
	-0.1809129475572494194263306266719e-10,
	+0.9810825646924729426157171547487e-8,
	-0.1384948176067563840732986059135e-4,
	+0.1666389480451863247205729650822e+0
];
var LEN = ALGMCS.length;


// MAIN //

/**
* Evaluate the n-term Chebyshev series at `x`.
*
* ## References
*
* -   Broucke, Roger. 1973. "Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series." _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).
* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.
*
* @private
* @param {number} x - value at which the series is to be evaluated
* @returns {number} series value
*/
function dcseval( x ) {
	var twox;
	var b2;
	var b1;
	var b0;
	var i;

	if ( x < -1.1 || x > 1.1 ) {
		return NaN;
	}
	b1 = 0.0;
	b0 = 0.0;
	twox = 2.0 * x;
	for ( i = 0; i < LEN; i++ ) {
		b2 = b1;
		b1 = b0;
		b0 = (twox*b1) - b2 + ALGMCS[ i ];
	}
	return ( b0-b2 ) * 0.5;
}


// EXPORTS //

var _$dcseval_189 = dcseval;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// MODULES //

/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$dcseval_189 = require( './dceval.js' ); */;


// VARIABLES //

var XBIG = 94906265.62425156;
var XMAX = 3.745194030963158e306;


// MAIN //

/**
* Compute the log gamma correction factor for `x >= 10`.
*
* ```tex
* \log(\gamma(x)) = \log(\sqrt{2*\Pi}) + (x-0.5) \cdot \log(x) - x \operatorname{R9LGMC}(x).
* ```
*
* @private
* @param {number} x - input value
* @returns {number} correction value
*/
function gammaCorrection( x ) {
	if ( x < 10.0 ) {
		return NaN;
	}
	// Check for underflow...
	if ( x >= XMAX ) {
		return 0.0;
	}
	if ( x < XBIG ) {
		return _$dcseval_189( (2.0*_$pow_618( 10.0/x, 2.0 )) - 1.0 ) / x;
	}
	return 1.0 / (x * 12.0);
}


// EXPORTS //

var _$gammaCorrection_190 = gammaCorrection;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$max_575 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_SQRT_TWO_PI_66 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$gammaCorrection_190 = require( './gamma_correction.js' ); */;


// MAIN //

/**
* Evaluate the natural logarithm of the beta function.
*
* @param {NonNegativeNumber} a - first input value
* @param {NonNegativeNumber} b - second input value
* @returns {number} natural logarithm of beta function
*
* @example
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* @example
* var v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = betaln( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* @example
* var v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* @example
* var v = betaln( NaN, 2.0 );
* // returns NaN
*/
function betaln( a, b ) {
	var corr;
	var p;
	var q;

	p = _$min_579( a, b );
	q = _$max_575( a, b );

	if ( p < 0.0 ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( q === _$FLOAT64_PINF_85 ) {
		return _$FLOAT64_NINF_81;
	}
	// Case: p and q are big
	if ( p >= 10.0 ) {
		corr = _$gammaCorrection_190( p ) + _$gammaCorrection_190( q ) - _$gammaCorrection_190( p+q );
		return ( -0.5*_$ln_545( q ) ) + _$LN_SQRT_TWO_PI_66 + corr + ( (p-0.5) * _$ln_545( p/(p+q) ) ) + ( q*_$log1p_558( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p is small, but q is big
	if ( q >= 10.0 ) {
		corr = _$gammaCorrection_190( q ) - _$gammaCorrection_190( p+q );
		return _$gammaln_445( p ) + corr + p - (p*_$ln_545( p+q )) + ( (q-0.5)*_$log1p_558( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p and q are small
	return _$ln_545( _$gamma_387( p ) * ( _$gamma_387( q ) / _$gamma_387( p+q ) ) );
}


// EXPORTS //

var _$betaln_188 = betaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the beta function.
*
* @module @stdlib/math/base/special/betaln
*
* @example
* var betaln = require( '@stdlib/math/base/special/betaln' );
*
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* v = betaln( -1.0, 2.0 );
* // returns NaN
*
* v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* v = betaln( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$betaln_188 = require( './betaln.js' ); */;


// EXPORTS //

var _$betaln_191 = _$betaln_188;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
* // returns 9007199254740991
*/


// MAIN //

/**
* Maximum safe double-precision floating-point integer.
*
* ## Notes
*
* The integer has the value
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;


// EXPORTS //

var _$FLOAT64_MAX_SAFE_INTEGER_72 = FLOAT64_MAX_SAFE_INTEGER;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Notes:
*	=> cos(-x) = cos(x)
*	=> sin(-x) = -sin(x)
*	=> cos(π/2) = 0
*	=> cos(0) = 1
*	=> cos(π) = -1
*/


// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_72 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;


// VARIABLES //

_$FLOAT64_MAX_SAFE_INTEGER_72 += 1;


// MAIN //

/**
* Computes the value of `cos(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = cospi( 0.0 );
* // returns 1.0
*
* @example
* var y = cospi( 0.5 );
* // returns 0.0
*
* @example
* var y = cospi( 0.1 );
* // returns ~0.951
*
* @example
* var y = cospi( NaN );
* // returns NaN
*/
function cospi( x ) {
	var ax;
	var ix;
	var rx;
	var y;
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) ) {
		return NaN;
	}
	ax = _$abs_118( x );
	if ( ax > _$FLOAT64_MAX_SAFE_INTEGER_72 ) {
		// Always even integer...
		return 1.0;
	}
	// Argument reduction (reduce to [0,1))...
	ix = _$floor_346( ax );
	rx = ax - ix;
	if ( rx === 0.5 ) {
		return 0.0;
	}
	if ( rx < 0.25 ) {
		y = _$cos_226( _$PI_84*rx );
	}
	else if ( rx < 0.75 ) {
		rx = 0.5 - rx;
		y = _$sin_683( _$PI_84*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed
	}
	else {
		rx = 1.0 - rx;
		y = -_$cos_226( _$PI_84*rx );
	}
	// If the integer of `x` is odd, we need to flip the sign...
	return ( ix%2 === 1 ) ? -y : y;
}


// EXPORTS //

var _$cospi_232 = cospi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute cos(πx).
*
* @module @stdlib/math/base/special/cospi
*
* @example
* var cospi = require( '@stdlib/math/base/special/cospi' );
*
* var y = cospi( 0.0 );
* // returns 1.0
*
* y = cospi( 0.5 );
* // returns 0.0
*
* y = cospi( 0.1 );
* // returns ~0.951
*
* y = cospi( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$cospi_232 = require( './cospi.js' ); */;


// EXPORTS //

var _$cospi_233 = _$cospi_232;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Golden ratio.
*
* @module @stdlib/constants/math/float64-phi
* @type {number}
*
* @example
* var PHI = require( '@stdlib/constants/math/float64-phi' );
* // returns 1.618033988749895
*/


// MAIN //

/**
* Golden ratio.
*
* @constant
* @type {number}
* @default 1.618033988749895
* @see [OEIS]{@link http://oeis.org/A001622}
* @see [Wikipedia]{@link http://en.wikipedia.org/wiki/Golden_ratio}
*/
var PHI = 1.61803398874989484820458683436563811772030917980576286213544862;


// EXPORTS //

var _$PHI_82 = PHI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cospi_233 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PHI_82 = require( '@stdlib/constants/math/float64-phi' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// VARIABLES //

var SQRT_5 = 2.23606797749979;


// MAIN //

/**
* Evaluates Binet's formula extended to real numbers.
*
* ## Notes
*
* -   [Non integer Fibonacci numbers][1]
* -   [Interpolated Fibonacci numbers - real or complex][2]
*
* [1]: https://math.stackexchange.com/questions/798190/non-integer-fibonacci-numbers
* [2]: https://math.stackexchange.com/questions/589841/interpolated-fibonacci-numbers-real-or-complex
*
* @param {number} x - input value
* @returns {number} real-valued result
*
* @example
* var y = binet( 0.0 );
* // returns 0.0
*
* @example
* var y = binet( 1.0 );
* // returns 1.0
*
* @example
* var y = binet( 2.0 );
* // returns 1.0
*
* @example
* var y = binet( 3.0 );
* // returns 2.0
*
* @example
* var y = binet( 4.0 );
* // returns 3.0
*
* @example
* var y = binet( 5.0 );
* // returns ~5.0
*
* @example
* var y = binet( 6.0 );
* // returns ~8.0
*
* @example
* var y = binet( NaN );
* // returns NaN
*
* @example
* var y = binet( 3.14 );
* // returns ~2.12
*
* @example
* var y = binet( -1.0 );
* // returns 1.0
*/
function binet( x ) {
	var a;
	var b;
	if (
		_$isnan_103( x ) ||
		x === _$FLOAT64_PINF_85 ||
		x === _$FLOAT64_NINF_81
	) {
		return NaN;
	}
	a = _$pow_618( _$PHI_82, x );
	b = _$cospi_233( x ) / a;
	return ( a - b ) / SQRT_5;
}


// EXPORTS //

var _$binet_193 = binet;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate Binet's formula extended to real numbers.
*
* @module @stdlib/math/base/special/binet
*
* @example
* var binet = require( '@stdlib/math/base/special/binet' );
*
* var y = binet( 0.0 );
* // returns 0.0
*
* y = binet( 1.0 );
* // returns 1.0
*
* y = binet( 2.0 );
* // returns 1.0
*
* y = binet( 3.0 );
* // returns 2.0
*
* y = binet( 4.0 );
* // returns 3.0
*
* y = binet( 5.0 );
* // returns ~5.0
*
* y = binet( 6.0 );
* // returns ~8.0
*/

// MODULES //

/* removed: var _$binet_193 = require( './main.js' ); */;


// EXPORTS //

var _$binet_192 = _$binet_193;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$betaln_191 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Computes the natural logarithm of the binomial coefficient of two integers.
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* @example
* var v = binomcoefln( 0, 0 );
* // returns 0.0
*
* @example
* var v = binomcoefln( -4, 2 );
* // returns ~2.303
*
* @example
* var v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* @example
* var v = binomcoefln( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoefln( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoefln( NaN, NaN );
* // returns NaN
*/
function binomcoefln( n, k ) {
	if ( _$isnan_103( n ) || _$isnan_103( k ) ) {
		return NaN;
	}
	if ( !_$isInteger_101( n ) || !_$isInteger_101( k ) ) {
		return NaN;
	}
	if ( n < 0.0 ) {
		return binomcoefln( -n + k - 1.0, k );
	}
	if ( k < 0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( k === 0 ) {
		return 0.0;
	}
	if ( k === 1 ) {
		return _$ln_545( _$abs_118( n ) );
	}
	if ( n < k ) {
		return _$FLOAT64_NINF_81;
	}
	if ( n - k < 2 ) {
		return binomcoefln( n, n - k );
	}
	// Case: n - k >= 2
	return -_$ln_545( n + 1 ) - _$betaln_191( n - k + 1, k + 1 );
}


// EXPORTS //

var _$binomcoefln_196 = binomcoefln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the natural logarithm of the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoefln
*
* @example
* var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
*
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* v = binomcoefln( 0, 0 );
* // returns 0.0
*
* v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* v = binomcoefln( NaN, 3 );
* // returns NaN
*
* v = binomcoefln( 5, NaN );
* // returns NaN
*
* v = binomcoefln( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$binomcoefln_196 = require( './binomcoefln.js' ); */;


// EXPORTS //

var _$binomcoefln_197 = _$binomcoefln_196;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isPositiveZero_113 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Computes a one-parameter Box-Cox transformation.
*
* ## Method
*
* -   If \\( \lambda << 1 \\) and \\( \ln( x ) < 1.0 \\), then the product \\( \lambda \cdot \ln(x) \\) can lose precision, and, furthermore, \\( \operatorname{expm1}(x) = x \\) for \\( x < \epsilon \\).
* -   For double-precision floating-point numbers, the range of the natural log is \\( \[-744.44, 709.78\] and \\( \epsilon \\) is the smallest value produced.
* -   The value range means that we will have \\( |\lambda \cdot \ln(x)| < \epsilon \\) whenever \\( |\lambda| \leq \frac{\epsilon}{-\ln(d) \\), where \\( d \\) is the minimum double-precision floating-point number, thus corresponding to the value \\( \approx 2.98 \times 10^{-19} \\).
*
* @param {number} x - input value
* @param {number} lambda - power parameter
* @returns {number} Box-Cox transformation
*
* @example
* var v = boxcox( 1.0, 2.5 );
* // returns 0.0
*
* @example
* var v = boxcox( 4.0, 2.5 );
* // returns 12.4
*
* @example
* var v = boxcox( 10.0, 2.5 );
* // returns ~126.0911
*
* @example
* var v = boxcox( 2.0, 0.0 );
* // returns ~0.6931
*
* @example
* var v = boxcox( -1.0, 2.5 );
* // returns NaN
*
* @example
* var v = boxcox( 0.0, -1.0 );
* // returns -Infinity
*/
function boxcox( x, lambda ) {
	if ( _$isnan_103( x ) || _$isnan_103( lambda ) ) {
		return NaN;
	}
	if ( _$isPositiveZero_113( x ) && lambda < 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( _$abs_118( lambda ) < 1.0e-19 ) {
		return _$ln_545( x );
	}
	return _$expm1_327( lambda*_$ln_545( x ) ) / lambda;
}


// EXPORTS //

var _$boxcox_199 = boxcox;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a one-parameter Box-Cox transformation.
*
* @module @stdlib/math/base/special/boxcox
*
* @example
* var boxcox = require( '@stdlib/math/base/special/boxcox' );
*
* var v = boxcox( 1.0, 2.5 );
* // returns 0.0
*
* v = boxcox( 4.0, 2.5 );
* // returns 12.4
*
* v = boxcox( 10.0, 2.5 );
* // returns ~126.0911
*
* v = boxcox( 2.0, 0.0 );
* // returns ~0.6931
*
* v = boxcox( -1.0, 2.5 );
* // returns NaN
*
* v = boxcox( 0.0, -1.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$boxcox_199 = require( './main.js' ); */;


// EXPORTS //

var _$boxcox_198 = _$boxcox_199;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Computes a one-parameter Box-Cox transformation of `1+x`.
*
* ## Method
*
* When computing a one-parameter Box-Cox transformation
*
* -   If \\( \lambda << 1 \\) and \\( \ln( x ) < 1.0 \\), then the product \\( \lambda \cdot \ln(x) \\) can lose precision, and, furthermore, \\( \operatorname{expm1}(x) = x \\) for \\( x < \epsilon \\).
* -   For double-precision floating-point numbers, the range of the natural log is \\( \[-744.44, 709.78\] and \\( \epsilon \\) is the smallest value produced.
* -   The value range means that we will have \\( |\lambda \cdot \ln(x)| < \epsilon \\) whenever \\( |\lambda| \leq \frac{\epsilon}{-\ln(d) \\), where \\( d \\) is the minimum double-precision floating-point number, thus corresponding to the value \\( \approx 2.98 \times 10^{-19} \\).
*
* For small `x` values, the same method described above applies with the modification that the smallest value returned by \\( \operatorname{log1p}(x) \\) is the minimum representable value, not \\( \epsilon \\). Furthermore, we need to guard against underflow when \\( \operatorname{log1p}(x) < \epsilon \\).
*
* @param {number} x - input value
* @param {number} lambda - power parameter
* @returns {number} Box-Cox transformation of `1+x`
*
* @example
* var v = boxcox1p( 1.0, 2.5 );
* // returns ~1.8627
*
* @example
* var v = boxcox1p( 4.0, 2.5 );
* // returns ~21.9607
*
* @example
* var v = boxcox1p( 10.0, 2.5 );
* // returns ~160.1246
*
* @example
* var v = boxcox1p( 2.0, 0.0 );
* // returns ~1.0986
*
* @example
* var v = boxcox1p( -1.0, 2.5 );
* // returns -0.4
*
* @example
* var v = boxcox1p( 0.0, -1.0 );
* // returns 0.0
*
* @example
* var v = boxcox1p( -1.0, -1.0 );
* // returns -Infinity
*/
function boxcox1p( x, lambda ) {
	var lgx;
	if ( _$isnan_103( x ) || _$isnan_103( lambda ) || x < -1.0 ) {
		return NaN;
	}
	if ( x === -1.0 && lambda < 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	lgx = _$log1p_558( x );
	if (
		_$abs_118( lambda ) < 1.0e-19 ||

		// Guard against underflow...
		(
			_$abs_118( lgx ) < 1.0e-289 &&
			_$abs_118( lambda ) < 1.0e273
		)
	) {
		return lgx;
	}
	return _$expm1_327( lambda*lgx ) / lambda;
}


// EXPORTS //

var _$boxcox1p_201 = boxcox1p;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute a one-parameter Box-Cox transformation of `1+x`.
*
* @module @stdlib/math/base/special/boxcox1p
*
* @example
* var boxcox1p = require( '@stdlib/math/base/special/boxcox1p' );
*
* var v = boxcox1p( 1.0, 2.5 );
* // returns ~1.8627
*
* v = boxcox1p( 4.0, 2.5 );
* // returns ~21.9607
*
* v = boxcox1p( 10.0, 2.5 );
* // returns ~160.1246
*
* v = boxcox1p( 2.0, 0.0 );
* // returns ~1.0986
*
* v = boxcox1p( -1.0, 2.5 );
* // returns -0.4
*
* v = boxcox1p( 0.0, -1.0 );
* // returns 0.0
*
* v = boxcox1p( -1.0, -1.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$boxcox1p_201 = require( './main.js' ); */;


// EXPORTS //

var _$boxcox1p_200 = _$boxcox1p_201;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Computes the inverse of a one-parameter Box-Cox transformation for `1+x`.
*
* @param {number} y - input value
* @param {number} lambda - power parameter
* @returns {number} inverse of the Box-Cox transformation
*
* @example
* var v = boxcox1pinv( 1.0, 2.5 );
* // returns ~0.6505
*
* @example
* var v = boxcox1pinv( 4.0, 2.5 );
* // returns ~1.6095
*
* @example
* var v = boxcox1pinv( 10.0, 2.5 );
* // returns ~2.6812
*
* @example
* var v = boxcox1pinv( 2.0, 0.0 );
* // returns ~6.3891
*
* @example
* var v = boxcox1pinv( -1.0, 2.5 );
* // returns NaN
*
* @example
* var v = boxcox1pinv( 0.0, -1.0 );
* // returns 0.0
*
* @example
* var v = boxcox1pinv( 1.0, NaN );
* // returns NaN
*
* @example
* var v = boxcox1pinv( NaN, 3.1 );
* // returns NaN
*/
function boxcox1pinv( y, lambda ) {
	var ly;
	if ( _$isnan_103( y ) || _$isnan_103( lambda ) ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return _$expm1_327( y );
	}
	ly = lambda * y;
	if ( _$abs_118( ly ) < 1.0e-154 ) {
		return y;
	}
	return _$expm1_327( _$log1p_558( ly ) / lambda );
}


// EXPORTS //

var _$boxcox1pinv_203 = boxcox1pinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse of a one-parameter Box-Cox transformation for `1+x`.
*
* @module @stdlib/math/base/special/boxcox1pinv
*
* @example
* var boxcox1pinv = require( '@stdlib/math/base/special/boxcox1pinv' );
*
* var v = boxcox1pinv( 1.0, 2.5 );
* // returns ~0.6505
*
* v = boxcox1pinv( 4.0, 2.5 );
* // returns ~1.6095
*
* v = boxcox1pinv( 10.0, 2.5 );
* // returns ~2.6812
*
* v = boxcox1pinv( 2.0, 0.0 );
* // returns ~6.3891
*
* v = boxcox1pinv( -1.0, 2.5 );
* // returns NaN
*
* v = boxcox1pinv( 0.0, -1.0 );
* // returns 0.0
*
* v = boxcox1pinv( 1.0, NaN );
* // returns NaN
*
* v = boxcox1pinv( NaN, 3.1 );
* // returns NaN
*/

// MODULES //

/* removed: var _$boxcox1pinv_203 = require( './main.js' ); */;


// EXPORTS //

var _$boxcox1pinv_202 = _$boxcox1pinv_203;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Computes the inverse of a one-parameter Box-Cox transformation.
*
* @param {number} y - input value
* @param {number} lambda - power parameter
* @returns {number} inverse of the Box-Cox transformation
*
* @example
* var v = boxcoxinv( 1.0, 2.5 );
* // returns ~1.6505
*
* @example
* var v = boxcoxinv( 4.0, 2.5 );
* // returns ~2.6095
*
* @example
* var v = boxcoxinv( 10.0, 2.5 );
* // returns ~3.6812
*
* @example
* var v = boxcoxinv( 2.0, 0.0 );
* // returns ~7.3891
*
* @example
* var v = boxcoxinv( -1.0, 2.5 );
* // returns NaN
*
* @example
* var v = boxcoxinv( 0.0, -1.0 );
* // returns 1.0
*
* @example
* var v = boxcoxinv( 1.0, NaN );
* // returns NaN
*
* @example
* var v = boxcoxinv( NaN, 3.1 );
* // returns NaN
*/
function boxcoxinv( y, lambda ) {
	if ( _$isnan_103( y ) || _$isnan_103( lambda ) ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return _$exp_314( y );
	}
	return _$exp_314( _$log1p_558( lambda*y ) / lambda );
}


// EXPORTS //

var _$boxcoxinv_205 = boxcoxinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse of a one-parameter Box-Cox transformation.
*
* @module @stdlib/math/base/special/boxcoxinv
*
* @example
* var boxcoxinv = require( '@stdlib/math/base/special/boxcoxinv' );
*
* var v = boxcoxinv( 1.0, 2.5 );
* // returns ~1.6505
*
* v = boxcoxinv( 4.0, 2.5 );
* // returns ~2.6095
*
* v = boxcoxinv( 10.0, 2.5 );
* // returns ~3.6812
*
* v = boxcoxinv( 2.0, 0.0 );
* // returns ~7.3891
*
* v = boxcoxinv( -1.0, 2.5 );
* // returns NaN
*
* v = boxcoxinv( 0.0, -1.0 );
* // returns 1.0
*
* v = boxcoxinv( 1.0, NaN );
* // returns NaN
*
* v = boxcoxinv( NaN, 3.1 );
* // returns NaN
*/

// MODULES //

/* removed: var _$boxcoxinv_205 = require( './main.js' ); */;


// EXPORTS //

var _$boxcoxinv_204 = _$boxcoxinv_205;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_208( x ) {
	if ( x === 0.0 ) {
		return 1.87595182427177;
	}
	return 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_208 = __evalpoly_208;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_SMALLEST_NORMAL_86 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$evalpoly_208 = require( './polyval_p.js' ); */;


// VARIABLES //

// 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000
var __SIGN_MASK_206 = 0x80000000|0; // asm type annotation

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_206 = 0x7fffffff|0; // asm type annotation

// 2**54
var TWO_54 = 18014398509481984;

// 0x00000001 = 1 => 0 00000000000 00000000000000000001
var ONE = 0x00000001|0; // asm type annotation

// B1 = (1023-1023/3-0.03306235651)*2**20
var B1 = 715094163|0; // asm type annotation

// B2 = (1023-1023/3-54/3-0.03306235651)*2**20
var B2 = 696219795|0; // asm type annotation


// MAIN //

/**
* Computes the cube root.
*
* ## Method
*
* 1.  Rough cube root to \\( 5 \\) bits:
*
*     ```tex
*     \sqrt\[3\]{2^e (1+m)} \approx 2^(e/3) \biggl(1 + \frac{(e \mathrm{mod}\ 3) + m}{3}\biggr)
*     ```
*
*     where \\( e \\) is a nonnegative integer, \\( m \\) is real and in \\( \[0, 1) \\), and \\( / \\) and \\( \mathrm{mod} \\) are integer division and modulus with rounding toward \\( -\infty \\).
*
*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\( 1 \\) in \\( 16 \\).
*
*     Adding a bias of \\( -0.03306235651 \\) to the \\( (e \mathrm{mod} 3+ m )/ 3 \\) term reduces the error to about \\( 1 \\) in \\( 32 \\).
*
*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\( 1023 \\) for doubles) and later add it back.
*
*     We do the subtraction virtually to keep \\( e \geq 0 \\) so that ordinary integer division rounds toward \\( -\infty \\); this is also efficient.
*
* 2.  New cube root to \\( 23 \\) bits:
*
*     ```tex
*     \sqrt[3]{x} = t \cdot \sqrt\[3\]{x/t^3} \approx t \mathrm{P}(t^3/x)
*     ```
*
*     where \\( \mathrm{P}(r) \\) is a polynomial of degree \\( 4 \\) that approximates \\( 1 / \sqrt\[3\]{r} \\) to within \\( 2^{-23.5} \\) when \\( |r - 1| < 1/10 \\).
*
*     The rough approximation has produced \\( t \\) such than \\( |t/sqrt\[3\]{x} - 1| \lesssim 1/32 \\), and cubing this gives us bounds for \\( r = t^3/x \\).
*
* 3.  Round \\( t \\) away from \\( 0 \\) to \\( 23 \\) bits (sloppily except for ensuring that the result is larger in magnitude than \\( \sqrt\[3\]{x} \\) but not much more than \\( 2 \\) 23-bit ulps larger).
*
*     With rounding toward zero, the error bound would be \\( \approx 5/6 \\) instead of \\( \approx 4/6 \\).
*
*     With a maximum error of \\( 2 \\) 23-bit ulps in the rounded \\( t \\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\( 0.667 \\); the error in the rounded \\( t \\) can be up to about \\( 3 \\) 23-bit ulps before the final error is larger than \\( 0.667 \\) ulps.
*
* 4.  Perform one step of a Newton iteration to get \\( 53 \\) bits with an error of \\( < 0.667 \\) ulps.
*
*
* @param {number} x - input value
* @returns {number} cube root
*
* @example
* var v = cbrt( 64.0 );
* // returns 4.0
*
* @example
* var v = cbrt( 27.0 );
* // returns 3.0
*
* @example
* var v = cbrt( 0.0 );
* // returns 0.0
*
* @example
* var v = cbrt( -9.0 );
* // returns ~-2.08
*
* @example
* var v = cbrt( NaN );
* // returns NaN
*/
function cbrt( x ) {
	var high;
	var sgn;
	var hx;
	var r;
	var s;
	var t;
	var w;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0 // handles `+-0`
	) {
		return x;
	}
	hx = _$getHighWord_762( x );
	sgn = hx & __SIGN_MASK_206;
	hx &= __ABS_MASK_206;
	t = 0.0;

	// Rough cbrt...
	if ( x < _$FLOAT64_SMALLEST_NORMAL_86 ) {
		t = TWO_54;
		t *= x;
		high = _$getHighWord_762( t );
		high = ( (high&__ABS_MASK_206)/3 ) + B2;
		t = _$fromWords_758( sgn|high, 0 );
	} else {
		high = (hx/3) + B1;
		t = _$setHighWord_771( t, sgn|high );
	}
	// New cbrt...
	r = (t*t) * (t/x);
	t *= _$evalpoly_208( r );

	// Round `t` away from `0` to `23` bits...
	high = _$getHighWord_762( t );
	t = _$fromWords_758( high+ONE, 0 );

	// Newton iteration...
	s = t * t; // `t*t` is exact
	r = x / s; // error `<= 0.5` ulps; `|r| < |t|`
	w = t + t; // `t+t` is exact
	r = (r - t) / (w + r); // `r-t` is exact; `w+r ~= 3*t`
	t += t * r; // error `<= 0.5 + 0.5/3 + eps`

	return t;
}


// EXPORTS //

var _$cbrt_206 = cbrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cube root of a number.
*
* @module @stdlib/math/base/special/cbrt
*
* @example
* var cbrt = require( '@stdlib/math/base/special/cbrt' );
*
* var v = cbrt( 64.0 );
* // returns 4.0
*
* v = cbrt( 27.0 );
* // returns 3.0
*
* v = cbrt( 0.0 );
* // returns 0.0
*
* v = cbrt( -0.0 );
* // returns -0.0
*
* v = cbrt( -9.0 );
* // returns ~-2.08
*
* v = cbrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$cbrt_206 = require( './cbrt.js' ); */;


// EXPORTS //

var _$cbrt_207 = _$cbrt_206;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_554( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_554 = __evalpoly_554;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_555( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_555 = __evalpoly_555;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$evalpoly_554 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_555 = require( './polyval_q.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_552 = 0x000fffff|0; // asm type annotation

// 1/3
var __ONE_THIRD_552 = 0.33333333333333333;


// MAIN //

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function klog( x ) {
	var hfsq;
	var t1;
	var t2;
	var hx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	hx = _$getHighWord_762( x );
	f = x - 1.0;
	if ( ( __HIGH_SIGNIFICAND_MASK_552 & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( (__ONE_THIRD_552*f) - 0.5 );
	}
	s = f / ( 2.0 + f );
	z = s * s;
	hx &= __HIGH_SIGNIFICAND_MASK_552;
	i = (hx - 0x6147a)|0; // asm type annotation
	w = z * z;
	j = (0x6b851 - hx)|0; // asm type annotation
	t1 = w * _$evalpoly_554( w );
	t2 = z * _$evalpoly_555( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return ( s * (hfsq+R) ) - hfsq;
	}
	return s * (R-f);
}


// EXPORTS //

var _$klog_552 = klog;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log10.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$klog_552 = require( './klog.js' ); */;


// VARIABLES //

var __TWO54_553 = 1.80143985094819840000e+16;     // 0x43500000, 0x00000000
var IVLN10HI = 4.34294481878168880939e-01;  // 0x3fdbcb7b, 0x15200000
var IVLN10LO = 2.50829467116452752298e-11;  // 0x3dbb9438, 0xca9aadd5
var LOG10_2HI = 3.01029995663611771306e-01; // 0x3FD34413, 0x509F6000
var LOG10_2LO = 3.69423907715893078616e-13; // 0x3D59FEF3, 0x11F12B36

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_553 = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var __HIGH_MAX_NORMAL_EXP_553 = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_553 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_553 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the common logarithm (base ten).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log10( 4.0 );
* // returns ~0.602
*
* @example
* var v = log10( 8.0 );
* // returns ~0.903
*
* @example
* var v = log10( 0.0 );
* // returns -Infinity
*
* @example
* var v = log10( Infinity );
* // returns Infinity
*
* @example
* var v = log10( NaN );
* // returns NaN
*
* @example
* var v = log10( -4.0 );
* // returns NaN
*/
function log10( x ) {
	var hi;
	var hx;
	var lo;
	var f;
	var i;
	var k;
	var y;
	var z;

	if ( _$isnan_103( x ) || x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	hx = _$getHighWord_762( x );
	k = 0|0; // asm type annotation

	// Case: 0 < x < 2**-1022
	if ( hx < __HIGH_MIN_NORMAL_EXP_553 ) {
		// Subnormal number, scale up `x`...
		k -= 54|0; // asm type annotation
		x *= __TWO54_553;
		hx = _$getHighWord_762( x );
	}
	if ( hx >= __HIGH_MAX_NORMAL_EXP_553 ) {
		return x + x;
	}
	k += ((hx>>20) - _$FLOAT64_EXPONENT_BIAS_58)|0; // asm type annotation
	hx &= __HIGH_SIGNIFICAND_MASK_553;
	i = ( (hx+0x95f64)&0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = _$setHighWord_771( x, hx|(i^__HIGH_BIASED_EXP_0_553) );
	k += (i>>20)|0; // asm type annotation
	y = k;
	f = _$klog_552( x );
	x -= 1;
	hi = _$setLowWord_773( x, 0.0 );
	lo = x - hi;
	z = (y*LOG10_2LO) + ( (x+f)*IVLN10LO );
	z += ( (lo+f)*IVLN10HI ) + ( hi*IVLN10HI );
	return z + ( y*LOG10_2HI );
}


// EXPORTS //

var _$log10_553 = log10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the common logarithm (base ten).
*
* @module @stdlib/math/base/special/log10
*
* @example
* var log10 = require( '@stdlib/math/base/special/log10' );
*
* var v = log10( 100.0 );
* // returns ~0.602
*
* v = log10( 8.0 );
* // returns ~0.903
*
* v = log10( 0.0 );
* // returns -Infinity
*
* v = log10( Infinity );
* // returns Infinity
*
* v = log10( NaN );
* // returns NaN
*
* v = log10( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$log10_553 = require( './log10.js' ); */;


// EXPORTS //

var _$log10_551 = _$log10_553;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-max-base10-exponent' );
* // returns 308
*/


// MAIN //

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default 308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE10_EXPONENT_68 = FLOAT64_MAX_BASE10_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
* // returns -324
*/


// MAIN //

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default -324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil10( 3.141592653589793 );
* // returns 10.0
*
* @example
* var v = ceil10( 9.0 );
* // returns 10.0
*
* @example
* var v = ceil10( -0.314 );
* // returns -0.1
*/
function ceil10( x ) {
	var sign;
	var p;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = _$log10_551( x );

	// Determine a power of 10 which rounds the input value toward positive infinity:
	if ( sign === -1.0 ) {
		p = _$floor_346( p );
	} else {
		p = _$ceil_210( p );
	}
	// Handle underflow:
	if ( p <= _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ) {
		return sign * 0.0; // sign-preserving
	}
	// Handle overflow:
	if ( p > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		return _$FLOAT64_PINF_85;
	}
	return sign * _$pow_618( 10.0, p );
}


// EXPORTS //

var _$ceil10_211 = ceil10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of `10` toward positive infinity.
*
* @module @stdlib/math/base/special/ceil10
*
* @example
* var ceil10 = require( '@stdlib/math/base/special/ceil10' );
*
* var v = ceil10( 3.141592653589793 );
* // returns 10.0
*
* v = ceil10( 9.0 );
* // returns 10.0
*
* v = ceil10( -0.314 );
* // returns -0.1
*/

// MODULES //

/* removed: var _$ceil10_211 = require( './ceil10.js' ); */;


// EXPORTS //

var _$ceil10_212 = _$ceil10_211;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_566( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_566 = __evalpoly_566;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_567( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_567 = __evalpoly_567;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$evalpoly_566 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_567 = require( './polyval_q.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_564 = 0x000fffff|0; // asm type annotation

// 1/3
var __ONE_THIRD_564 = 0.33333333333333333;


// MAIN //

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function __klog_564( x ) {
	var hfsq;
	var t1;
	var t2;
	var hx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	hx = _$getHighWord_762( x );
	f = x - 1.0;
	if ( ( __HIGH_SIGNIFICAND_MASK_564 & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( ( __ONE_THIRD_564*f )- 0.5 );
	}
	s = f / ( 2.0 + f );
	z = s * s;
	hx &= __HIGH_SIGNIFICAND_MASK_564;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * _$evalpoly_566( w );
	t2 = z * _$evalpoly_567( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return ( s * (hfsq+R) ) - hfsq;
	}
	return s * (R-f);
}


// EXPORTS //

var _$klog_564 = __klog_564;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_771 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$klog_564 = require( './klog.js' ); */;


// VARIABLES //

var __TWO54_565 = 1.80143985094819840000e+16;   // 0x43500000, 0x00000000
var IVLN2HI = 1.44269504072144627571e+00; // 0x3ff71547, 0x65200000
var IVLN2LO = 1.67517131648865118353e-10; // 0x3de705fc, 0x2eefa200

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_565 = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var __HIGH_MAX_NORMAL_EXP_565 = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_565 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_565 = 0x3ff00000|0; // asm type annotation

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_565 = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var __WORDS_565 = [ 0|0, 0|0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the binary logarithm (base two).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log2( 4.0 );
* // returns 2.0
*
* @example
* var v = log2( 8.0 );
* // returns 3.0
*
* @example
* var v = log2( 0.0 );
* // returns -Infinity
*
* @example
* var v = log2( Infinity );
* // returns Infinity
*
* @example
* var v = log2( NaN );
* // returns NaN
*
* @example
* var v = log2( -4.0 );
* // returns NaN
*/
function log2( x ) {
	var hi;
	var lo;
	var hx;
	var lx;
	var f;
	var i;
	var k;

	if ( _$isnan_103( x ) || x < 0.0 ) {
		return NaN;
	}
	_$toWords_778( __WORDS_565, x );
	hx = __WORDS_565[ 0 ];
	lx = __WORDS_565[ 1 ];
	k = 0|0; // asm type annotation
	if ( hx < __HIGH_MIN_NORMAL_EXP_565 ) {
		// Case: x < 2**-1022
		if ( ( (hx&__ABS_MASK_565) | lx ) === 0 ) {
			return _$FLOAT64_NINF_81;
		}
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up x:
		x *= __TWO54_565;
		hx = _$getHighWord_762( x );
	}
	if ( hx >= __HIGH_MAX_NORMAL_EXP_565 ) {
		return x + x;
	}
	k += ( (hx>>20) - _$FLOAT64_EXPONENT_BIAS_58 )|0; // asm type annotation
	hx &= __HIGH_SIGNIFICAND_MASK_565;
	i = ( ( hx+0x95f64 ) & 0x100000 )|0; // asm type annotation

	// Normalize x or x/2...
	x = _$setHighWord_771( x, hx|(i^__HIGH_BIASED_EXP_0_565) );
	k += (i>>20)|0; // asm type annotation
	f = _$klog_564( x );
	x -= 1;
	hi = _$setLowWord_773( x, 0 );
	lo = x - hi;
	return ( (x+f)*IVLN2LO ) + ( (lo+f)*IVLN2HI ) + ( hi*IVLN2HI ) + k;
}


// EXPORTS //

var _$log2_565 = log2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the binary logarithm (base two).
*
* @module @stdlib/math/base/special/log2
*
* @example
* var log2 = require( '@stdlib/math/base/special/log2' );
*
* var v = log2( 4.0 );
* // returns 2.0
*
* v = log2( 8.0 );
* // returns 3.0
*
* v = log2( 0.0 );
* // returns -Infinity
*
* v = log2( Infinity );
* // returns Infinity
*
* v = log2( NaN );
* // returns NaN
*
* v = log2( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$log2_565 = require( './log2.js' ); */;


// EXPORTS //

var _$log2_563 = _$log2_565;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log2_563 = require( '@stdlib/math/base/special/log2' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_70 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of two toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil2( 3.141592653589793 );
* // returns 4.0
*
* @example
* var v = ceil2( 9.0 );
* // returns 16.0
*
* @example
* var v = ceil2( -0.314 );
* // returns -0.25
*/
function ceil2( x ) {
	var sign;
	var p;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `2^p = x` for `p`:
	p = _$log2_563( x );

	// If provided the smallest subnormal, no rounding possible:
	if ( p === _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 ) {
		return x;
	}
	// Determine a power of two which rounds the input value toward positive infinity:
	if ( sign === -1.0 ) {
		p = _$floor_346( p );
	} else {
		p = _$ceil_210( p );
	}
	// Handle overflow:
	if ( p > _$FLOAT64_MAX_BASE2_EXPONENT_70 ) {
		return _$FLOAT64_PINF_85;
	}
	return sign * _$pow_618( 2.0, p );
}


// EXPORTS //

var _$ceil2_213 = ceil2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of two toward positive infinity.
*
* @module @stdlib/math/base/special/ceil2
*
* @example
* var ceil2 = require( '@stdlib/math/base/special/ceil2' );
*
* var v = ceil2( 3.141592653589793 );
* // returns 4.0
*
* v = ceil2( 9.0 );
* // returns 16.0
*
* v = ceil2( -0.314 );
* // returns -0.25
*/

// MODULES //

/* removed: var _$ceil2_213 = require( './ceil2.js' ); */;


// EXPORTS //

var _$ceil2_214 = _$ceil2_213;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-min-base10-exponent' );
* // returns -308
*/


// MAIN //

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* ```text
* 2^-1022 = 2.2250738585072014e-308 => -308
* ```
*
* @constant
* @type {integer32}
* @default -308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE10_EXPONENT_77 = FLOAT64_MIN_BASE10_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_72 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_77 = require( '@stdlib/constants/math/float64-min-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

var MAX_INT = _$FLOAT64_MAX_SAFE_INTEGER_72 + 1;
var __HUGE_217 = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\) toward positive infinity.
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{ceiln}(x,n) = \frac{\operatorname{ceil}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{ceil}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{ceiln}(0.2+0.1,-16)\\) is \\(0.3000000000000001\\) and not \\(0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{ceil}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible positive finite number \\(x\\) to the nearest \\(10^n\\) is \\(\infty\\) and any possible negative finite number \\(x\\) is \\(-0\\). To ensure consistent behavior with \\(\operatorname{ceil}(x)\\), if \\(x < 0\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{ceiln}(x,n) = \frac{\biggl(\frac{\operatorname{ceil}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{ceiln}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{ceiln}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{ceiln}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{ceiln}(\pm\infty, n) &= \pm\infty \\
* \operatorname{ceiln}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @param {integer} n - integer power of 10
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = ceiln( 3.141592653589793, -2 );
* // returns 3.15
*
* @example
* // If n = 0, `ceiln` behaves like `ceil`:
* var v = ceiln( 3.141592653589793, 0 );
* // returns 4.0
*
* @example
* // Round a value to the nearest thousand:
* var v = ceiln( 12368.0, 3 );
* // returns 13000.0
*/
function ceiln( x, n ) {
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		_$isInfinite_99( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...
		n < _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ||

		// If `|x|` is large enough, no decimals to round...
		( _$abs_118( x ) > MAX_INT && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is infinity and any negative finite `x` is zero.
	if ( n > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		if ( x <= 0.0 ) {
			return -0.0; // preserve the sign (same behavior as ceil)
		}
		return _$FLOAT64_PINF_85;
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < _$FLOAT64_MIN_BASE10_EXPONENT_77 ) {
		s = _$pow_618( 10.0, -(n + _$FLOAT64_MAX_BASE10_EXPONENT_68) );
		y = (x*__HUGE_217) * s; // order of operation matters!
		if ( _$isInfinite_99( y ) ) {
			return x;
		}
		return ( _$ceil_210(y)/__HUGE_217 ) / s;
	}
	s = _$pow_618( 10.0, -n );
	y = x * s;
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return _$ceil_210( y ) / s;
}


// EXPORTS //

var _$ceiln_217 = ceiln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n` toward positive infinity.
*
* @module @stdlib/math/base/special/ceiln
*
* @example
* var ceiln = require( '@stdlib/math/base/special/ceiln' );
*
* // Round a value to 2 decimal places:
* var v = ceiln( 3.141592653589793, -2 );
* // returns 3.15
*
* // If n = 0, `ceiln` behaves like `ceil`:
* v = ceiln( 3.141592653589793, 0 );
* // returns 4.0
*
* // Round a value to the nearest thousand:
* v = ceiln( 12368.0, 3 );
* // returns 13000.0
*/

// MODULES //

/* removed: var _$ceiln_217 = require( './ceiln.js' ); */;


// EXPORTS //

var _$ceiln_218 = _$ceiln_217;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$ceiln_218 = require( '@stdlib/math/base/special/ceiln' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) toward positive infinity.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = ceilb( 3.141592653589793, -4, 10 );
* // returns 3.1416
*
* @example
* // If n = 0 or b = 1, `ceilb` behaves like `ceil`:
* var v = ceilb( 3.141592653589793, 0, 2 );
* // returns 4.0
*
* @example
* // Round a value to the nearest multiple of two toward positive infinity:
* var v = ceilb( 5.0, 1, 2 );
* // returns 6.0
*/
function ceilb( x, n, b ) {
	var y;
	var s;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isnan_103( b ) ||
		b <= 0 ||
		_$isInfinite_99( n ) ||
		_$isInfinite_99( b )
	) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return _$ceiln_218( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return _$ceil_210( x );
	}
	s = _$pow_618( b, -n );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	y = _$ceil_210( x * s ) / s;

	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$ceilb_215 = ceilb;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n` toward positive infinity.
*
* @module @stdlib/math/base/special/ceilb
*
* @example
* var ceilb = require( '@stdlib/math/base/special/ceilb' );
*
* // Round a value to 4 decimal places:
* var v = ceilb( 3.141592653589793, -4, 10 );
* // returns 3.1416
*
* // If n = 0 or b = 1, behavior is same as `ceil`:
* v = ceilb( 3.141592653589793, 0, 2 );
* // returns 4.0
*
* // Round a value to the nearest multiple of two toward positive infinity:
* v = ceilb( 5.0, 1, 2 );
* // returns 6.0
*/

// MODULES //

/* removed: var _$ceilb_215 = require( './ceilb.js' ); */;


// EXPORTS //

var _$ceilb_216 = _$ceilb_215;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$exponent_756 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest number toward positive infinity with \\(n\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = ceilsd( 3.141592653589793, 5 );
* // returns 3.1416
*
* @example
* var v = ceilsd( 3.141592653589793, 1 );
* // returns 4.0
*
* @example
* var v = ceilsd( 12368.0, 2 );
* // returns 13000.0
*
* @example
* var v = ceilsd( 0.0313, 2, 2 );
* // returns 0.046875
*/
function ceilsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		n < 1 ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			_$isnan_103( b ) ||
			b <= 0 ||
			_$isInfinite_99( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = _$log10_551( _$abs_118( x ) );
	}
	else if ( base === 2 ) {
		exp = _$exponent_756( _$abs_118( x ) );
	}
	else {
		exp = _$ln_545( _$abs_118(x) ) / _$ln_545( base );
	}
	exp = _$floor_346( exp - n + 1.0 );
	s = _$pow_618( base, _$abs_118( exp ) );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = _$ceil_210( x * s ) / s;
	} else {
		y = _$ceil_210( x / s ) * s;
	}
	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$ceilsd_219 = ceilsd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest number toward positive infinity with `n` significant figures.
*
* @module @stdlib/math/base/special/ceilsd
*
* @example
* var ceilsd = require( '@stdlib/math/base/special/ceilsd' );
*
* var v = ceilsd( 3.141592653589793, 5 );
* // returns 3.1416
*
* v = ceilsd( 3.141592653589793, 1 );
* // returns 4.0
*
* v = ceilsd( 12368.0, 2 );
* // returns 13000.0
*
* v = ceilsd( 0.0313, 2, 2 );
* // returns 0.046875
*/

// MODULES //

/* removed: var _$ceilsd_219 = require( './ceilsd.js' ); */;


// EXPORTS //

var _$ceilsd_220 = _$ceilsd_219;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isNegativeZero_107 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;


// MAIN //

/**
* Restricts a value to a specified range.
*
* @param {number} v - input value
* @param {number} min - minimum value
* @param {number} max - maximum value
* @returns {number} value restricted to a specified range
*
* @example
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/
function clamp( v, min, max ) {
	if (
		_$isnan_103( v ) ||
		_$isnan_103( min ) ||
		_$isnan_103( max )
	) {
		return NaN;
	}
	// Simple cases...
	if ( v < min ) {
		return min;
	}
	if ( v > max ) {
		return max;
	}
	// Special cases for handling +-0.0...
	if ( min === 0.0 && _$isNegativeZero_107( v ) ) {
		return min; // +-0.0
	}
	if ( v === 0.0 && _$isNegativeZero_107( max ) ) {
		return max; // -0.0
	}
	// Case: min <= v <= max
	return v;
}


// EXPORTS //

var _$clamp_222 = clamp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Restrict a value to a specified range.
*
* @module @stdlib/math/base/special/clamp
*
* @example
* var clamp = require( '@stdlib/math/base/special/clamp' );
*
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$clamp_222 = require( './main.js' ); */;


// EXPORTS //

var _$clamp_221 = _$clamp_222;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1985, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Computes the hyperbolic cosine of a number.
*
* ## Method
*
* ```tex
* \operatorname{cosh}(x) = \frac{ \exp(x) + \exp(-x) }{2}
* ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain   | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |
*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic cosine
*
* @example
* var v = cosh( 0.0 );
* // returns 1.0
*
* @example
* var v = cosh( 2.0 );
* // returns ~3.762
*
* @example
* var v = cosh( -2.0 );
* // returns ~3.762
*
* @example
* var v = cosh( NaN );
* // returns NaN
*/
function cosh( x ) {
	if ( _$isnan_103( x ) ) {
		return x;
	}
	if ( x < 0.0 ) {
		x = -x;
	}
	if ( x > 21.0 ) {
		return _$exp_314( x ) / 2.0;
	}
	return ( _$exp_314(x) + _$exp_314(-x) ) / 2.0;
}


// EXPORTS //

var _$cosh_227 = cosh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic cosine of a number.
*
* @module @stdlib/math/base/special/cosh
*
* @example
* var cosh = require( '@stdlib/math/base/special/cosh' );
*
* var v = cosh( 0.0 );
* // returns 1.0
*
* v = cosh( 2.0 );
* // returns ~3.762
*
* v = cosh( -2.0 );
* // returns ~3.762
*
* v = cosh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$cosh_227 = require( './cosh.js' ); */;


// EXPORTS //

var _$cosh_228 = _$cosh_227;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_231( x ) {
	if ( x === 0.0 ) {
		return 0.041666666666666664;
	}
	return 0.041666666666666664 + (x * (-0.0013888888888888872 + (x * (0.00002480158730157055 + (x * (-2.755731921499979e-7 + (x * (2.087675428708152e-9 + (x * (-1.147028484342536e-11 + (x * 4.737750796424621e-14))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_231 = __evalpoly_231;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$evalpoly_231 = require( './polyval_p.js' ); */;


// VARIABLES //

var __PIO4_229 = 7.85398163397448309616e-1; // 4/π


// MAIN //

/**
* Computes the cosine of a number minus one.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine minus one
*
* @example
* var v = cosm1( 0.0 );
* // returns 0.0
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = cosm1( PI/4.0 );
* // returns ~-0.293
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = cosm1( -PI/6.0 );
* // returns ~-0.134
*
* @example
* var v = cosm1( NaN );
* // returns NaN
*/
function cosm1( x ) {
	var x2;
	if ( x < -__PIO4_229 || x > __PIO4_229 ) {
		return _$cos_226( x ) - 1.0;
	}
	x2 = x * x;
	return ( -0.5*x2 ) + ( x2*x2*_$evalpoly_231( x2 ) );
}


// EXPORTS //

var _$cosm1_229 = cosm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number minus one.
*
* @module @stdlib/math/base/special/cosm1
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var cosm1 = require( '@stdlib/math/base/special/cosm1' );
*
* var v = cosm1( 0.0 );
* // returns 0.0
*
* v = cosm1( PI/4.0 );
* // returns ~-0.291
*
* v = cosm1( -PI/6.0 );
* // returns ~-0.134
*/

// MODULES //

/* removed: var _$cosm1_229 = require( './cosm1.js' ); */;


// EXPORTS //

var _$cosm1_230 = _$cosm1_229;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;


// MAIN //

/**
* Computes the coversed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} coversed cosine
*
* @example
* var v = covercos( 0.0 );
* // returns 1.0
*
* @example
* var v = covercos( 3.141592653589793/2.0 );
* // returns 2.0
*
* @example
* var v = covercos( -3.141592653589793/6.0 );
* // returns 0.5
*
* @example
* var v = covercos( NaN );
* // returns NaN
*/
function covercos( x ) {
	return 1.0 + _$sin_683( x );
}


// EXPORTS //

var _$covercos_234 = covercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the coversed cosine.
*
* @module @stdlib/math/base/special/covercos
*
* @example
* var covercos = require( '@stdlib/math/base/special/covercos' );
*
* var v = covercos( 0.0 );
* // returns 1.0
*
* v = covercos( 3.141592653589793/2.0 );
* // returns 2.0
*
* v = covercos( -3.141592653589793/6.0 );
* // returns 0.5
*
* v = covercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$covercos_234 = require( './covercos.js' ); */;


// EXPORTS //

var _$covercos_235 = _$covercos_234;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;


// MAIN //

/**
* Computes the coversed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} coversed sine
*
* @example
* var v = coversin( 0.0 );
* // returns 1.0
*
* @example
* var v = coversin( 3.141592653589793/2.0 );
* // returns 0.0
*
* @example
* var v = coversin( -3.141592653589793/6.0 );
* // returns 1.5
*
* @example
* var v = coversin( NaN );
* // returns NaN
*/
function coversin( x ) {
	return 1.0 - _$sin_683( x );
}


// EXPORTS //

var _$coversin_236 = coversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the coversed sine.
*
* @module @stdlib/math/base/special/coversin
*
* @example
* var coversin = require( '@stdlib/math/base/special/coversin' );
*
* var v = coversin( 0.0 );
* // returns 1.0
*
* v = coversin( 3.141592653589793/2.0 );
* // returns 0.0
*
* v = coversin( -3.141592653589793/6.0 );
* // returns 1.5
*
* v = coversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$coversin_236 = require( './coversin.js' ); */;


// EXPORTS //

var _$coversin_237 = _$coversin_236;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// π / 180.0
var PI_DIV_180 = 1.7453292519943295e-2;


// MAIN //

/**
* Converts an angle from degrees to radians.
*
* @param {number} x - angle in degrees
* @returns {number} angle in radians
*
* @example
* var r = deg2rad( 90.0 );
* // returns ~1.571
*
* @example
* var r = deg2rad( -45.0 );
* // returns ~-0.785
*
* @example
* var r = deg2rad( NaN );
* // returns NaN
*/
function deg2rad( x ) {
	return x * PI_DIV_180;
}


// EXPORTS //

var _$deg2rad_238 = deg2rad;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert an angle from degrees to radians.
*
* @module @stdlib/math/base/special/deg2rad
*
* @example
* var deg2rad = require( '@stdlib/math/base/special/deg2rad' );
*
* var r = deg2rad( 90.0 );
* // returns ~1.571
*
* r = deg2rad( -45.0 );
* // returns ~-0.785
*
* r = deg2rad( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$deg2rad_238 = require( './deg2rad.js' ); */;


// EXPORTS //

var _$deg2rad_239 = _$deg2rad_238;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_538( x ) {
	if ( x === 0.0 ) {
		return 0.13333333333320124;
	}
	return 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_538 = __evalpoly_538;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_537( x ) {
	if ( x === 0.0 ) {
		return 0.05396825397622605;
	}
	return 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_537 = __evalpoly_537;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$evalpoly_538 = require( './polyval_t_odd.js' ); */;
/* removed: var _$evalpoly_537 = require( './polyval_t_even.js' ); */;


// VARIABLES //

var __PIO4_536 = 7.85398163397448278999e-01;
var PIO4LO = 3.06161699786838301793e-17;
var T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563

// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111
var __HIGH_WORD_ABS_MASK_536 = 0x7fffffff|0; // asm type annotation


// MAIN //

/**
* Computes the tangent on \\( \approx\[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive \\( x \\).
*
* -   Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\( -0 \\). Callers may do the optimization \\( \tan(x) \approx x \\) for tiny \\( x \\).
*
* -   \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( \[0, 0.67434] \\)
*
*     ```tex
*     \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*     ```
*     where
*
*     ```tex
*     \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*     ```
*
* -   Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*     ```tex
*     r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*     ```
*
*     then
*
*     ```tex
*     \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*     ```
*
* -   For \\( x \\) in \\( \[0.67434, \pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*     ```tex
*     \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*     = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)
* @param {number} y - tail of `x`
* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned
* @returns {number} tangent
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* @example
* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* @example
* var out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*
* @example
* var out = kernelTan( NaN, 0.0, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( 3.0, NaN, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( NaN, NaN, 1 );
* // returns NaN
*/
function kernelTan( x, y, k ) {
	var hx;
	var ix;
	var a;
	var r;
	var s;
	var t;
	var v;
	var w;
	var z;

	hx = _$getHighWord_762( x );

	// High word of |x|:
	ix = (hx & __HIGH_WORD_ABS_MASK_536)|0; // asm type annotation

	// Case: |x| >= 0.6744
	if ( ix >= 0x3FE59428 ) {
		if ( x < 0 ) {
			x = -x;
			y = -y;
		}
		z = __PIO4_536 - x;
		w = PIO4LO - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;

	// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...
	r = _$evalpoly_538( w );
	v = z * _$evalpoly_537( w );
	s = z * x;
	r = y + (z * ((s * (r + v)) + y));
	r += T0 * s;
	w = x + r;
	if ( ix >= 0x3FE59428 ) {
		v = k;
		return ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len
	}
	if ( k === 1 ) {
		return w;
	}
	// Compute -1/(x+r) accurately...
	z = w;
	_$setLowWord_773( z, 0 );
	v = r - (z - x); // z + v = r + x
	a = -1.0 / w; // a = -1/w
	t = a;
	_$setLowWord_773( t, 0 );
	s = 1.0 + (t * z);
	return t + (a * (s + (t * v)));
}


// EXPORTS //

var _$kernelTan_536 = kernelTan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the tangent of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-tan
*
* @example
* var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
*
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*/

// MODULES //

/* removed: var _$kernelTan_536 = require( './kernel_tan.js' ); */;


// EXPORTS //

var _$kernelTan_535 = _$kernelTan_536;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelTan_535 = require( '@stdlib/math/base/special/kernel-tan' ); */;
/* removed: var _$rempio2_635 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Scratch buffer:
var __buffer_708 = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var __HIGH_WORD_ABS_MASK_708 = 0x7fffffff|0; // asm type annotation

// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011
var __HIGH_WORD_PIO4_708 = 0x3fe921fb|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var __HIGH_WORD_EXPONENT_MASK_708 = 0x7ff00000|0; // asm type annotation

// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000
var __HIGH_WORD_TWO_NEG_27_708 = 0x3e400000|0; // asm type annotation


// MAIN //

/**
* Evaluates the tangent of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} tangent
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/
function tan( x ) {
	var ix;
	var n;

	ix = _$getHighWord_762( x );
	ix &= __HIGH_WORD_ABS_MASK_708;

	// Case: |x| ~< π/4
	if ( ix <= __HIGH_WORD_PIO4_708 ) {
		// Case: |x| < 2**-27
		if ( ix < __HIGH_WORD_TWO_NEG_27_708 ) {
			return x;
		}
		return _$kernelTan_535( x, 0.0, 1 );
	}
	// Case: tan(Inf or NaN) is NaN
	if ( ix >= __HIGH_WORD_EXPONENT_MASK_708 ) {
		return NaN;
	}
	// Argument reduction needed...
	n = _$rempio2_635( x, __buffer_708 );
	return _$kernelTan_535( __buffer_708[ 0 ], __buffer_708[ 1 ], 1-((n&1)<<1) );
}


// EXPORTS //

var _$tan_708 = tan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var tan = require( '@stdlib/math/base/special/tan' );
*
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$tan_708 = require( './tan.js' ); */;


// EXPORTS //

var _$tan_707 = _$tan_708;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_243( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333333;
	}
	return 0.08333333333333333 + (x * (-0.008333333333333333 + (x * (0.003968253968253968 + (x * (-0.004166666666666667 + (x * (0.007575757575757576 + (x * (-0.021092796092796094 + (x * (0.08333333333333333 + (x * -0.4432598039215686))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_243 = __evalpoly_243;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalpoly_243 = require( './polyval_p.js' ); */;


// MAIN //

/**
* Evaluates the digamma function via asymptotic expansion.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function digamma( x ) {
	var y;
	var z;
	x -= 1.0;
	y = _$ln_545(x) + ( 1.0 / (2.0*x) );
	z = 1.0 / (x*x);
	return y - ( z*_$evalpoly_243( z ) );
}


// EXPORTS //

var _$digamma_240 = digamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_245( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.25479851061131553;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.25479851061131553 + (x * (-0.3255503118680449 + (x * (-0.6503185377089651 + (x * (-0.28919126444774784 + (x * (-0.04525132144873906 + (x * (-0.002071332116774595 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (2.076711702373047 + (x * (1.4606242909763516 + (x * (0.43593529692665967 + (x * (0.054151797245674226 + (x * (0.0021284987017821146 + (x * -5.578984132167551e-7))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.002071332116774595 + (x * (-0.04525132144873906 + (x * (-0.28919126444774784 + (x * (-0.6503185377089651 + (x * (-0.3255503118680449 + (x * 0.25479851061131553))))))))))); // eslint-disable-line max-len
		s2 = -5.578984132167551e-7 + (x * (0.0021284987017821146 + (x * (0.054151797245674226 + (x * (0.43593529692665967 + (x * (1.4606242909763516 + (x * (2.076711702373047 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_245 = __evalrational_245;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$evalrational_245 = require( './rational_pq.js' ); */;


// VARIABLES //

var root1 = 1569415565.0 / 1073741824.0;
var root2 = ( 381566830.0 / 1073741824.0 ) / 1073741824.0;
var root3 = 0.9016312093258695918615325266959189453125e-19;
var __Y_244 = 0.99558162689208984;


// MAIN //

/**
* Evaluates the digamma function over interval `[1,2]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function __digamma_244( x ) {
	var g;
	var r;
	g = x - root1;
	g -= root2;
	g -= root3;
	r = _$evalrational_245( x-1.0 );
	return (g*__Y_244) + (g*r);
}


// EXPORTS //

var _$digamma_244 = __digamma_244;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$tan_707 = require( '@stdlib/math/base/special/tan' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$digamma_240 = require( './asymptotic_expansion.js' ); */;
/* removed: var _$digamma_244 = require( './rational_approximation.js' ); */;


// VARIABLES //

var MIN_SAFE_ASYMPTOTIC = 10.0; // BIG!


// MAIN //

/**
* Evaluates the digamma function.
*
* ## Method
*
* 1.  For \\(x < 0\\), we use the reflection formula
*
*     ```tex
*     \psi(1-x) = \psi(x) + \frac{\pi}{\tan(\pi x)}
*     ```
*
*     to make \\(x\\) positive.
*
* 2.  For \\(x \in \[0,1]\\), we use the recurrence relation
*
*     ```tex
*     \psi(x) = \psi(x+1) - \frac{1}{x}
*     ```
*
*     to shift the evaluation range to \\(\[1,2]\\).
*
* 3.  For \\(x \in \[1,2]\\), we use a rational approximation of the form
*
*     ```tex
*     \psi(x) = (x - \mathrm{root})(Y + \operatorname{R}(x-1))
*     ```
*
*     where \\(\mathrm{root}\\) is the location of the positive root of \\(\psi\\), \\(Y\\) is a constant, and \\(R\\) is optimized for low absolute error compared to \\(Y\\).
*
*     <!-- <note>-->
*
*     Note that, since \\(\mathrm{root}\\) is irrational, we need twice as many digits in \\(\mathrm{root}\\) as in \\(x\\) in order to avoid cancellation error during subtraction, assuming \\(x\\) has an exact value. This means that, even if \\(x\\) is rounded to the next representable value, the result of \\(\psi(x)\\) will not be zero.
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     This approach gives 17-digit precision.
*
*     <!-- </note> -->
*
* 4.  For \\(x \in \[2,\mathrm{BIG}]\\), we use the recurrence relation
*
*     ```tex
*     \psi(x+1) = \psi(x) + \frac{1}{x}
*     ```
*
*     to shift the evaluation range to \\(\[1,2]\\).
*
* 5.  For \\(x > \mathrm{BIG}\\), we use the asymptotic expression
*
*     ```tex
*     \psi(x) = \ln(x) + \frac{1}{2x} - \biggl( \frac{B_{21}}{2x^2} + \frac{B_{22}}{4x^4} + \frac{B_{23}}{6x^6} + \ldots \biggr)
*     ```
*
*     This expansion, however, is divergent after a few terms. The number of terms depends on \\(x\\). Accordingly, we must choose a value of \\(\mathrm{BIG}\\) which allows us to truncate the series at a term that is too small to have an effect on the result. Setting \\(\mathrm{BIG} = 10\\), allows us to truncate the series early and evaluate as \\(1/x^2\\).
*
*     <!-- <note> -->
*
*     This approach gives 17-digit precision for \\(x \geq 10\\).
*
*     <!-- </note> -->
*
* ## Notes
*
* -   Maximum deviation found: \\(1.466\\mbox{e-}18\\)
* -   Max error found: \\(2.452\mbox{e-}17\\) (double precision)
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = digamma( -2.5 );
* // returns ~1.103
*
* @example
* var v = digamma( 1.0 );
* // returns ~-0.577
*
* @example
* var v = digamma( 10.0 );
* // returns ~2.252
*
* @example
* var v = digamma( NaN );
* // returns NaN
*
* @example
* var v = digamma( -1.0 );
* // returns NaN
*/
function __digamma_241( x ) {
	var rem;
	var tmp;
	if ( _$isnan_103( x ) || x === 0.0 ) {
		return NaN;
	}
	// If `x` is negative, use reflection...
	if ( x <= -1.0 ) {
		// Reflect:
		x = 1.0 - x;

		// Argument reduction for tan:
		rem = x - _$floor_346(x);

		// Shift to negative if > 0.5:
		if ( rem > 0.5 ) {
			rem -= 1.0;
		}
		// Check for evaluation at a negative pole:
		if ( rem === 0.0 ) {
			return NaN;
		}
		tmp = _$PI_84 / _$tan_707( _$PI_84 * rem );
	} else {
		tmp = 0.0;
	}
	// If we're above the lower-limit for the asymptotic expansion, then use it...
	if ( x >= MIN_SAFE_ASYMPTOTIC ) {
		tmp += _$digamma_240( x );
		return tmp;
	}
	// If x > 2, reduce to the interval [1,2]...
	while ( x > 2.0 ) {
		x -= 1.0;
		tmp += 1.0/x;
	}
	// If x < 1, use recurrence to shift to > 1..
	while ( x < 1.0 ) {
		tmp -= 1.0/x;
		x += 1.0;
	}
	tmp += _$digamma_244( x );
	return tmp;
}


// EXPORTS //

var _$digamma_241 = __digamma_241;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the digamma function.
*
* @module @stdlib/math/base/special/digamma
*
* @example
* var digamma = require( '@stdlib/math/base/special/digamma' );
*
* var v = digamma( -2.5 );
* // returns ~1.103
*
* v = digamma( 1.0 );
* // returns ~-0.577
*
* v = digamma( 10.0 );
* // returns ~2.252
*
* v = digamma( NaN );
* // returns NaN
*
* v = digamma( -1.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$digamma_241 = require( './digamma.js' ); */;


// EXPORTS //

var _$digamma_242 = _$digamma_241;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the Dirac delta function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = diracDelta( 0.0 );
* // returns Infinity
*
* @example
* var v = diracDelta( 3.14 );
* // returns 0.0
*
* @example
* var v = diracDelta( NaN );
* // returns NaN
*/
function diracDelta( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_85;
	}
	return 0.0;
}


// EXPORTS //

var _$diracDelta_246 = diracDelta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Dirac delta function.
*
* @module @stdlib/math/base/special/dirac-delta
*
* @example
* var diracDelta = require( '@stdlib/math/base/special/dirac-delta' );
*
* var v = diracDelta( 0.0 );
* // returns Infinity
*
* v = diracDelta( 3.14 );
* // returns 0.0
*
* v = diracDelta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$diracDelta_246 = require( './dirac_delta.js' ); */;


// EXPORTS //

var _$diracDelta_247 = _$diracDelta_246;

var _$odd_positive_integers_642=[
	1.202056903159594285399738161511449990764986292340498881792,
	1.036927755143369926331365486457034168057080919501912811974,
	1.008349277381922826839797549849796759599863560565238706417,
	1.002008392826082214417852769232412060485605851394888756548,
	1.000494188604119464558702282526469936468606435758208617119,
	1.000122713347578489146751836526357395714275105895509845136,
	1.000030588236307020493551728510645062587627948706858177506,
	1.000007637197637899762273600293563029213088249090262679095,
	1.000001908212716553938925656957795101353258571144838630235,
	1.000000476932986787806463116719604373045966446694784937600,
	1.000000119219925965311073067788718882326387254997784519858,
	1.000000029803503514652280186063705069366011844730919543312,
	1.000000007450711789835429491981004170604119454719031882565,
	1.000000001862659723513049006403909945416948061665330469200,
	1.000000000465662906503378407298923325122007106269185336947,
	1.000000000116415501727005197759297383545630951652247172763,
	1.000000000029103850444970996869294252278840464106981987433,
	1.000000000007275959835057481014520869012338059264850925555,
	1.000000000001818989650307065947584832100730085030589309618,
	1.000000000000454747378304215402679911202948857033904529911,
	1.000000000000113686840768022784934910483802590643743590284,
	1.000000000000028421709768893018554550737049426620743688265,
	1.000000000000007105427395210852712877354479956800022742043,
	1.000000000000001776356843579120327473349014400279570155508,
	1.000000000000000444089210314381336419777094026812133645960,
	1.000000000000000111022302514106613372054456992138270248322,
	1.000000000000000027755575621361241725816324538540697689849,
	1.000000000000000006938893904544153697446085326249809274836,
	1.000000000000000001734723476047576572048972969937595907478,
	1.000000000000000000433680869002065048749702356590624136125,
	1.000000000000000000108420217249424140630127111654613825894,
	1.000000000000000000027105054312234688319546213119497764319,
	1.000000000000000000006776263578045189097995298741556686206,
	1.000000000000000000001694065894509799165406492747124861940,
	1.000000000000000000000423516473627283334786227048335793441,
	1.000000000000000000000105879118406802338522650015392383985,
	1.000000000000000000000026469779601698529611341166842038716,
	1.000000000000000000000006617444900424404067355245332308220,
	1.000000000000000000000001654361225106075646229923677181049,
	1.000000000000000000000000413590306276516092600938245550814,
	1.000000000000000000000000103397576569128709932840955917459,
	1.000000000000000000000000025849394142282142681277617708450,
	1.000000000000000000000000006462348535570531803438002161122,
	1.000000000000000000000000001615587133892632521206011405705,
	1.000000000000000000000000000403896783473158082562226281299,
	1.000000000000000000000000000100974195868289515336192507001,
	1.000000000000000000000000000025243548967072378244674341938,
	1.000000000000000000000000000006310887241768094495682609394,
	1.000000000000000000000000000001577721810442023616644432783,
	1.000000000000000000000000000000394430452610505903352639355,
	1.000000000000000000000000000000098607613152626475748329968,
	1.000000000000000000000000000000024651903288156618927101395,
	1.000000000000000000000000000000006162975822039154730666338,
	1.000000000000000000000000000000001540743955509788682543361,
	1.000000000000000000000000000000000385185988877447170622149,
	1.000000000000000000000000000000000096296497219361792654016
]

var _$even_nonnegative_integers_640=[
	-0.5,
	1.644934066848226436472415166646025189218949901206798437735,
	1.082323233711138191516003696541167902774750951918726907682,
	1.017343061984449139714517929790920527901817490032853561842,
	1.004077356197944339378685238508652465258960790649850020329,
	1.000994575127818085337145958900319017006019531564477517257,
	1.000246086553308048298637998047739670960416088458003404533,
	1.000061248135058704829258545105135333747481696169154549482,
	1.000015282259408651871732571487636722023237388990471531153,
	1.000003817293264999839856461644621939730454697218953331143,
	1.000000953962033872796113152038683449345943794187410595750,
	1.000000238450502727732990003648186752994935041821779658269,
	1.000000059608189051259479612440207935801227503918837302795,
	1.000000014901554828365041234658506630698628864788167885910,
	1.000000003725334024788457054819204018402423232893059295811,
	1.000000000931327432419668182871764735021219813567955136816,
	1.000000000232831183367650549200145597594049502482982284530,
	1.000000000058207720879027008892436859891063054173122604617,
	1.000000000014551921891041984235929632245318420983808894124,
	1.000000000003637979547378651190237236355873273512646028384,
	1.000000000000909494784026388928253311838694908753860000990,
	1.000000000000227373684582465251522682157797869121382982198,
	1.000000000000056843419876275856092771829675240685530571588,
	1.000000000000014210854828031606769834307141739537678698605,
	1.000000000000003552713691337113673298469534059342992145655,
	1.000000000000000888178421093081590309609138639138632560887,
	1.000000000000000222044605079804198399932009420465396423665,
	1.000000000000000055511151248454812437237365905094302816723
]

var _$bernoulli_639=[1.00000000000000000000000000000000000000000,
0.166666666666666666666666666666666666666667,
-0.0333333333333333333333333333333333333333333,
0.0238095238095238095238095238095238095238095,
-0.0333333333333333333333333333333333333333333,
0.0757575757575757575757575757575757575757576,
-0.253113553113553113553113553113553113553114,
1.16666666666666666666666666666666666666667,
-7.09215686274509803921568627450980392156863,
54.9711779448621553884711779448621553884712,
-529.124242424242424242424242424242424242424,
6192.12318840579710144927536231884057971014,
-86580.2531135531135531135531135531135531136,
1.42551716666666666666666666666666666666667e6,
-2.72982310678160919540229885057471264367816e7,
6.01580873900642368384303868174835916771401e8,
-1.51163157670921568627450980392156862745098e10,
4.29614643061166666666666666666666666666667e11,
-1.37116552050883327721590879485616327721591e13,
4.88332318973593166666666666666666666666667e14,
-1.92965793419400681486326681448632668144863e16,
8.41693047573682615000553709856035437430786e17,
-4.03380718540594554130768115942028985507246e19,
2.11507486380819916056014539007092198581560e21,
-1.20866265222965259346027311937082525317819e23,
7.50086674607696436685572007575757575757576e24,
-5.03877810148106891413789303052201257861635e26,
3.65287764848181233351104308429711779448622e28,
-2.84987693024508822262691464329106781609195e30,
2.38654274996836276446459819192192149717514e32,
-2.13999492572253336658107447651910973926742e34,
2.05009757234780975699217330956723102516667e36,
-2.09380059113463784090951852900279701847092e38,
2.27526964884635155596492603527692645814700e40,
-2.62577102862395760473030497361582020814490e42,
3.21250821027180325182047923042649852435219e44,
-4.15982781667947109139170744952623589366896e46,
5.69206954820352800238834562191210586444805e48,
-8.21836294197845756922906534686173330145509e50,
1.25029043271669930167323398297028955241772e53,
-2.00155832332483702749253291988132987687242e55,
3.36749829153643742333966769033387530162196e57,
-5.94709705031354477186604968440515408405791e59,
1.10119103236279775595641307904376916046305e62,
-2.13552595452535011886583850190410656789733e64,
4.33288969866411924196166130593792062184514e66,
-9.18855282416693282262005552155018971389604e68,
2.03468967763290744934550279902200200659751e71,
-4.70038339580357310785752555350060606545967e73,
1.13180434454842492706751862577339342678904e76,
-2.83822495706937069592641563364817647382847e78,
7.40642489796788506297508271409209841768797e80,
-2.00964548027566044834656196727153631868673e83,
5.66571700508059414457193460305193569614195e85,
-1.65845111541362169158237133743199123014950e88,
5.03688599504923774192894219151801548124424e90,
-1.58614682376581863693634015729664387827410e93,
5.17567436175456269840732406825071225612408e95,
-1.74889218402171173396900258776181591451415e98,
6.11605199949521852558245252642641677807677e100,
-2.21227769127078349422883234567129324455732e103,
8.27227767987709698542210624599845957312047e105,
-3.19589251114157095835916343691808148735263e108,
1.27500822233877929823100243029266798669572e111,
-5.25009230867741338994028246245651754469199e113,
2.23018178942416252098692981988387281437383e116,
-9.76845219309552044386335133989802393011669e118,
4.40983619784529542722726228748131691918758e121,
-2.05085708864640888397293377275830154864566e124,
9.82144332797912771075729696020975210414919e126,
-4.84126007982088805087891967099634127611305e129,
2.45530888014809826097834674040886903996737e132,
-1.28069268040847475487825132786017857218118e135,
6.86761671046685811921018885984644004360924e137,
-3.78464685819691046949789954163795568144895e140,
2.14261012506652915508713231351482720966602e143,
-1.24567271371836950070196429616376072194583e146,
7.43457875510001525436796683940520613117807e148,
-4.55357953046417048940633332233212748767721e151,
2.86121128168588683453638472510172325229190e154,
-1.84377235520338697276882026536287854875414e157,
1.21811545362210466995013165065995213558174e160,
-8.24821871853141215484818457296893447301419e162,
5.72258779378329433296516498142978615918685e165,
-4.06685305250591047267679693831158655602196e168,
2.95960920646420500628752695815851870426379e171,
-2.20495225651894575090311752273445984836379e174,
1.68125970728895998058311525151360665754464e177,
-1.31167362135569576486452806355817153004431e180,
1.04678940094780380821832853929823089643829e183,
-8.54328935788337077185982546299082774593270e185,
7.12878213224865423522884066771438224721245e188,
-6.08029314555358993000847118686477458461988e191,
5.29967764248499239300942910043247266228490e194,
-4.71942591687458626443646229013379911103761e197,
4.29284137914029810894168296541074669045521e200,
-3.98767449682322074434477655542938795106651e203,
3.78197804193588827138944181161393327898220e206,
-3.66142336836811912436858082151197348755196e209,
3.61760902723728623488554609298914089477541e212,
-3.64707726451913543621383088655499449048682e215,
3.75087554364544090983452410104814189306842e218,
-3.93458672964390282694891288533713429355657e221,
4.20882111481900820046571171111494898242731e224,
-4.59022962206179186559802940573325591059371e227,
5.10317257726295759279198185106496768539760e230,
-5.78227623036569554015377271242917142512200e233,
6.67624821678358810322637794412809363451080e236,
-7.85353076444504163225916259639312444428230e239,
9.41068940670587255245443288258762485293948e242,
-1.14849338734651839938498599206805592548354e246,
1.42729587428487856771416320087122499897180e249,
-1.80595595869093090142285728117654560926719e252,
2.32615353076608052161297985184708876161736e255,
-3.04957517154995947681942819261542593785327e258,
4.06858060764339734424012124124937318633684e261,
-5.52310313219743616252320044093186392324280e264,
7.62772793964343924869949690204961215533859e267,
-1.07155711196978863132793524001065396932667e271,
1.53102008959691884453440916153355334355847e274,
-2.22448916821798346676602348865048510824835e277,
3.28626791906901391668189736436895275365183e280,
-4.93559289559603449020711938191575963496999e283,
7.53495712008325067212266049779283956727824e286,
-1.16914851545841777278088924731655041783900e290,
1.84352614678389394126646201597702232396492e293,
-2.95368261729680829728014917350525183485207e296,
4.80793212775015697668878704043264072227967e299,
-7.95021250458852528538243631671158693036798e302,
1.33527841873546338750122832017820518292039e306]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_643( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.2433929443359375;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len
		s2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_643 = __evalrational_643;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_644( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5772156649015329;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len
		s2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_644 = __evalrational_644;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_645( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.053725830002359504;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len
		s2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_645 = __evalrational_645;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_646( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -2.497101906022594;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len
		s2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_646 = __evalrational_646;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_647( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -4.785580284951356;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len
		s2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_647 = __evalrational_647;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_648( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -10.39489505733089;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len
		s2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_648 = __evalrational_648;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_387 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$sinpi_697 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$TWO_PI_92 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$FLOAT64_SQRT_EPSILON_88 = require( '@stdlib/constants/math/float64-sqrt-eps' ); */;
/* removed: var _$LN_SQRT_TWO_PI_66 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$odd_positive_integers_642 = require( './odd_positive_integers.json' ); */;
/* removed: var _$even_nonnegative_integers_640 = require( './even_nonnegative_integers.json' ); */;
/* removed: var _$bernoulli_639 = require( './bernoulli.json' ); */;
/* removed: var _$evalrational_643 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_644 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_645 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_646 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_647 = require( './rational_p5q5.js' ); */;
/* removed: var _$evalrational_648 = require( './rational_p6q6.js' ); */;


// VARIABLES //

var MAX_BERNOULLI_2N = 129;
var __MAX_FACTORIAL_649 = 170; // TODO: consider making external constant
var __MAX_LN_649 = 709; // TODO: consider making external constant
var __Y1_649 = 1.2433929443359375;
var __Y3_649 = 0.6986598968505859375;


// MAIN //

/**
* Evaluates the Riemann zeta function.
*
* ## Method
*
* 1.  First, we use the reflection formula
*
*     ```tex
*     \zeta(1-s) = 2 \sin\biggl(\frac{\pi(1-s)}{2}\biggr)(2\pi^{-s})\Gamma(s)\zeta(s)
*     ```
*
*     to make \\(s\\) positive.
*
* 2.  For \\(s \in (0,1)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = \frac{C + \operatorname{R}(1-s) - s}{1-s}
*     ```
*
*     with rational approximation \\(\operatorname{R}(1-z)\\) and constant \\(C\\).
*
* 3.  For \\(s \in (1,4)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = C + \operatorname{R}(s-n) + \frac{1}{s-1}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\), constant \\(C\\), and integer \\(n\\).
*
* 4.  For \\(s > 4\\), we use the approximation
*
*     ```tex
*     \zeta(s) = 1 + e^{\operatorname{R}(z-n)}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\) and integer \\(n\\).
*
* 5.  For negative odd integers, we use the closed form
*
*     ```tex
*     \zeta(-n) = \frac{(-1)^n}{n+1} B_{n+1}
*     ```
*
*     where \\(B_{n+1}\\) is a Bernoulli number.
*
* 6.  For negative even integers, we use the closed form
*
*     ```tex
*     \zeta(-2n) = 0
*     ```
*
* 7.  For nonnegative even integers, we could use the closed form
*
*     ```tex
*     \zeta(2n) = \frac{(-1)^{n-1}2^{2n-1}\pi^{2n}}{(2n)!} B_{2n}
*     ```
*
*     where \\(B_{2n}\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).
*
* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.
*
*
* ## Notes
*
* -   \\(\[\approx 1.5\mbox{e-}8, 1)\\)
*
*     -   max deviation: \\(2.020\mbox{e-}18\\)
*     -   expected error: \\(-2.020\mbox{e-}18\\)
*     -   max error found (double): \\(3.994987\mbox{e-}17\\)
*
* -   \\(\[1,2\]\\)
*
*     -   max deviation: \\(9.007\mbox{e-}20\\)
*     -   expected error: \\(9.007\mbox{e-}20\\)
*
* -   \\((2,4\]\\)
*
*     -   max deviation: \\(5.946\mbox{e-}22\\)
*     -   expected error: \\(-5.946\mbox{e-}22\\)
*
* -   \\((4,7\]\\)
*
*     -   max deviation: \\(2.955\mbox{e-}17\\)
*     -   expected error: \\(2.955\mbox{e-}17\\)
*     -   max error found (double): \\(2.009135\mbox{e-}16\\)
*
* -   \\((7,15)\\)
*
*     -   max deviation: \\(7.117\mbox{e-}16\\)
*     -   expected error: \\(7.117\mbox{e-}16\\)
*     -   max error found (double): \\(9.387771\mbox{e-}16\\)
*
* -   \\(\[15,36)\\)
*
*     -   max error (in interpolated form): \\(1.668\mbox{e-}17\\)
*     -   max error found (long double): \\(1.669714\mbox{e-}17\\)
*
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = zeta( 1.1 );
* // returns ~10.584
*
* @example
* var v = zeta( -4.0 );
* // returns 0.0
*
* @example
* var v = zeta( 70.0 );
* // returns 1.0
*
* @example
* var v = zeta( 0.5 );
* // returns ~-1.46
*
* @example
* var v = zeta( 1.0 ); // pole
* // returns NaN
*
* @example
* var v = zeta( NaN );
* // returns NaN
*/
function zeta( s ) {
	var tmp;
	var sc;
	var as;
	var is;
	var r;
	var n;

	// Check for `NaN`:
	if ( _$isnan_103( s ) ) {
		return NaN;
	}
	// Check for a pole:
	if ( s === 1.0 ) {
		return NaN;
	}
	// Check for large value:
	if ( s >= 56.0 ) {
		return 1.0;
	}
	// Check for a closed form (integers):
	if ( _$isInteger_101( s ) ) {
		// Cast `s` to a 32-bit signed integer:
		is = s|0; // asm type annotation

		// Check that `s` does not exceed MAX_INT32:
		if ( is === s ) {
			if ( is < 0 ) {
				as = (-is)|0; // asm type annotation

				// Check if even negative integer:
				if ( (as&1) === 0 ) {
					return 0.0;
				}
				n = ( (as+1) / 2 )|0; // asm type annotation

				// Check if less than max Bernoulli number:
				if ( n <= MAX_BERNOULLI_2N ) {
					return -_$bernoulli_639[ n ] / (as+1.0);
				}
				// fall through...
			}
			// Check if even nonnegative integer:
			else if ( (is&1) === 0 ) {
				return _$even_nonnegative_integers_640[ is/2 ];
			}
			// Must be a odd positive integer:
			else {
				return _$odd_positive_integers_642[ (is-3)/2 ];
			}
		}
		// fall through...
	}
	if ( _$abs_118(s) < _$FLOAT64_SQRT_EPSILON_88 ) {
		return -0.5 - (_$LN_SQRT_TWO_PI_66 * s);
	}
	sc = 1.0 - s;
	if ( s < 0.0 ) {
		// Check if even negative integer:
		if ( _$floor_346(s/2.0) === s/2.0 ) {
			return 0.0;
		}
		// Swap `s` and `sc`:
		tmp = s;
		s = sc;
		sc = tmp;

		// Determine if computation will overflow:
		if ( s > __MAX_FACTORIAL_649 ) {
			tmp = _$sinpi_697( 0.5*sc ) * 2.0 * zeta( s );
			r = _$gammaln_445( s );
			r -= s * _$ln_545( _$TWO_PI_92 );
			if ( r > __MAX_LN_649 ) {
				return ( tmp < 0.0 ) ? _$FLOAT64_NINF_81 : _$FLOAT64_PINF_85;
			}
			return tmp * _$exp_314( r );
		}
		return _$sinpi_697( 0.5*sc ) * 2.0 * _$pow_618( _$TWO_PI_92, -s ) * _$gamma_387( s ) * zeta( s ); // eslint-disable-line max-len
	}
	if ( s < 1.0 ) {
		tmp = _$evalrational_643( sc );
		tmp -= __Y1_649;
		tmp += sc;
		tmp /= sc;
		return tmp;
	}
	if ( s <= 2.0 ) {
		sc = -sc;
		tmp = 1.0 / sc;
		return tmp + _$evalrational_644( sc );
	}
	if ( s <= 4.0 ) {
		tmp = __Y3_649 + ( 1.0 / (-sc) );
		return tmp + _$evalrational_645( s-2.0 );
	}
	if ( s <= 7.0 ) {
		tmp = _$evalrational_646( s-4.0 );
		return 1.0 + _$exp_314( tmp );
	}
	if ( s < 15.0 ) {
		tmp = _$evalrational_647( s-7.0 );
		return 1.0 + _$exp_314( tmp );
	}
	if ( s < 36.0 ) {
		tmp = _$evalrational_648( s-15.0 );
		return 1.0 + _$exp_314( tmp );
	}
	// s < 56
	return 1.0 + _$pow_618( 2.0, -s );
}


// EXPORTS //

var _$zeta_649 = zeta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Riemann zeta function.
*
* @module @stdlib/math/base/special/riemann-zeta
*
* @example
* var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
*
* var v = zeta( 1.1 );
* // returns ~10.584
*
* v = zeta( -4.0 );
* // returns 0.0
*
* v = zeta( 70.0 );
* // returns 1.0
*
* v = zeta( 0.5 );
* // returns ~-1.46
*
* v = zeta( 1.0 ); // pole
* // returns NaN
*
* v = zeta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$zeta_649 = require( './zeta.js' ); */;


// EXPORTS //

var _$zeta_641 = _$zeta_649;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$powm1_629 = require( '@stdlib/math/base/special/powm1' ); */;
/* removed: var _$zeta_641 = require( '@stdlib/math/base/special/riemann-zeta' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Evaluates the Dirichlet eta function.
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = eta( 0.0 );
* // returns 0.5
*
* @example
* var v = eta( -1.0 );
* // returns 0.25
*
* @example
* var v = eta( 1.0 ); // => ln(2)
* // returns ~0.6931
*
* @example
* var v = eta( 3.14 );
* // returns ~0.9096
*
* @example
* var v = eta( NaN );
* // returns NaN
*/
function eta( s ) {
	if ( _$isnan_103( s ) ) {
		return NaN;
	}
	if ( s === 1.0 ) {
		// Alternating harmonic series...
		return _$LN2_67;
	}
	return -_$powm1_629( 2.0, 1.0-s ) * _$zeta_641( s );
}


// EXPORTS //

var _$eta_248 = eta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Dirichlet eta function.
*
* @module @stdlib/math/base/special/dirichlet-eta
*
* @example
* var eta = require( '@stdlib/math/base/special/dirichlet-eta' );
*
* var v = eta( 0.0 );
* // returns 0.5
*
* v = eta( -1.0 );
* // returns 0.25
*
* v = eta( 1.0 ); // => ln(2)
* // returns ~0.6931
*
* v = eta( 3.14 );
* // returns ~0.9096
*
* v = eta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$eta_248 = require( './eta.js' ); */;


// EXPORTS //

var _$eta_249 = _$eta_248;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_254( x ) {
	if ( x === 0.0 ) {
		return 1.5910034537907922;
	}
	return 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_254 = __evalpoly_254;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_266( x ) {
	if ( x === 0.0 ) {
		return 1.5910034537907922;
	}
	return 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_266 = __evalpoly_266;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_270( x ) {
	if ( x === 0.0 ) {
		return 1.63525673226458;
	}
	return 1.63525673226458 + (x * (0.4711906261487323 + (x * (0.3097284108314996 + (x * (0.2522083117731357 + (x * (0.22672562321968465 + (x * (0.21577444672958598 + (x * (0.21310877187734892 + (x * (0.21602912460518828 + (x * (0.2232558316330579 + (x * (0.23418050129420992 + (x * (0.24855768297226408 + (x * 0.26636380989261754))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_270 = __evalpoly_270;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_271( x ) {
	if ( x === 0.0 ) {
		return 1.685750354812596;
	}
	return 1.685750354812596 + (x * (0.5417318486132803 + (x * (0.40152443839069024 + (x * (0.3696424734208891 + (x * (0.37606071535458363 + (x * (0.4052358870851259 + (x * (0.45329438175399905 + (x * (0.5205189476511842 + (x * (0.609426039204995 + (x * (0.7242635222829089 + (x * (0.8710138477098124 + (x * 1.057652872753547))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_271 = __evalpoly_271;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_272( x ) {
	if ( x === 0.0 ) {
		return 1.7443505972256133;
	}
	return 1.7443505972256133 + (x * (0.6348642753719353 + (x * (0.5398425641644455 + (x * (0.5718927051937874 + (x * (0.6702951362654062 + (x * (0.8325865900109772 + (x * (1.0738574482479333 + (x * (1.4220914606754977 + (x * (1.9203871834023047 + (x * (2.6325525483316543 + (x * (3.6521097473190394 + (x * (5.115867135558866 + (x * 7.224080007363877))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_272 = __evalpoly_272;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_273( x ) {
	if ( x === 0.0 ) {
		return 1.8138839368169826;
	}
	return 1.8138839368169826 + (x * (0.7631632457005573 + (x * (0.7619286053215958 + (x * (0.9510746536684279 + (x * (1.315180671703161 + (x * (1.9285606934774109 + (x * (2.9375093425313787 + (x * (4.594894405442878 + (x * (7.33007122188172 + (x * (11.871512597425301 + (x * (19.45851374822938 + (x * (32.20638657246427 + (x * (53.73749198700555 + (x * 90.27388602941))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_273 = __evalpoly_273;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_274( x ) {
	if ( x === 0.0 ) {
		return 1.8989249102715535;
	}
	return 1.8989249102715535 + (x * (0.9505217946182445 + (x * (1.1510775899590158 + (x * (1.7502391069863006 + (x * (2.952676812636875 + (x * (5.285800396121451 + (x * (9.83248571665998 + (x * (18.787148683275596 + (x * (36.61468615273698 + (x * (72.45292395127771 + (x * (145.1079577347069 + (x * (293.4786396308497 + (x * (598.385181505501 + (x * (1228.4200130758634 + (x * 2536.5297553827645))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_274 = __evalpoly_274;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_275( x ) {
	if ( x === 0.0 ) {
		return 2.0075983984243764;
	}
	return 2.0075983984243764 + (x * (1.2484572312123474 + (x * (1.9262346570764797 + (x * (3.7512896400875877 + (x * (8.119944554932045 + (x * (18.665721308735552 + (x * (44.603924842914374 + (x * (109.50920543094983 + (x * (274.2779548232414 + (x * (697.5598008606327 + (x * (1795.7160145002472 + (x * (4668.38171679039 + (x * (12235.762468136643 + (x * (32290.17809718321 + (x * (85713.07608195965 + (x * (228672.1890493117 + (x * 612757.2711915852))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_275 = __evalpoly_275;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_276( x ) {
	if ( x === 0.0 ) {
		return 2.1565156474996434;
	}
	return 2.1565156474996434 + (x * (1.7918056418494632 + (x * (3.8267512874657132 + (x * (10.386724683637972 + (x * (31.403314054680703 + (x * (100.92370394986955 + (x * (337.3268282632273 + (x * (1158.7079305678278 + (x * (4060.9907421936323 + (x * (14454.001840343448 + (x * (52076.661075994045 + (x * (189493.65914621568 + (x * (695184.5762413896 + (x * (2567994.048255285 + (x * (9541921.966748387 + (x * (35634927.44218076 + (x * (133669298.46120408 + (x * (503352186.68662846 + (x * (1901975729.53866 + (x * 7208915015.330104))))))))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_276 = __evalpoly_276;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_277( x ) {
	if ( x === 0.0 ) {
		return 2.3181226217125106;
	}
	return 2.3181226217125106 + (x * (2.6169201502912327 + (x * (7.897935075731356 + (x * (30.502397154466724 + (x * (131.48693655235286 + (x * (602.9847637356492 + (x * (2877.024617809973 + (x * (14110.519919151804 + (x * (70621.4408815654 + (x * (358977.266582531 + (x * (1847238.2637239718 + (x * (9600515.416049214 + (x * (50307677.08502367 + (x * (265444188.6527128 + (x * (1408862325.0287027 + (x * 7515687935.373775))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_277 = __evalpoly_277;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_267( x ) {
	if ( x === 0.0 ) {
		return 2.473596173751344;
	}
	return 2.473596173751344 + (x * (3.727624244118099 + (x * (15.607393035549306 + (x * (84.12850842805888 + (x * (506.98181970406137 + (x * (3252.2770581451236 + (x * (21713.242419574344 + (x * (149037.04518909327 + (x * (1043999.3310899908 + (x * (7427974.817042039 + (x * (53503839.67558661 + (x * (389249886.99487084 + (x * (2855288351.1008105 + (x * (21090077038.76684 + (x * (156699833947.7902 + (x * (1170222242422.44 + (x * (8777948323668.9375 + (x * (66101242752484.95 + (x * (499488053713388.8 + (x * 37859743397240296.0))))))))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_267 = __evalpoly_267;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_268( x ) {
	if ( x === 0.0 ) {
		return 0.0;
	}
	return 0.0 + (x * (0.0625 + (x * (0.03125 + (x * (0.0205078125 + (x * (0.01513671875 + (x * (0.011934280395507812 + (x * (0.009816169738769531 + (x * (0.008315593004226685 + (x * (0.007199153304100037 + (x * (0.00633745662344154 + (x * (0.00565311038371874 + (x * (0.005097046040418718 + (x * (0.004636680381850056 + (x * (0.004249547423822886 + (x * 0.003919665602267974))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_268 = __evalpoly_268;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_269( x ) {
	if ( x === 0.0 ) {
		return 1.5910034537907922;
	}
	return 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_269 = __evalpoly_269;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original Julia code and copyright notice are from the [Julia library]{@link https://github.com/JuliaMath/SpecialFunctions.jl/blob/master/src/ellip.jl}. The implementation has been modified for JavaScript.
*
* ```text
* The MIT License (MIT)
*
* Copyright (c) 2017 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and others:
*
* https://github.com/JuliaMath/SpecialFunctions.jl/graphs/contributors
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$evalpoly_266 = require( './poly_p1.js' ); */;
/* removed: var _$evalpoly_270 = require( './poly_p2.js' ); */;
/* removed: var _$evalpoly_271 = require( './poly_p3.js' ); */;
/* removed: var _$evalpoly_272 = require( './poly_p4.js' ); */;
/* removed: var _$evalpoly_273 = require( './poly_p5.js' ); */;
/* removed: var _$evalpoly_274 = require( './poly_p6.js' ); */;
/* removed: var _$evalpoly_275 = require( './poly_p7.js' ); */;
/* removed: var _$evalpoly_276 = require( './poly_p8.js' ); */;
/* removed: var _$evalpoly_277 = require( './poly_p9.js' ); */;
/* removed: var _$evalpoly_267 = require( './poly_p10.js' ); */;
/* removed: var _$evalpoly_268 = require( './poly_p11.js' ); */;
/* removed: var _$evalpoly_269 = require( './poly_p12.js' ); */;


// VARIABLES //

var ONE_DIV_PI = 0.3183098861837907;


// MAIN //

/**
* Computes the complete elliptic integral of the first kind.
*
* ## Method
*
* -   The function computes the complete elliptic integral of the first kind in terms of parameter \\( m \\), instead of the elliptic modulus \\( k \\).
*
*     ```tex
*     K(m) = \int_0^{\pi/2} \frac{1}{\sqrt{1 - m sin^2\theta}} d\theta
*     ```
*
* -   The function uses a piecewise approximation polynomial as given in Fukushima (2009).
*
* -   For \\( m < 0 \\), the implementation follows Fukushima (2015). Namely, we use Equation 17.4.17 from the _Handbook of Mathematical Functions_ (Abramowitz and Stegun) to compute the function for \\( m < 0 \\) in terms of the piecewise polynomial representation of \\( m > 0 )).
*
*     ```tex
*     F(\phi|-m) = (1+m)^(-1/2) K(m/(1+m)) - (1+m)^(-1/2) F(\pi/2-\phi|m/(1+m))
*     ```
*
*     Since \\( K(m) \\) is equivalent to \\( F(\phi|m) \\), the above reduces to
*
*     ```tex
*     F(\phi|-m) = (1+m)^(-1/2) K(m/(1+m))
*     ```
*
* ## References
*
* -   Fukushima, Toshio. 2009. "Fast computation of complete elliptic integrals and Jacobian elliptic functions." _Celestial Mechanics and Dynamical Astronomy_ 105 (4): 305. doi:[10.1007/s10569-009-9228-z](https://doi.org/10.1007/s10569-009-9228-z).
* -   Fukushima, Toshio. 2015. "Precise and fast computation of complete elliptic integrals by piecewise minimax rational function approximation." _Journal of Computational and Applied Mathematics_ 282 (July): 71–76. doi:[10.1016/j.cam.2014.12.038](https://doi.org/10.1016/j.cam.2014.12.038).
*
* @param {number} m - input value
* @returns {number} evaluated elliptic integral
*
* @example
* var v = ellipk( 0.5 );
* // returns ~1.854
*
* v = ellipk( 2.0 );
* // returns NaN
*
* v = ellipk( -1.0 );
* // returns ~1.311
*
* v = ellipk( Infinity );
* // returns NaN
*
* v = ellipk( -Infinity );
* // returns NaN
*
* v = ellipk( NaN );
* // returns NaN
*/
function ellipk( m ) {
	var FLG;
	var kdm;
	var td;
	var qd;
	var t;
	var x;

	x = m;
	if ( m < 0.0 ) {
		x = m / ( m - 1.0 );
		FLG = true;
	}
	if ( x === 0.0 ) {
		return _$HALF_PI_62;
	}
	if ( x === 1.0 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x > 1.0 ) {
		return NaN;
	}
	if ( x < 0.1 ) {
		t = _$evalpoly_266( x - 0.05 );
	} else if ( x < 0.2 ) {
		t = _$evalpoly_270( x - 0.15 );
	} else if ( x < 0.3 ) {
		t = _$evalpoly_271( x - 0.25 );
	} else if ( x < 0.4 ) {
		t = _$evalpoly_272( x - 0.35 );
	} else if ( x < 0.5 ) {
		t = _$evalpoly_273( x - 0.45 );
	} else if ( x < 0.6 ) {
		t = _$evalpoly_274( x - 0.55 );
	} else if ( x < 0.7 ) {
		t = _$evalpoly_275( x - 0.65 );
	} else if ( x < 0.8 ) {
		t = _$evalpoly_276( x - 0.75 );
	} else if ( x < 0.85 ) {
		t = _$evalpoly_277( x - 0.825 );
	} else if ( x < 0.9 ) {
		t = _$evalpoly_267( x - 0.875 );
	} else {
		td = 1.0 - x;
		qd = _$evalpoly_268( td );
		kdm = _$evalpoly_269( td - 0.05 );
		t = -_$ln_545( qd ) * ( kdm * ONE_DIV_PI );
	}
	if ( FLG ) {
		// Complete the transformation mentioned above for m < 0:
		return t / _$sqrt_703( 1.0 - m );
	}
	return t;
}


// EXPORTS //

var _$ellipk_265 = ellipk;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the complete elliptic integral of the first kind.
*
* @module @stdlib/math/base/special/ellipk
*
* @example
* var ellipk = require( '@stdlib/math/base/special/ellipk' );
*
* var v = ellipk( 0.5 );
* // returns ~1.854
*
* v = ellipk( -1.0 );
* // returns ~1.311
*
* v = ellipk( 2.0 );
* // returns NaN
*
* v = ellipk( Infinity );
* // returns NaN
*
* v = ellipk( -Infinity );
* // returns NaN
*
* v = ellipk( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ellipk_265 = require( './main.js' ); */;


// EXPORTS //

var _$ellipk_264 = _$ellipk_265;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_252( x ) {
	if ( x === 0.0 ) {
		return 1.5509733517804722;
	}
	return 1.5509733517804722 + (x * (-0.4003010201031985 + (x * (-0.07849861944294194 + (x * (-0.034318853117591995 + (x * (-0.0197180433173655 + (x * (-0.01305950773199331 + (x * (-0.009442372874146548 + (x * (-0.007246728512402157 + (x * (-0.00580742401295609 + (x * -0.004809187786009338))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_252 = __evalpoly_252;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_256( x ) {
	if ( x === 0.0 ) {
		return 1.5101218320928198;
	}
	return 1.5101218320928198 + (x * (-0.41711633390586755 + (x * (-0.09012382040477457 + (x * (-0.04372994401908431 + (x * (-0.027965493064761784 + (x * (-0.020644781177568104 + (x * (-0.016650786739707237 + (x * (-0.01426196082884252 + (x * (-0.012759847429264804 + (x * (-0.011799303775587354 + (x * -0.011197445703074968))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_256 = __evalpoly_256;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_257( x ) {
	if ( x === 0.0 ) {
		return 1.4674622093394272;
	}
	return 1.4674622093394272 + (x * (-0.43657629094633776 + (x * (-0.10515555766694255 + (x * (-0.05737184359324173 + (x * (-0.04139162772734022 + (x * (-0.03452772850528084 + (x * (-0.031495443512532785 + (x * (-0.030527000890325277 + (x * (-0.0309169840192389 + (x * (-0.03237139531475812 + (x * -0.03478996038640416))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_257 = __evalpoly_257;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_258( x ) {
	if ( x === 0.0 ) {
		return 1.4226911334908792;
	}
	return 1.4226911334908792 + (x * (-0.4595135196210487 + (x * (-0.12525053982206188 + (x * (-0.07813854509440948 + (x * (-0.06471427847205 + (x * (-0.06208433913173031 + (x * (-0.06519703281557247 + (x * (-0.07279389536257878 + (x * (-0.084959075171781 + (x * (-0.102539850131046 + (x * (-0.12705358515769605 + (x * -0.1607911206912746))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_258 = __evalpoly_258;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_259( x ) {
	if ( x === 0.0 ) {
		return 1.3754019718711163;
	}
	return 1.3754019718711163 + (x * (-0.4872021832731848 + (x * (-0.15331170134854022 + (x * (-0.11184944491702783 + (x * (-0.10884095252313576 + (x * (-0.12295422312026907 + (x * (-0.15221716396203505 + (x * (-0.20049532364269734 + (x * (-0.27617433306775174 + (x * (-0.39351311430437586 + (x * (-0.5757544060278792 + (x * (-0.8605232357272398 + (x * -1.3088332057585401))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_259 = __evalpoly_259;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_260( x ) {
	if ( x === 0.0 ) {
		return 1.3250244979582302;
	}
	return 1.3250244979582302 + (x * (-0.5217276475575667 + (x * (-0.19490643048212622 + (x * (-0.17162372682201127 + (x * (-0.20275465292641914 + (x * (-0.27879895311853475 + (x * (-0.42069845728100574 + (x * (-0.675948400853106 + (x * (-1.1363431218392293 + (x * (-1.9767211439543984 + (x * (-3.5316967730957227 + (x * (-6.446753640156048 + (x * -11.97703130208884))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_260 = __evalpoly_260;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_261( x ) {
	if ( x === 0.0 ) {
		return 1.2707074796501499;
	}
	return 1.2707074796501499 + (x * (-0.5668391682878666 + (x * (-0.2621607934324926 + (x * (-0.2922441735330774 + (x * (-0.4403978408504232 + (x * (-0.7749476413813975 + (x * (-1.498870837987561 + (x * (-3.089708310445187 + (x * (-6.6675959033810015 + (x * (-14.89436036517319 + (x * (-34.18120574251449 + (x * (-80.15895841905397 + (x * (-191.34894807629848 + (x * (-463.5938853480342 + (x * -1137.38082216936))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_261 = __evalpoly_261;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_262( x ) {
	if ( x === 0.0 ) {
		return 1.2110560275684594;
	}
	return 1.2110560275684594 + (x * (-0.6303064132874558 + (x * (-0.38716640952066916 + (x * (-0.5922782353119346 + (x * (-1.23755558451305 + (x * (-3.0320566617452474 + (x * (-8.18168822157359 + (x * (-23.55507217389693 + (x * (-71.04099935893065 + (x * (-221.879685319235 + (x * (-712.1364793277636 + (x * (-2336.1253314403966 + (x * (-7801.945954775964 + (x * (-26448.19586059192 + (x * (-90799.48341621365 + (x * (-315126.04064491636 + (x * -1104011.3443115912))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_262 = __evalpoly_262;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_263( x ) {
	if ( x === 0.0 ) {
		return 1.1613071521962828;
	}
	return 1.1613071521962828 + (x * (-0.7011002845552895 + (x * (-0.5805514744654373 + (x * (-1.2436930610777865 + (x * (-3.679383613496635 + (x * (-12.815909243378957 + (x * (-49.25672530759985 + (x * (-202.18187354340904 + (x * (-869.8602699308701 + (x * (-3877.0058473132895 + (x * (-17761.7071017094 + (x * (-83182.69029154233 + (x * (-396650.4505013548 + (x * -1920033.4136826345))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_263 = __evalpoly_263;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_253( x ) {
	if ( x === 0.0 ) {
		return 1.1246173251197522;
	}
	return 1.1246173251197522 + (x * (-0.7708450563609095 + (x * (-0.8447940536449113 + (x * (-2.4900973094503946 + (x * (-10.239717411543843 + (x * (-49.7490054655148 + (x * (-267.09866751957054 + (x * (-1532.66588382523 + (x * (-9222.313478526092 + (x * (-57502.51612140314 + (x * (-368596.11674161063 + (x * (-2415611.0887010912 + (x * (-16120097.815816568 + (x * (-109209938.52030899 + (x * (-749380758.1942496 + (x * (-5198725846.725541 + (x * -36409256888.1214))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_253 = __evalpoly_253;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_255( x ) {
	if ( x === 0.0 ) {
		return 1.5509733517804722;
	}
	return 1.5509733517804722 + (x * (-0.4003010201031985 + (x * (-0.07849861944294194 + (x * (-0.034318853117591995 + (x * (-0.0197180433173655 + (x * (-0.01305950773199331 + (x * (-0.009442372874146548 + (x * (-0.007246728512402157 + (x * (-0.00580742401295609 + (x * -0.004809187786009338))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_255 = __evalpoly_255;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original Julia code and copyright notice are from the [Julia library]{@link https://github.com/JuliaMath/SpecialFunctions.jl/blob/master/src/ellip.jl}. The implementation has been modified for JavaScript.
*
* ```text
* The MIT License (MIT)
*
* Copyright (c) 2017 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and others:
*
* https://github.com/JuliaMath/SpecialFunctions.jl/graphs/contributors
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$ellipk_264 = require( '@stdlib/math/base/special/ellipk' ); */;
/* removed: var _$evalpoly_252 = require( './poly_p1.js' ); */;
/* removed: var _$evalpoly_256 = require( './poly_p2.js' ); */;
/* removed: var _$evalpoly_257 = require( './poly_p3.js' ); */;
/* removed: var _$evalpoly_258 = require( './poly_p4.js' ); */;
/* removed: var _$evalpoly_259 = require( './poly_p5.js' ); */;
/* removed: var _$evalpoly_260 = require( './poly_p6.js' ); */;
/* removed: var _$evalpoly_261 = require( './poly_p7.js' ); */;
/* removed: var _$evalpoly_262 = require( './poly_p8.js' ); */;
/* removed: var _$evalpoly_263 = require( './poly_p9.js' ); */;
/* removed: var _$evalpoly_253 = require( './poly_p10.js' ); */;
/* removed: var _$evalpoly_254 = require( './poly_p11.js' ); */;
/* removed: var _$evalpoly_255 = require( './poly_p12.js' ); */;


// MAIN //

/**
* Computes the complete elliptic integral of the second kind.
*
* ## Method
*
* -   The function computes the complete elliptic integral of the second kind in terms of parameter \\( m \\), instead of the elliptic modulus \\( k \\).
*
*     ```tex
*     E(m) = \int_0^{\pi/2} \sqrt{1 - m (\sin\theta)^2} d\theta
*     ```
*
* -   The function uses a piecewise approximation polynomial as given in Fukushima (2009).
*
* -   For \\( m < 0 \\), the implementation follows Fukushima (2015).
*
* ## References
*
* -   Fukushima, Toshio. 2009. "Fast computation of complete elliptic integrals and Jacobian elliptic functions." _Celestial Mechanics and Dynamical Astronomy_ 105 (4): 305. doi:[10.1007/s10569-009-9228-z](https://doi.org/10.1007/s10569-009-9228-z).
* -   Fukushima, Toshio. 2015. "Precise and fast computation of complete elliptic integrals by piecewise minimax rational function approximation." _Journal of Computational and Applied Mathematics_ 282 (July): 71–76. doi:[10.1016/j.cam.2014.12.038](https://doi.org/10.1016/j.cam.2014.12.038).
*
* @param {number} m - input value
* @returns {number} evaluated elliptic integral
*
* @example
* var v = ellipe( 0.5 );
* // returns ~1.351
*
* v = ellipe( -1.0 );
* // returns ~1.910
*
* v = ellipe( 2.0 );
* // returns NaN
*
* v = ellipe( Infinity );
* // returns NaN
*
* v = ellipe( -Infinity );
* // returns NaN
*
* v = ellipe( NaN );
* // returns NaN
*/
function ellipe( m ) {
	var FLG;
	var kdm;
	var edm;
	var td;
	var km;
	var t;
	var x;

	x = m;
	if ( m < 0.0 ) {
		x = m / ( m - 1.0 );
		FLG = true;
	}
	if ( x === 0.0 ) {
		return _$HALF_PI_62;
	}
	if ( x === 1.0 ) {
		return 1.0;
	}
	if ( x > 1.0 ) {
		return NaN;
	}
	if ( x < 0.1 ) {
		t = _$evalpoly_252( x - 0.05 );
	} else if ( x < 0.2 ) {
		t = _$evalpoly_256( x - 0.15 );
	} else if ( x < 0.3 ) {
		t = _$evalpoly_257( x - 0.25 );
	} else if ( x < 0.4 ) {
		t = _$evalpoly_258( x - 0.35 );
	} else if ( x < 0.5 ) {
		t = _$evalpoly_259( x - 0.45 );
	} else if ( x < 0.6 ) {
		t = _$evalpoly_260( x - 0.55 );
	} else if ( x < 0.7 ) {
		t = _$evalpoly_261( x - 0.65 );
	} else if ( x < 0.8 ) {
		t = _$evalpoly_262( x - 0.75 );
	} else if ( x < 0.85 ) {
		t = _$evalpoly_263( x - 0.825 );
	} else if ( x < 0.9 ) {
		t = _$evalpoly_253( x - 0.875 );
	} else {
		td = 0.95 - x;
		kdm = _$evalpoly_254(td);
		edm = _$evalpoly_255(td);
		km = _$ellipk_264( x );

		// To avoid precision loss near 1, we use Eq. 33 from Fukushima (2009):
		t = ( _$HALF_PI_62 + ( km * (kdm - edm) ) ) / kdm;
	}
	if ( FLG ) {
		// Complete the transformation mentioned above for m < 0:
		return t * _$sqrt_703( 1.0 - m );
	}
	return t;
}


// EXPORTS //

var _$ellipe_251 = ellipe;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the complete elliptic integral of the second kind.
*
* @module @stdlib/math/base/special/ellipe
*
* @example
* var ellipe = require( '@stdlib/math/base/special/ellipe' );
*
* var v = ellipe( 0.5 );
* // returns ~1.351
*
* v = ellipe( -1.0 );
* // returns ~1.910
*
* v = ellipe( 2.0 );
* // returns NaN
*
* v = ellipe( Infinity );
* // returns NaN
*
* v = ellipe( -Infinity );
* // returns NaN
*
* v = ellipe( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ellipe_251 = require( './main.js' ); */;


// EXPORTS //

var _$ellipe_250 = _$ellipe_251;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$setLowWord_773 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_281 = require( './polyval_pp.js' ); */;
/* removed: var _$evalpoly_283 = require( './polyval_qq.js' ); */;
/* removed: var _$evalpoly_280 = require( './polyval_pa.js' ); */;
/* removed: var _$evalpoly_282 = require( './polyval_qa.js' ); */;
/* removed: var _$evalpoly_284 = require( './polyval_ra.js' ); */;
/* removed: var _$evalpoly_286 = require( './polyval_sa.js' ); */;
/* removed: var _$evalpoly_285 = require( './polyval_rb.js' ); */;
/* removed: var _$evalpoly_287 = require( './polyval_sb.js' ); */;


// VARIABLES //

var __TINY_278 = 1.0e-300;
var VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000

// 2**-28 = 1/(1<<28) = 1/268435456
var __SMALL_278 = 3.725290298461914e-9;

var __ERX_278 = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69
var EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69

var __PPC_278 = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var __QQC_278 = 1.0;

var __PAC_278 = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var __QAC_278 = 1.0;

var __RAC_278 = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var __SAC_278 = 1.0;

var __RBC_278 = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var __SBC_278 = 1.0;


// MAIN //

/**
* Evaluates the error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erf( 2.0 );
* // returns ~0.9953
*
* @example
* var y = erf( -1.0 );
* // returns ~-0.8427
*
* @example
* var y = erf( -0.0 );
* // returns -0.0
*
* @example
* var y = erf( NaN );
* // returns NaN
*/
function erf( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === _$FLOAT64_PINF_85 ) {
		return 1.0;
	}
	// Special case: -infinity
	if ( x === _$FLOAT64_NINF_81 ) {
		return -1.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < __SMALL_278 ) {
			if ( ax < VERY_TINY ) {
				// Avoid underflow:
				return 0.125 * ( (8.0*x) + (EFX8*x) );
			}
			return x + (EFX*x);
		}
		z = x * x;
		r = __PPC_278 + ( z*_$evalpoly_281( z ) );
		s = __QQC_278 + ( z*_$evalpoly_283( z ) );
		y = r / s;
		return x + (x*y);
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = __PAC_278 + ( s*_$evalpoly_280( s ) );
		q = __QAC_278 + ( s*_$evalpoly_282( s ) );
		if ( sign ) {
			return -__ERX_278 - (p/q);
		}
		return __ERX_278 + (p/q);
	}
	// +inf > |x| >= 6
	if ( ax >= 6.0 ) {
		if ( sign ) {
			return __TINY_278 - 1.0; // raise inexact
		}
		return 1.0 - __TINY_278; // raise inexact
	}
	s = 1.0 / (ax*ax);

	// |x| < 1/0.35 ~ 2.857143
	if ( ax < 2.857142857142857 ) {
		r = __RAC_278 + ( s*_$evalpoly_284( s ) );
		s = __SAC_278 + ( s*_$evalpoly_286( s ) );
	}
	// |x| >= 1/0.35 ~ 2.857143
	else {
		r = __RBC_278 + ( s*_$evalpoly_285( s ) );
		s = __SBC_278 + ( s*_$evalpoly_287( s ) );
	}
	z = _$setLowWord_773( ax, 0 ); // pseudo-single (20-bit) precision x
	r = _$exp_314( -(z*z) - 0.5625 ) * _$exp_314( ( (z-ax) * (z+ax) ) + (r/s) );
	if ( sign ) {
		return (r/ax) - 1.0;
	}
	return 1.0 - (r/ax);
}


// EXPORTS //

var _$erf_278 = erf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the error function.
*
* @module @stdlib/math/base/special/erf
*
* @example
* var erf = require( '@stdlib/math/base/special/erf' );
*
* var y = erf( 2.0 );
* // returns ~0.9953
*
* y = erf( -1.0 );
* // returns ~-0.8427
*
* y = erf( -0.0 );
* // returns -0.0
*
* y = erf( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erf_278 = require( './erf.js' ); */;


// EXPORTS //

var _$erf_279 = _$erf_278;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_307( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_307 = __evalrational_307;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_308( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_308 = __evalrational_308;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_309( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_309 = __evalrational_309;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_310( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_310 = __evalrational_310;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_311( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_311 = __evalrational_311;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalrational_307 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_308 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_309 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_310 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_311 = require( './rational_p5q5.js' ); */;


// VARIABLES //

var __Y1_305 = 8.91314744949340820313e-2;
var __Y2_305 = 2.249481201171875;
var __Y3_305 = 8.07220458984375e-1;
var __Y4_305 = 9.3995571136474609375e-1;
var __Y5_305 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse error function.
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfinv( 0.8 );
* // returns ~0.9062
*
* @example
* var y = erfinv( 0.0 );
* // returns 0.0
*
* @example
* var y = erfinv( -0.0 );
* // returns -0.0
*
* @example
* var y = erfinv( -1.0 );
* // returns -Infinity
*
* @example
* var y = erfinv( 1.0 );
* // returns Infinity
*
* @example
* var y = erfinv( NaN );
* // returns NaN
*/
function erfinv( x ) {
	var sign;
	var ax;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return _$FLOAT64_PINF_85;
	}
	// Special case: -1
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_81;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	// Special case: |x| > 1 (range error)
	if ( x > 1.0 || x < -1.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.
	if ( x < 0.0 ) {
		sign = -1.0;
		ax = -x;
	} else {
		sign = 1.0;
		ax = x;
	}
	q = 1.0 - ax;

	// |x| <= 0.5
	if ( ax <= 0.5 ) {
		g = ax * ( ax + 10.0 );
		r = _$evalrational_307( ax );
		return sign * ( (g*__Y1_305) + (g*r) );
	}
	// 1-|x| >= 0.25
	if ( q >= 0.25 ) {
		g = _$sqrt_703( -2.0 * _$ln_545(q) );
		q -= 0.25;
		r = _$evalrational_308( q );
		return sign * ( g / (__Y2_305+r) );
	}
	q = _$sqrt_703( -_$ln_545( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = _$evalrational_309( qs );
		return sign * ( (__Y3_305*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = _$evalrational_310( qs );
		return sign * ( (__Y4_305*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = _$evalrational_311( qs );
	return sign * ( (__Y5_305*q) + (r*q) );
}


// EXPORTS //

var _$erfinv_305 = erfinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse error function.
*
* @module @stdlib/math/base/special/erfinv
*
* @example
* var erfinv = require( '@stdlib/math/base/special/erfinv' );
*
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* y = erfinv( 0.8 );
* // returns ~0.9062
*
* y = erfinv( 0.0 );
* // returns 0.0
*
* y = erfinv( -0.0 );
* // returns -0.0
*
* y = erfinv( -1.0 );
* // returns -Infinity
*
* y = erfinv( 1.0 );
* // returns Infinity
*
* y = erfinv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfinv_305 = require( './erfinv.js' ); */;


// EXPORTS //

var _$erfinv_306 = _$erfinv_305;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_318( x ) {
	if ( x === 0.0 ) {
		return 2394.2374120738828;
	}
	return 2394.2374120738828 + (x * (406.7172899368727 + (x * (11.745273255434405 + (x * 0.040996251979858706))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_318 = __evalpoly_318;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_319( x ) {
	if ( x === 0.0 ) {
		return 2079.608192860019;
	}
	return 2079.608192860019 + (x * (1272.0927117834513 + (x * (85.09361608493066 + (x * 1.0))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_319 = __evalpoly_319;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1991, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_77 = require( '@stdlib/constants/math/float64-min-base10-exponent' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalpoly_318 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_319 = require( './polyval_q.js' ); */;


// VARIABLES //

var LOG210 = 3.32192809488736234787e0;
var LG102A = 3.01025390625000000000e-1;
var LG102B = 4.60503898119521373889e-6;


// MAIN //

/**
* Returns `10` raised to the `x` power.
*
* ## Method
*
* -   Range reduction is accomplished by expressing the argument as \\( 10^x = 2^n 10^f \\), with \\( |f| < 0.5 log_{10}(2) \\). The Pade' form
*
*     ```tex
*     1 + 2x \frac{P(x^2)}{Q(x^2) - P(x^2)}
*     ```
*
*     is used to approximate \\( 10^f \\).
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain      | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | -307,+307   |  30000   | 2.2e-16 | 5.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp10( 3.0 );
* // returns 1000.0
*
* @example
* var v = exp10( -9.0 );
* // returns 1.0e-9
*
* @example
* var v = exp10( 0.0 );
* // returns 1.0
*
* @example
* var v = exp10( NaN );
* // returns NaN
*/
function exp10( x ) {
	var px;
	var xx;
	var n;

	if ( _$isnan_103( x ) ) {
		return x;
	}
	if ( x > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x < _$FLOAT64_MIN_BASE10_EXPONENT_77 ) {
		return 0.0;
	}

	// Express 10^x = 10^g 2^n = 10^g 10^( n log10(2) ) = 10^( g + n log10(2) )
	px = _$floor_346( (LOG210*x) + 0.5 );
	n = px;
	x -= px * LG102A;
	x -= px * LG102B;

	// Rational approximation for exponential of the fractional part: 10^x = 1 + 2x P(x^2)/( Q(x^2) - P(x^2) )
	xx = x * x;
	px = x * _$evalpoly_318( xx );
	x = px / ( _$evalpoly_319( xx ) - px );
	x = 1.0 + _$ldexp_543( x, 1 );

	// Multiply by power of 2:
	return _$ldexp_543( x, n );
}


// EXPORTS //

var _$exp10_316 = exp10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the base `10` exponential function.
*
* @module @stdlib/math/base/special/exp10
*
* @example
* var exp10 = require( '@stdlib/math/base/special/exp10' );
*
* var v = exp10( 3.0 );
* // returns 1000.0
*
* v = exp10( -9.0 );
* // returns 1.0e-9
*
* v = exp10( 0.0 );
* // returns 1.0
*
* v = exp10( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$exp10_316 = require( './exp10.js' ); */;


// EXPORTS //

var _$exp10_317 = _$exp10_316;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-min-base2-exponent' );
* // returns -1022
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a normal double-precision floating-point number.
*
* ```text
* 1 - BIAS = -1022
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1022
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT = -1022|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE2_EXPONENT_79 = FLOAT64_MIN_BASE2_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_322( x ) {
	if ( x === 0.0 ) {
		return 1513.906801156151;
	}
	return 1513.906801156151 + (x * (20.202065669316532 + (x * 0.023093347705734523))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_322 = __evalpoly_322;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_323( x ) {
	if ( x === 0.0 ) {
		return 4368.211668792106;
	}
	return 4368.211668792106 + (x * (233.1842117223149 + (x * 1.0)));
}


// EXPORTS //

var _$evalpoly_323 = __evalpoly_323;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// TODO: replace with TOMS (Openlibm) algo (updating license header and long comment)

// MODULES //

/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_70 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */; // eslint-disable-line id-length
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_79 = require( '@stdlib/constants/math/float64-min-base2-exponent' ); */; // eslint-disable-line id-length
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalpoly_322 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_323 = require( './polyval_q.js' ); */;


// MAIN //

/**
* Evaluates the base `2` exponential function.
*
* ## Method
*
* -   Range reduction is accomplished by separating the argument into an integer \\( k \\) and fraction \\( f \\) such that
*
*     ```tex
*     2^x = 2^k 2^f
*     ```
*
* -   A Pade' approximate
*
*     ```tex
*     1 + 2x \frac{\mathrm{P}\left(x^2\right)}{\mathrm{Q}\left(x^2\right) - x \mathrm{P}\left(x^2\right)}
*     ```
*
*     approximates \\( 2^x \\) in the basic range \\( \[-0.5, 0.5] \\).
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain      | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | -1022,+1024 | 30000    | 1.8e-16 | 5.4e-17 |
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp2( 3.0 );
* // returns 8.0
*
* @example
* var v = exp2( -9.0 );
* // returns ~0.002
*
* @example
* var v = exp2( 0.0 );
* // returns 1.0
*
* @example
* var v = exp2( NaN );
* // returns NaN
*/
function exp2( x ) {
	var px;
	var xx;
	var n;
	if ( _$isnan_103( x ) ) {
		return x;
	}
	if ( x > _$FLOAT64_MAX_BASE2_EXPONENT_70 ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x < _$FLOAT64_MIN_BASE2_EXPONENT_79 ) {
		return 0.0;
	}
	// Separate into integer and fractional parts...
	n = _$round_652( x );
	x -= n;

	xx = x * x;
	px = x * _$evalpoly_322( xx );
	x = px / ( _$evalpoly_323( xx ) - px );
	x = 1.0 + _$ldexp_543( x, 1 );

	// Scale by power of 2:
	return _$ldexp_543( x, n );
}


// EXPORTS //

var _$exp2_320 = exp2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the base `2` exponential function.
*
* @module @stdlib/math/base/special/exp2
*
* @example
* var exp2 = require( '@stdlib/math/base/special/exp2' );
*
* var v = exp2( 3.0 );
* // returns 8.0
*
* v = exp2( -9.0 );
* // returns ~0.002
*
* v = exp2( 0.0 );
* // returns 1.0
*
* v = exp2( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$exp2_320 = require( './exp2.js' ); */;


// EXPORTS //

var _$exp2_321 = _$exp2_320;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the standard logistic function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = expit( 0.0 );
* // returns 0.5
*
* @example
* var y = expit( 1.0 );
* // returns ~0.731
*
* @example
* var y = expit( -1.0 );
* // returns ~0.269
*
* @example
* var y = expit( Infinity );
* // returns 1.0
*
* @example
* var y = expit( NaN );
* // returns NaN
*/
function expit( x ) {
	if ( _$isnan_103( x ) ) {
		return x;
	}
	return 1.0 / ( 1.0 + _$exp_314( -x ) );
}


// EXPORTS //

var _$expit_325 = expit;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the standard logistic function.
*
* @module @stdlib/math/base/special/expit
*
* @example
* var expit = require( '@stdlib/math/base/special/expit' );
*
* var y = expit( 0.0 );
* // returns 0.5
*
* y = expit( 1.0 );
* // returns ~0.731
*
* y = expit( -1.0 );
* // returns ~0.269
*
* y = expit( Infinity );
* // returns 1.0
*
* y = expit( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$expit_325 = require( './main.js' ); */;


// EXPORTS //

var _$expit_324 = _$expit_325;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

var __OVERFLOW_THRESHOLD_330 = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF


// MAIN //

/**
* Computes the relative error exponential.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1rel( 0.0 );
* // returns 1.0
*
* @example
* var v = expm1rel( 1.0 );
* // returns ~1.718
*
* @example
* var v = expm1rel( -1.0 );
* // returns ~0.632
*
* @example
* var v = expm1rel( NaN );
* // returns NaN
*/
function expm1rel( x ) {
	if ( _$abs_118( x ) <= _$FLOAT64_EPSILON_56 ) {
		return 1.0; // L'Hopital's Rule
	}
	if ( x >= __OVERFLOW_THRESHOLD_330 ) {
		return _$FLOAT64_PINF_85; // L'Hopital's Rule
	}
	return _$expm1_327( x ) / x;
}


// EXPORTS //

var _$expm1rel_330 = expm1rel;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Relative error exponential function.
*
* @module @stdlib/math/base/special/expm1rel
*
* @example
* var expm1rel = require( '@stdlib/math/base/special/expm1rel' );
*
* var v = expm1rel( 0.0 );
* // returns 1.0
*
* v = expm1rel( 1.0 );
* // returns ~1.718
*
* v = expm1rel( -1.0 );
* // returns ~0.632
*
* v = expm1rel( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$expm1rel_330 = require( './main.js' ); */;


// EXPORTS //

var _$expm1rel_329 = _$expm1rel_330;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a negative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a negative integer
*
* @example
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* @example
* var bool = isNegativeInteger( 0.0 );
* // returns false
*
* @example
* var bool = isNegativeInteger( 10.0 );
* // returns false
*/
function isNegativeInteger( x ) {
	return (_$floor_346(x) === x && x < 0.0);
}


// EXPORTS //

var _$isNegativeInteger_106 = isNegativeInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a negative integer.
*
* @module @stdlib/math/base/assert/is-negative-integer
*
* @example
* var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
*
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* bool = isNegativeInteger( 0.0 );
* // returns false
*
* bool = isNegativeInteger( 10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNegativeInteger_106 = require( './is_negative_integer.js' ); */;


// EXPORTS //

var _$isNegativeInteger_105 = _$isNegativeInteger_106;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeInteger_105 = require( '@stdlib/math/base/assert/is-negative-integer' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} natural logarithm of factorial of `x`
*
* @example
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* @example
* var v = factorialln( 2.4 );
* // returns ~1.092
*
* @example
* var v = factorialln( -1.0 );
* // returns NaN
*
* @example
* var v = factorialln( -1.5 );
* // returns ~1.266
*
* @example
* var v = factorialln( NaN );
* // returns NaN
*/
function factorialln( x ) {
	if ( _$isNegativeInteger_105( x ) ) {
		return NaN;
	}
	return _$gammaln_445( x + 1.0 );
}


// EXPORTS //

var _$factorialln_334 = factorialln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the factorial function.
*
* @module @stdlib/math/base/special/factorialln
*
* @example
* var factorialln = require( '@stdlib/math/base/special/factorialln' );
*
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* v = factorialln( 2.4 );
* // returns ~1.092
*
* v = factorialln( -1.0 );
* // returns NaN
*
* v = factorialln( -1.5 );
* // returns ~1.266
*
* v = factorialln( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$factorialln_334 = require( './factorialln.js' ); */;


// EXPORTS //

var _$factorialln_335 = _$factorialln_334;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum safe nth Fibonacci number when stored in double-precision floating-point format.
*
* @module @stdlib/constants/math/float64-max-safe-nth-fibonacci
* @type {integer}
*
* @example
* var FLOAT64_MAX_SAFE_NTH_FIBONACCI = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' );
* // returns 78
*/


// MAIN //

/**
* The maximum safe nth Fibonacci number when stored in double-precision floating-point format.
*
* @constant
* @type {integer}
* @default 78
* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_NTH_FIBONACCI = 78|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_SAFE_NTH_FIBONACCI_73 = FLOAT64_MAX_SAFE_NTH_FIBONACCI;

var _$fibonacci_340=[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_NTH_FIBONACCI_73 = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' ); */;
/* removed: var _$fibonacci_340 = require( './fibonacci.json' ); */;


// MAIN //

/**
* Computes the nth Fibonacci number.
*
* @param {NonNegativeInteger} n - the Fibonacci number to compute
* @returns {NonNegativeInteger} Fibonacci number
*
* @example
* var y = fibonacci( 0 );
* // returns 0
*
* @example
* var y = fibonacci( 1 );
* // returns 1
*
* @example
* var y = fibonacci( 2 );
* // returns 1
*
* @example
* var y = fibonacci( 3 );
* // returns 2
*
* @example
* var y = fibonacci( 4 );
* // returns 3
*
* @example
* var y = fibonacci( 5 );
* // returns 5
*
* @example
* var y = fibonacci( 6 );
* // returns 8
*
* @example
* var y = fibonacci( NaN );
* // returns NaN
*
* @example
* var y = fibonacci( 3.14 );
* // returns NaN
*
* @example
* var y = fibonacci( -1.0 );
* // returns NaN
*/
function fibonacci( n ) {
	if (
		_$isnan_103( n ) ||
		_$isInteger_101( n ) === false ||
		n < 0 ||
		n > _$FLOAT64_MAX_SAFE_NTH_FIBONACCI_73
	) {
		return NaN;
	}
	return _$fibonacci_340[ n ];
}


// EXPORTS //

var _$fibonacci_341 = fibonacci;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth Fibonacci number.
*
* @module @stdlib/math/base/special/fibonacci
*
* @example
* var fibonacci = require( '@stdlib/math/base/special/fibonacci' );
*
* var y = fibonacci( 0 );
* // returns 0
*
* y = fibonacci( 1 );
* // returns 1
*
* y = fibonacci( 2 );
* // returns 1
*
* y = fibonacci( 3 );
* // returns 2
*
* y = fibonacci( 4 );
* // returns 3
*
* y = fibonacci( 5 );
* // returns 5
*
* y = fibonacci( 6 );
* // returns 8
*/

// MODULES //

/* removed: var _$fibonacci_341 = require( './fibonacci.js' ); */;


// EXPORTS //

var _$fibonacci_342 = _$fibonacci_341;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$PHI_82 = require( '@stdlib/constants/math/float64-phi' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

var __SQRT_5_339 = 2.23606797749979;
var LN_PHI = _$ln_545( _$PHI_82 );


// MAIN //

/**
* Computes the Fibonacci number index.
*
* ## Notes
*
* -   We use `round` instead of `floor` due to errors introduced by floating-point precision.
*
*
* @param {NonNegativeInteger} F - Fibonacci number
* @returns {NonNegativeInteger} Fibonacci number index
*
* @example
* var n = fibonacciIndex( 0 );
* // returns NaN
*
* @example
* var n = fibonacciIndex( 1 );
* // returns NaN
*
* @example
* var n = fibonacciIndex( 2 );
* // returns 3
*
* @example
* var n = fibonacciIndex( 3 );
* // returns 4
*
* @example
* var n = fibonacciIndex( 5 );
* // returns 5
*
* @example
* var n = fibonacciIndex( 8 );
* // returns 6
*
* @example
* var n = fibonacciIndex( NaN );
* // returns NaN
*
* @example
* var n = fibonacciIndex( 3.14 );
* // returns NaN
*
* @example
* var n = fibonacciIndex( -1 );
* // returns NaN
*/
function fibonacciIndex( F ) {
	var x;
	if (
		_$isnan_103( F ) ||
		_$isInteger_101( F ) === false ||
		F <= 1 ||
		F === _$FLOAT64_PINF_85
	) {
		return NaN;
	}
	x = ( F*__SQRT_5_339 ) + 0.5;
	return _$round_652( _$ln_545( x ) / LN_PHI );
}


// EXPORTS //

var _$fibonacciIndex_339 = fibonacciIndex;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Fibonacci number index.
*
* @module @stdlib/math/base/special/fibonacci-index
*
* @example
* var fibonacciIndex = require( '@stdlib/math/base/special/fibonacci-index' );
*
* var n = fibonacciIndex( 0 );
* // returns NaN
*
* n = fibonacciIndex( 1 );
* // returns NaN
*
* n = fibonacciIndex( 2 );
* // returns 3
*
* n = fibonacciIndex( 3 );
* // returns 4
*
* n = fibonacciIndex( 5 );
* // returns 5
*
* n = fibonacciIndex( 8 );
* // returns 6
*/

// MODULES //

/* removed: var _$fibonacciIndex_339 = require( './main.js' ); */;


// EXPORTS //

var _$fibonacciIndex_338 = _$fibonacciIndex_339;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$getHighWord_762 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var __SIGN_MASK_343 = 0x80000000>>>0; // asm type annotation

// High/low words workspace:
var __WORDS_343 = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = flipsign( -3.14, 10.0 );
* // returns -3.14
*
* @example
* var z = flipsign( -3.14, -1.0 );
* // returns 3.14
*
* @example
* var z = flipsign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = flipsign( -3.14, -0.0 );
* // returns 3.14
*
* @example
* var z = flipsign( -0.0, 1.0 );
* // returns -0.0
*
* @example
* var z = flipsign( 0.0, -1.0 );
* // returns -0.0
*/
function flipsign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	_$toWords_778( __WORDS_343, x );
	hx = __WORDS_343[ 0 ];

	// Extract the higher order word from `y`:
	hy = _$getHighWord_762( y );

	// Leave only the sign bit of `y` turned on (if on):
	hy &= __SIGN_MASK_343;

	// Flip the sign bit of `x` only when the sign bit of `y` is on:
	hx ^= hy; // 1^1=0 (flipped), 0^1=1 (flipped), 1^0=1 (unchanged), 0^0=0 (unchanged)

	// Return a new value having the same magnitude as `x`, but with the sign of `x*y`:
	return _$fromWords_758( hx, __WORDS_343[ 1 ] );
}


// EXPORTS //

var _$flipsign_343 = flipsign;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.
*
* @module @stdlib/math/base/special/flipsign
*
* @example
* var flipsign = require( '@stdlib/math/base/special/flipsign' );
*
* var z = flipsign( -3.14, 10.0 );
* // returns -3.14
*
* z = flipsign( -3.14, -1.0 );
* // returns 3.14
*
* z = flipsign( 1.0, -0.0 );
* // returns -1.0
*
* z = flipsign( -3.14, -0.0 );
* // returns 3.14
*
* z = flipsign( -0.0, 1.0 );
* // returns -0.0
*
* z = flipsign( 0.0, -1.0 );
* // returns -0.0
*/

// MODULES //

/* removed: var _$flipsign_343 = require( './flipsign.js' ); */;


// EXPORTS //

var _$flipsign_344 = _$flipsign_343;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor10( 3.141592653589793 );
* // returns 1.0
*
* @example
* var v = floor10( 9.0 );
* // returns 1.0
*
* @example
* var v = floor10( -0.314 );
* // returns -1.0
*/
function floor10( x ) {
	var sign;
	var p;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = _$log10_551( x );

	// Determine a power of 10 which rounds the input value toward negative infinity:
	if ( sign === 1.0 ) {
		p = _$floor_346( p );
	} else {
		p = _$ceil_210( p );
	}
	// Handle underflow:
	if ( p <= _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ) {
		return sign * 0.0; // sign-preserving
	}
	// Handle overflow:
	if ( p > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		return _$FLOAT64_NINF_81;
	}
	return sign * _$pow_618( 10.0, p );
}


// EXPORTS //

var _$floor10_347 = floor10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of `10` toward negative infinity.
*
* @module @stdlib/math/base/special/floor10
*
* @example
* var floor10 = require( '@stdlib/math/base/special/floor10' );
*
* var v = floor10( 3.141592653589793 );
* // returns 1.0
*
* v = floor10( 9.0 );
* // returns 1.0
*
* v = floor10( -0.314 );
* // returns -1.0
*/

// MODULES //

/* removed: var _$floor10_347 = require( './floor10.js' ); */;


// EXPORTS //

var _$floor10_348 = _$floor10_347;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log2_563 = require( '@stdlib/math/base/special/log2' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_70 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of two toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor2( 3.141592653589793 );
* // returns 2.0
*
* @example
* var v = floor2( 13.0 );
* // returns 8.0
*
* @example
* var v = floor2( -0.314 );
* // returns -0.5
*/
function floor2( x ) {
	var sign;
	var p;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `2^p = x` for `p`:
	p = _$log2_563( x );

	// If provided the smallest subnormal, no rounding possible:
	if ( p === _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 ) {
		return x;
	}
	// Determine a power of two which rounds the input value toward negative infinity:
	if ( sign === 1.0 ) {
		p = _$floor_346( p );
	} else {
		p = _$ceil_210( p );
	}
	// Handle overflow:
	if ( p > _$FLOAT64_MAX_BASE2_EXPONENT_70 ) {
		return _$FLOAT64_NINF_81;
	}
	return sign * _$pow_618( 2.0, p );
}


// EXPORTS //

var _$floor2_349 = floor2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of two toward negative infinity.
*
* @module @stdlib/math/base/special/floor2
*
* @example
* var floor2 = require( '@stdlib/math/base/special/floor2' );
*
* var v = floor2( 3.141592653589793 );
* // returns 2.0
*
* v = floor2( 13.0 );
* // returns 8.0
*
* v = floor2( -0.314 );
* // returns -0.5
*/

// MODULES //

/* removed: var _$floor2_349 = require( './floor2.js' ); */;


// EXPORTS //

var _$floor2_350 = _$floor2_349;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_72 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_77 = require( '@stdlib/constants/math/float64-min-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// VARIABLES //

var __MAX_INT_353 = _$FLOAT64_MAX_SAFE_INTEGER_72 + 1;
var __HUGE_353 = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\) toward negative infinity.
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{floorn}(x,n) = \frac{\operatorname{floor}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{floor}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{floorn}(-0.2-0.1,-16)\\) is \\(-0.3000000000000001\\) and not \\(-0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{floor}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible negative finite number \\(x\\) to the nearest \\(10^n\\) is \\(-\infty\\) and any possible positive finite number \\(x\\) is \\(+0\\). To ensure consistent behavior with \\(\operatorname{floor}(x)\\), if \\(x > 0\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{floorn}(x,n) = \frac{\biggl(\frac{\operatorname{floor}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{floorn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{floorn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{floorn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{floorn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{floorn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @param {integer} n - integer power of 10
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = floorn( 3.141592653589793, -4 );
* // returns 3.1415
*
* @example
* // If n = 0, `floorn` behaves like `floor`:
* var v = floorn( 3.141592653589793, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = floorn( 12368.0, 3 );
* // returns 12000.0
*/
function floorn( x, n ) {
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		_$isInfinite_99( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...
		n < _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ||

		// If `|x|` is large enough, no decimals to round...
		( _$abs_118( x ) > __MAX_INT_353 && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is infinity and any negative finite `x` is zero.
	if ( n > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		if ( x >= 0.0 ) {
			return 0.0; // preserve the sign (same behavior as floor)
		}
		return _$FLOAT64_NINF_81;
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < _$FLOAT64_MIN_BASE10_EXPONENT_77 ) {
		s = _$pow_618( 10.0, -(n + _$FLOAT64_MAX_BASE10_EXPONENT_68) );
		y = (x*__HUGE_353) * s; // order of operation matters!
		if ( _$isInfinite_99( y ) ) {
			return x;
		}
		return ( _$floor_346(y)/__HUGE_353 ) / s;
	}
	s = _$pow_618( 10.0, -n );
	y = x * s;
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return _$floor_346( y ) / s;
}


// EXPORTS //

var _$floorn_353 = floorn;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n` toward negative infinity.
*
* @module @stdlib/math/base/special/floorn
*
* @example
* var floorn = require( '@stdlib/math/base/special/floorn' );
*
* // Round a value to 4 decimal places:
* var v = floorn( 3.141592653589793, -4 );
* // returns 3.1415
*
* // If n = 0, `floorn` behaves like `floor`:
* v = floorn( 3.141592653589793, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = floorn( 12368.0, 3 );
* // returns 12000.0
*/

// MODULES //

/* removed: var _$floorn_353 = require( './floorn.js' ); */;


// EXPORTS //

var _$floorn_354 = _$floorn_353;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$floorn_354 = require( '@stdlib/math/base/special/floorn' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) toward negative infinity.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = floorb( 3.141592653589793, -4, 10 );
* // returns 3.1415
*
* @example
* // If n = 0 or b = 1, `floorb` behaves like `floor`:
* var v = floorb( 3.141592653589793, 0, 2 );
* // returns 3.0
*
* @example
* // Round a value to the nearest multiple of two toward negative infinity:
* var v = floorb( 5.0, 1, 2 );
* // returns 4.0
*/
function floorb( x, n, b ) {
	var y;
	var s;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isnan_103( b ) ||
		b <= 0 ||
		_$isInfinite_99( n ) ||
		_$isInfinite_99( b )
	) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return _$floorn_354( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return _$floor_346( x );
	}
	s = _$pow_618( b, -n );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	y = _$floor_346( x * s ) / s;

	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$floorb_351 = floorb;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n` toward negative infinity.
*
* @module @stdlib/math/base/special/floorb
*
* @example
* var floorb = require( '@stdlib/math/base/special/floorb' );
*
* // Round a value to 4 decimal places:
* var v = floorb( 3.141592653589793, -4, 10 );
* // returns 3.1415
*
* // If n = 0 or b = 1, behavior is same as `floor`:
* v = floorb( 3.141592653589793, 0, 2 );
* // returns 3.0
*
* // Round a value to the nearest multiple of two toward negative infinity:
* v = floorb( 5.0, 1, 2 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$floorb_351 = require( './floorb.js' ); */;


// EXPORTS //

var _$floorb_352 = _$floorb_351;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$exponent_756 = require( '@stdlib/number/float64/base/exponent' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest number toward negative infinity with \\(N\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = floorsd( 3.141592653589793, 5 );
* // returns 3.1415
*
* @example
* var v = floorsd( 3.141592653589793, 1 );
* // returns 3.0
*
* @example
* var v = floorsd( 12368.0, 2 );
* // returns 12000.0
*
* @example
* var v = floorsd( 0.0313, 2, 2 );
* // returns 0.03125
*/
function floorsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		n < 1 ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			_$isnan_103( b ) ||
			b <= 0 ||
			_$isInfinite_99( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = _$log10_551( _$abs_118( x ) );
	}
	else if ( base === 2 ) {
		exp = _$exponent_756( _$abs_118( x ) );
	}
	else {
		exp = _$ln_545( _$abs_118(x) ) / _$ln_545( base );
	}
	exp = _$floor_346( exp - n + 1.0 );
	s = _$pow_618( base, _$abs_118( exp ) );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = _$floor_346( x * s ) / s;
	} else {
		y = _$floor_346( x / s ) * s;
	}
	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$floorsd_355 = floorsd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest number toward negative infinity with `N` significant figures.
*
* @module @stdlib/math/base/special/floorsd
*
* @example
* var floorsd = require( '@stdlib/math/base/special/floorsd' );
*
* var v = floorsd( 3.141592653589793, 5 );
* // returns 3.1415
*
* v = floorsd( 3.141592653589793, 1 );
* // returns 3.0
*
* v = floorsd( 12368.0, 2 );
* // returns 12000.0
*
* v = floorsd( 0.0313, 2, 2 );
* // returns 0.03125
*/

// MODULES //

/* removed: var _$floorsd_355 = require( './floorsd.js' ); */;


// EXPORTS //

var _$floorsd_356 = _$floorsd_355;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_363( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5235987755982989;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 318016297876.5678 + (x * (-44297951805.96978 + (x * (2548908805.7337637 + (x * (-62974148.62058625 + (x * (708840.0452577386 + (x * (-2991.8191940101983 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 607366389490.0846 + (x * (22441179564.534092 + (x * (419320245.8981112 + (x * (5173438.887700964 + (x * (45584.78108065326 + (x * (281.3762688899943 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-2991.8191940101983 + (x * (708840.0452577386 + (x * (-62974148.62058625 + (x * (2548908805.7337637 + (x * (-44297951805.96978 + (x * 318016297876.5678))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (281.3762688899943 + (x * (45584.78108065326 + (x * (5173438.887700964 + (x * (419320245.8981112 + (x * (22441179564.534092 + (x * 607366389490.0846))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_363 = __evalrational_363;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_360( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (-0.20552590095501388 + (x * (0.018884331939670384 + (x * (-0.0006451914356839651 + (x * (0.000009504280628298596 + (x * (-4.9884311457357354e-8 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.04121420907221998 + (x * (0.0008680295429417843 + (x * (0.000012226278902417902 + (x * (1.2500186247959882e-7 + (x * (9.154392157746574e-10 + (x * 3.99982968972496e-12))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-4.9884311457357354e-8 + (x * (0.000009504280628298596 + (x * (-0.0006451914356839651 + (x * (0.018884331939670384 + (x * (-0.20552590095501388 + (x * 1.0))))))))))); // eslint-disable-line max-len
		s2 = 3.99982968972496e-12 + (x * (9.154392157746574e-10 + (x * (1.2500186247959882e-7 + (x * (0.000012226278902417902 + (x * (0.0008680295429417843 + (x * (0.04121420907221998 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_360 = __evalrational_360;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_361( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 2.999999999999634;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_361 = __evalrational_361;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_362( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_362 = __evalrational_362;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$evalrational_363 = require( './rational_psqs.js' ); */;
/* removed: var _$evalrational_360 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_361 = require( './rational_pfqf.js' ); */;
/* removed: var _$evalrational_362 = require( './rational_pgqg.js' ); */;


// VARIABLES //

// Array for storing sincos evaluation:
var __sc_357 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Fresnel integrals S(x) and C(x).
*
* ## Method
*
* Evaluates the Fresnel integrals
*
* ```tex
* \begin{align*}
* \operatorname{S}(x) &= \int_0^x \sin\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t, \\
* \operatorname{C}(x) &= \int_0^x \cos\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t.
* \end{align*}
* ```
*
* The integrals are evaluated by a power series for \\( x < 1 \\). For \\( x >= 1 \\) auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
* ```tex
* \begin{align*}
* \operatorname{C}(x) &= \frac{1}{2} + f(x) \sin\left( \frac{\pi}{2} x^2 \right) - g(x) \cos\left( \frac{\pi}{2} x^2 \right), \\
* \operatorname{S}(x) &= \frac{1}{2} - f(x) \cos\left( \frac{\pi}{2} x^2 \right) - g(x) \sin\left( \frac{\pi}{2} x^2 \right).
* \end{align*}
* ```
*
* ## Notes
*
* -   Relative error on test interval \\( \[0,10\] \\):
*
*     | arithmetic | function | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | IEEE       | S(x)     | 10000    | 2.0e-15 | 3.2e-16 |
*     | IEEE       | C(x)     | 10000    | 1.8e-15 | 3.3e-16 |
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} S(x) and C(x)
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], 1.0 );
* // returns [ ~0.438, ~0.780 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], Infinity );
* // returns [ ~0.5, ~0.5 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], -Infinity );
* // returns [ ~-0.5, ~-0.5 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function fresnel( out, x ) {
	var x2;
	var xa;
	var f;
	var g;
	var t;
	var u;

	xa = _$abs_118( x );
	x2 = xa * xa;
	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		out[ 0 ] = xa * x2 * _$evalrational_363( t );
		out[ 1 ] = xa * _$evalrational_360( t );
	} else if ( xa > 36974.0 ) {
		out[ 1 ] = 0.5;
		out[ 0 ] = 0.5;
	} else {
		// Asymptotic power series auxiliary functions for large arguments...
		x2 = xa * xa;
		t = _$PI_84 * x2;
		u = 1.0 / (t * t);
		t = 1.0 / t;
		f = 1.0 - ( u * _$evalrational_361( u ) );
		g = t * _$evalrational_362( u );
		t = _$HALF_PI_62 * x2;
		_$sincos_687( __sc_357, t );
		t = _$PI_84 * xa;
		out[ 1 ] = 0.5 + ( ( (f*__sc_357[0]) - (g*__sc_357[1]) ) / t );
		out[ 0 ] = 0.5 - ( ( (f*__sc_357[1]) + (g*__sc_357[0]) ) / t );
	}
	if ( x < 0.0 ) {
		out[ 1 ] = -out[ 1 ];
		out[ 0 ] = -out[ 0 ];
	}
	return out;
}


// EXPORTS //

var _$fresnel_357 = fresnel;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$fresnel_357 = require( './fresnel.js' ); */;


// MAIN //

/**
* Computes the Fresnel integrals S(x) and C(x).
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} S(x) and C(x)
*
* @example
* var v = fresnel( 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var v = fresnel( 1.0 );
* // returns [ ~0.438, ~0.780 ]
*
* @example
* var v = fresnel( Infinity );
* // returns [ ~0.5, ~0.5 ]
*
* @example
* var v = fresnel( -Infinity );
* // returns [ ~-0.5, ~-0.5 ]
*
* @example
* var v = fresnel( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var v = fresnel( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~0.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function __fresnel_359( out, x ) {
	if ( arguments.length === 1 ) {
		return _$fresnel_357( new Array( 2 ), out );
	}
	return _$fresnel_357( out, x );
}


// EXPORTS //

var _$fresnel_359 = __fresnel_359;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Fresnel integrals S(x) and C(x).
*
* @module @stdlib/math/base/special/fresnel
*
* @example
* var fresnel = require( '@stdlib/math/base/special/fresnel' );
*
* var v = fresnel( 0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = fresnel( 1.0 );
* // returns [ ~0.438, ~0.780 ]
*
* v = fresnel( Infinity );
* // returns [ ~0.5, ~0.5 ]
*
* v = fresnel( -Infinity );
* // returns [ ~-0.5, ~-0.5 ]
*
* v = fresnel( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var fresnel = require( '@stdlib/math/base/special/fresnel' );
*
* var out = new Float64Array( 2 );
*
* var v = fresnel( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~0.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$fresnel_359 = require( './main.js' ); */;


// EXPORTS //

var _$fresnel_358 = _$fresnel_359;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_366( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (-0.20552590095501388 + (x * (0.018884331939670384 + (x * (-0.0006451914356839651 + (x * (0.000009504280628298596 + (x * (-4.9884311457357354e-8 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.04121420907221998 + (x * (0.0008680295429417843 + (x * (0.000012226278902417902 + (x * (1.2500186247959882e-7 + (x * (9.154392157746574e-10 + (x * 3.99982968972496e-12))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-4.9884311457357354e-8 + (x * (0.000009504280628298596 + (x * (-0.0006451914356839651 + (x * (0.018884331939670384 + (x * (-0.20552590095501388 + (x * 1.0))))))))))); // eslint-disable-line max-len
		s2 = 3.99982968972496e-12 + (x * (9.154392157746574e-10 + (x * (1.2500186247959882e-7 + (x * (0.000012226278902417902 + (x * (0.0008680295429417843 + (x * (0.04121420907221998 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_366 = __evalrational_366;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_367( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 2.999999999999634;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_367 = __evalrational_367;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_368( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_368 = __evalrational_368;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$evalrational_366 = require( './rational_pcqc.js' ); */;
/* removed: var _$evalrational_367 = require( './rational_pfqf.js' ); */;
/* removed: var _$evalrational_368 = require( './rational_pgqg.js' ); */;


// VARIABLES //

// Array for storing sincos evaluation:
var __sc_364 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Fresnel integral C(x).
*
* ## Method
*
* Evaluates the Fresnel integral
*
* ```tex
* \operatorname{C}(x) = \int_0^x \cos\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t.
* ```
*
* The integral is evaluated by a power series for \\( x < 1 \\). For \\( x >= 1 \\) auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
* ```tex
* \operatorname{C}(x) = \frac{1}{2} + f(x) \sin\left( \frac{\pi}{2} x^2 \right) - g(x) \cos\left( \frac{\pi}{2} x^2 \right).
* ```
*
* ## Notes
*
* -   Relative error on test interval \\( \[0,10\] \\):
*
*     | arithmetic | function | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | IEEE       | C(x)     | 10000    | 1.8e-15 | 3.3e-16 |
*
*
* @param {number} x - input value
* @returns {number} C(x)
*
* @example
* var v = fresnelc( 0.0 );
* // returns 0.0
*
* @example
* var v = fresnelc( 1.0 );
* // returns ~0.780
*
* @example
* var v = fresnelc( Infinity );
* // returns ~0.5
*
* @example
* var v = fresnelc( -Infinity );
* // returns ~-0.5
*
* @example
* var v = fresnelc( NaN );
* // returns NaN
*/
function fresnelc( x ) {
	var x2;
	var xa;
	var C;
	var f;
	var g;
	var t;
	var u;

	xa = _$abs_118( x );
	x2 = xa * xa;
	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		C = xa * _$evalrational_366( t );
	} else if ( xa > 36974.0 ) {
		C = 0.5;
	} else {
		// Asymptotic power series auxiliary functions for large arguments...
		x2 = xa * xa;
		t = _$PI_84 * x2;
		u = 1.0 / (t * t);
		t = 1.0 / t;
		f = 1.0 - ( u * _$evalrational_367( u ) );
		g = t * _$evalrational_368( u );
		t = _$HALF_PI_62 * x2;
		_$sincos_687( __sc_364, t );
		t = _$PI_84 * xa;
		C = 0.5 + ( ( (f*__sc_364[0]) - (g*__sc_364[1]) ) / t );
	}
	if ( x < 0.0 ) {
		C = -C;
	}
	return C;
}


// EXPORTS //

var _$fresnelc_364 = fresnelc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Fresnel integral C(x).
*
* @module @stdlib/math/base/special/fresnelc
*
* @example
* var fresnelc = require( '@stdlib/math/base/special/fresnelc' );
*
* var v = fresnelc( 0.0 );
* // returns 0.0
*
* v = fresnelc( 1.0 );
* // returns ~0.780
*
* v = fresnelc( Infinity );
* // returns ~0.5
*
* v = fresnelc( -Infinity );
* // returns ~-0.5
*
* v = fresnelc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$fresnelc_364 = require( './fresnelc.js' ); */;


// EXPORTS //

var _$fresnelc_365 = _$fresnelc_364;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_373( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5235987755982989;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 318016297876.5678 + (x * (-44297951805.96978 + (x * (2548908805.7337637 + (x * (-62974148.62058625 + (x * (708840.0452577386 + (x * (-2991.8191940101983 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 607366389490.0846 + (x * (22441179564.534092 + (x * (419320245.8981112 + (x * (5173438.887700964 + (x * (45584.78108065326 + (x * (281.3762688899943 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-2991.8191940101983 + (x * (708840.0452577386 + (x * (-62974148.62058625 + (x * (2548908805.7337637 + (x * (-44297951805.96978 + (x * 318016297876.5678))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (281.3762688899943 + (x * (45584.78108065326 + (x * (5173438.887700964 + (x * (419320245.8981112 + (x * (22441179564.534092 + (x * 607366389490.0846))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_373 = __evalrational_373;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_371( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 2.999999999999634;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_371 = __evalrational_371;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_372( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_372 = __evalrational_372;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$evalrational_373 = require( './rational_psqs.js' ); */;
/* removed: var _$evalrational_371 = require( './rational_pfqf.js' ); */;
/* removed: var _$evalrational_372 = require( './rational_pgqg.js' ); */;


// VARIABLES //

// Array for storing sincos evaluation:
var __sc_369 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Fresnel integral S(x).
*
* ## Method
*
* Evaluates the Fresnel integral
*
* ```tex
* \operatorname{S}(x) = \int_0^x \sin\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t
* ```
*
* The integral is evaluated by a power series for \\( x < 1 \\). For \\( x >= 1 \\) auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
* ```tex
* \operatorname{S}(x) = \frac{1}{2} - f(x) \cos\left( \frac{\pi}{2} x^2 \right) - g(x) \sin\left( \frac{\pi}{2} x^2 \right).
* ```
*
* ## Notes
*
* -   Relative error on test interval \\( \[0,10\] \\):
*
*     | arithmetic | function | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:--------:|:-------:|
*     | IEEE       | S(x)     | 10000    | 2.0e-15 | 3.2e-16 |
*
*
* @param {number} x - input value
* @returns {number} S(x)
*
* @example
* var v = fresnels( 0.0 );
* // returns 0.0
*
* @example
* var v = fresnels( 1.0 );
* // returns ~0.438
*
* @example
* var v = fresnels( Infinity );
* // returns ~0.5
*
* @example
* var v = fresnels( -Infinity );
* // returns ~-0.5
*
* @example
* var v = fresnels( NaN );
* // returns NaN
*/
function fresnels( x ) {
	var x2;
	var xa;
	var S;
	var f;
	var g;
	var t;
	var u;

	xa = _$abs_118( x );
	x2 = xa * xa;
	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		S = xa * x2 * _$evalrational_373( t );
	} else if ( xa > 36974.0 ) {
		S = 0.5;
	} else {
		// Asymptotic power series auxiliary functions for large arguments...
		x2 = xa * xa;
		t = _$PI_84 * x2;
		u = 1.0 / (t * t);
		t = 1.0 / t;
		f = 1.0 - ( u * _$evalrational_371( u ) );
		g = t * _$evalrational_372( u );
		t = _$HALF_PI_62 * x2;
		_$sincos_687( __sc_369, t );
		t = _$PI_84 * xa;
		S = 0.5 - ( ( (f*__sc_369[1]) + (g*__sc_369[0]) ) / t );
	}
	if ( x < 0.0 ) {
		S = -S;
	}
	return S;
}


// EXPORTS //

var _$fresnels_369 = fresnels;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the Fresnel integral S(x).
*
* @module @stdlib/math/base/special/fresnels
*
* @example
* var fresnels = require( '@stdlib/math/base/special/fresnels' );
*
* var v = fresnels( 0.0 );
* // returns 0.0
*
* v = fresnels( 1.0 );
* // returns ~0.438
*
* v = fresnels( Infinity );
* // returns ~0.5
*
* v = fresnels( -Infinity );
* // returns ~-0.5
*
* v = fresnels( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$fresnels_369 = require( './fresnels.js' ); */;


// EXPORTS //

var _$fresnels_370 = _$fresnels_369;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$normalize_767 = require( '@stdlib/number/float64/base/normalize' ); */;
/* removed: var _$exponent_756 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var __CLEAR_EXP_MASK_374 = 0x800fffff>>>0; // asm type annotation

// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672
var SET_EXP_MASK = 0x3fe00000|0; // asm type annotation

// Normalization workspace:
var X = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var __WORDS_374 = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = frexp( new Array( 2 ), 4.0 );
* // returns [ 0.5, 3 ]
*
* @example
* var out = frexp( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), -0.0 );
* // returns [ -0.0, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), Infinity );
* // returns [ Infinity , 0 ]
*
* @example
* var out = frexp( new Array( 2 ), -Infinity );
* // returns [ -Infinity , 0 ]
*/
function frexp( out, x ) {
	var high;
	var exp;
	if (
		x === 0.0 || // handles -0
		_$isnan_103( x ) ||
		_$isInfinite_99( x )
	) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	// If `x` is subnormal, normalize it...
	_$normalize_767( X, x );

	// Extract the exponent from `x` and add the normalization exponent:
	exp = _$exponent_756( X[0] ) + X[ 1 ] + 1;

	// Break `x` into two unsigned 32-bit integers (higher and lower order words):
	_$toWords_778( __WORDS_374, X[ 0 ] );
	high = __WORDS_374[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= __CLEAR_EXP_MASK_374;

	// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):
	high |= SET_EXP_MASK;

	// Create a new floating-point number:
	x = _$fromWords_758( high, __WORDS_374[ 1 ] );

	out[ 0 ] = x;
	out[ 1 ] = exp;
	return out;
}


// EXPORTS //

var _$frexp_374 = frexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$frexp_374 = require( './frexp.js' ); */;


// MAIN //

/**
* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = frexp( 4.0 );
* // returns [ 0.5, 3 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var y = frexp( out, 4.0 );
* // returns <Float64Array>[ 0.5, 3 ]
*
* var bool = ( y === out );
* // returns true
*
* @example
* var out = frexp( 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = frexp( -0.0 );
* // returns [ -0.0, 0 ]
*
* @example
* var out = frexp( NaN );
* // returns [ NaN, 0 ]
*
* @example
* var out = frexp( Infinity );
* // returns [ Infinity , 0 ]
*
* @example
* var out = frexp( -Infinity );
* // returns [ -Infinity , 0 ]
*/
function __frexp_376( out, x ) {
	if ( arguments.length === 1 ) {
		return _$frexp_374( [ 0.0, 0 ], out );
	}
	return _$frexp_374( out, x );
}


// EXPORTS //

var _$frexp_376 = __frexp_376;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @module @stdlib/math/base/special/frexp
*
* @example
* var frexp = require( '@stdlib/math/base/special/frexp' );
*
* var out = frexp( 4.0 );
* // returns [ 0.5, 3 ]
*
* out = frexp( 0.0 );
* // returns [ 0.0, 0 ]
*
* out = frexp( -0.0 );
* // returns [ -0.0, 0 ]
*
* out = frexp( NaN );
* // returns [ NaN, 0 ]
*
* out = frexp( Infinity );
* // returns [ Infinity , 0 ]
*
* out = frexp( -Infinity );
* // returns [ -Infinity , 0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var frexp = require( '@stdlib/math/base/special/frexp' );
*
* var out = new Float64Array( 2 );
*
* var y = frexp( out, 4.0 );
* // returns <Float64Array>[ 0.5, 3 ]
*
* var bool = ( y === out );
* // returns true
*/

// MODULES //

/* removed: var _$frexp_376 = require( './main.js' ); */;


// EXPORTS //

var _$frexp_375 = _$frexp_376;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the greatest common divisor (gcd) using the binary GCD algorithm and bitwise operations.
*
* ## References
*
* -   Stein, Josef. 1967. "Computational problems associated with Racah algebra." _Journal of Computational Physics_ 1 (3): 397–405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].
*
* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2
*
* @private
* @param {integer32} a - integer
* @param {integer32} b - integer
* @returns {integer32} greatest common divisor
*
* @example
* var v = gcd( 48, 18 );
* // returns 6
*/
function gcd( a, b ) {
	var k = 0;
	var t;

	// Simple cases:
	if ( a === 0 ) {
		return b;
	}
	if ( b === 0 ) {
		return a;
	}
	// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...
	while ( (a & 1) === 0 && (b & 1) === 0 ) {
		a >>>= 1; // right shift
		b >>>= 1; // right shift
		k += 1;
	}
	// Reduce `a` to an odd number...
	while ( (a & 1) === 0 ) {
		a >>>= 1; // right shift
	}
	// Henceforth, `a` is always odd...
	while ( b ) {
		// Remove all factors of 2 in `b`, as they are not common...
		while ( (b & 1) === 0 ) {
			b >>>= 1; // right shift
		}
		// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...
		if ( a > b ) {
			t = b;
			b = a;
			a = t;
		}
		b -= a; // b=0 iff b=a
	}
	// Restore common factors of 2...
	return a << k;
}


// EXPORTS //

var _$gcd_457 = gcd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the greatest common divisor (gcd) using the binary GCD algorithm.
*
* ## References
*
* -   Stein, Josef. 1967. "Computational problems associated with Racah algebra." _Journal of Computational Physics_ 1 (3): 397–405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].
*
* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2
*
* @private
* @param {integer} a - integer
* @param {integer} b - integer
* @returns {integer} greatest common divisor
*
* @example
* var v = gcd( 1.2676506002282294e+30, 9007199254740992 );
* // returns 9007199254740992
*/
function __gcd_456( a, b ) {
	var k = 1;
	var t;

	// Simple cases:
	if ( a === 0 ) {
		return b;
	}
	if ( b === 0 ) {
		return a;
	}
	// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...
	while ( a%2 === 0 && b%2 === 0 ) {
		a /= 2; // right shift
		b /= 2; // right shift
		k *= 2; // left shift
	}
	// Reduce `a` to an odd number...
	while ( a%2 === 0 ) {
		a /= 2; // right shift
	}
	// Henceforth, `a` is always odd...
	while ( b ) {
		// Remove all factors of 2 in `b`, as they are not common...
		while ( b%2 === 0 ) {
			b /= 2; // right shift
		}
		// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...
		if ( a > b ) {
			t = b;
			b = a;
			a = t;
		}
		b -= a; // b=0 iff b=a
	}
	// Restore common factors of 2...
	return k * a;
}


// EXPORTS //

var _$gcd_456 = __gcd_456;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$INT32_MAX_93 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$gcd_457 = require( './bitwise_binary_gcd.js' ); */;
/* removed: var _$gcd_456 = require( './binary_gcd.js' ); */;


// MAIN //

/**
* Computes the greatest common divisor (gcd).
*
* @param {integer} a - integer
* @param {integer} b - integer
* @returns {integer} greatest common divisor
*
* @example
* var v = gcd( 48, 18 );
* // returns 6
*
* @example
* var v = gcd( 3.14, 18 );
* // returns NaN
*
* @example
* var v = gcd( NaN, 18 );
* // returns NaN
*/
function __gcd_458( a, b ) {
	if ( _$isnan_103( a ) || _$isnan_103( b ) ) {
		return NaN;
	}
	if (
		a === _$FLOAT64_PINF_85 ||
		b === _$FLOAT64_PINF_85 ||
		a === _$FLOAT64_NINF_81 ||
		b === _$FLOAT64_NINF_81
	) {
		return NaN;
	}
	if ( !( _$isInteger_101( a ) && _$isInteger_101( b ) ) ) {
		return NaN;
	}
	if ( a < 0 ) {
		a = -a;
	}
	if ( b < 0 ) {
		b = -b;
	}
	if ( a <= _$INT32_MAX_93 && b <= _$INT32_MAX_93 ) {
		return _$gcd_457( a, b );
	}
	return _$gcd_456( a, b );
}


// EXPORTS //

var _$gcd_458 = __gcd_458;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the greatest common divisor (gcd).
*
* @module @stdlib/math/base/special/gcd
*
* @example
* var gcd = require( '@stdlib/math/base/special/gcd' );
*
* var v = gcd( 48, 18 );
* // returns 6
*/

// MODULES //

/* removed: var _$gcd_458 = require( './gcd.js' ); */;


// EXPORTS //

var _$gcd_459 = _$gcd_458;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;


// MAIN //

/**
* Computes the half-value coversed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value coversed cosine
*
* @example
* var v = hacovercos( 0.0 );
* // returns 0.5
*
* @example
* var v = hacovercos( 3.141592653589793/2.0 );
* // returns 1.0
*
* @example
* var v = hacovercos( -3.141592653589793/6.0 );
* // returns 0.25
*
* @example
* var v = hacovercos( NaN );
* // returns NaN
*/
function hacovercos( x ) {
	return (1.0 + _$sin_683( x )) / 2.0;
}


// EXPORTS //

var _$hacovercos_460 = hacovercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the half-value coversed cosine.
*
* @module @stdlib/math/base/special/hacovercos
*
* @example
* var hacovercos = require( '@stdlib/math/base/special/hacovercos' );
*
* var v = hacovercos( 0.0 );
* // returns 0.5
*
* v = hacovercos( 3.141592653589793/2.0 );
* // returns 1.0
*
* v = hacovercos( -3.141592653589793/6.0 );
* // returns 0.25
*
* v = hacovercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$hacovercos_460 = require( './hacovercos.js' ); */;


// EXPORTS //

var _$hacovercos_461 = _$hacovercos_460;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;


// MAIN //

/**
* Computes the half-value coversed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value coversed sine
*
* @example
* var v = hacoversin( 0.0 );
* // returns 0.5
*
* @example
* var v = hacoversin( 3.141592653589793/2.0 );
* // returns 0.0
*
* @example
* var v = hacoversin( -3.141592653589793/6.0 );
* // returns 0.75
*
* @example
* var v = hacoversin( NaN );
* // returns NaN
*/
function hacoversin( x ) {
	return (1.0 - _$sin_683( x )) / 2.0;
}


// EXPORTS //

var _$hacoversin_462 = hacoversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the half-value coversed sine.
*
* @module @stdlib/math/base/special/hacoversin
*
* @example
* var hacoversin = require( '@stdlib/math/base/special/hacoversin' );
*
* var v = hacoversin( 0.0 );
* // returns 0.5
*
* v = hacoversin( 3.141592653589793/2.0 );
* // returns 0.0
*
* v = hacoversin( -3.141592653589793/6.0 );
* // returns 0.75
*
* v = hacoversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$hacoversin_462 = require( './hacoversin.js' ); */;


// EXPORTS //

var _$hacoversin_463 = _$hacoversin_462;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;


// MAIN //

/**
* Computes the half-value versed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value versed cosine
*
* @example
* var v = havercos( 0.0 );
* // returns 1.0
*
* @example
* var v = havercos( 3.141592653589793/2.0 );
* // returns 0.5
*
* @example
* var v = havercos( -3.141592653589793/6.0 );
* // returns ~0.9330
*
* @example
* var v = havercos( NaN );
* // returns NaN
*/
function havercos( x ) {
	return (1.0 + _$cos_226( x )) / 2.0;
}


// EXPORTS //

var _$havercos_464 = havercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the half-value versed cosine.
*
* @module @stdlib/math/base/special/havercos
*
* @example
* var havercos = require( '@stdlib/math/base/special/havercos' );
*
* var v = havercos( 0.0 );
* // returns 1.0
*
* v = havercos( 3.141592653589793/2.0 );
* // returns 0.5
*
* v = havercos( -3.141592653589793/6.0 );
* // returns ~0.9330
*
* v = havercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$havercos_464 = require( './havercos.js' ); */;


// EXPORTS //

var _$havercos_465 = _$havercos_464;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;


// MAIN //

/**
* Computes the half-value versed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value versed sine
*
* @example
* var v = haversin( 0.0 );
* // returns 0.0
*
* @example
* var v = haversin( 3.141592653589793/2.0 );
* // returns ~0.5
*
* @example
* var v = haversin( -3.141592653589793/6.0 );
* // returns ~0.06699
*
* @example
* var v = haversin( NaN );
* // returns NaN
*/
function haversin( x ) {
	return (1.0 - _$cos_226( x )) / 2.0;
}


// EXPORTS //

var _$haversin_466 = haversin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the half-value versed sine.
*
* @module @stdlib/math/base/special/haversin
*
* @example
* var haversin = require( '@stdlib/math/base/special/haversin' );
*
* var v = haversin( 0.0 );
* // returns 0.0
*
* v = haversin( 3.141592653589793/2.0 );
* // returns ~0.5
*
* v = haversin( -3.141592653589793/6.0 );
* // returns ~0.06699
*
* v = haversin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$haversin_466 = require( './haversin.js' ); */;


// EXPORTS //

var _$haversin_467 = _$haversin_466;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the Heaviside function.
*
* @param {number} x - input value
* @param {string} [continuity] - continuity option
* @returns {number} function value
*
* @example
* var v = heaviside( 3.14 );
* // returns 1.0
*
* @example
* var v = heaviside( -3.14 );
* // returns 0.0
*
* @example
* var v = heaviside( 0.0 );
* // returns NaN
*
* @example
* var v = heaviside( 0.0, 'half-maximum' );
* // returns 0.5
*
* @example
* var v = heaviside( 0.0, 'left-continuous' );
* // returns 0.0
*
* @example
* var v = heaviside( 0.0, 'right-continuous' );
* // returns 1.0
*
* @example
* var v = heaviside( NaN );
* // returns NaN
*/
function heaviside( x, continuity ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		return 1.0;
	}
	// Handle `+-0`...
	if ( x === 0.0 ) {
		if ( continuity === 'half-maximum' ) {
			return 0.5;
		}
		if ( continuity === 'left-continuous' ) {
			return 0.0;
		}
		if ( continuity === 'right-continuous' ) {
			return 1.0;
		}
		// Default behavior is discontinuity...
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$heaviside_468 = heaviside;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Heaviside function.
*
* @module @stdlib/math/base/special/heaviside
*
* @example
* var heaviside = require( '@stdlib/math/base/special/heaviside' );
*
* var v = heaviside( 3.14 );
* // returns 1.0
*
* v = heaviside( -3.14 );
* // returns 0.0
*
* v = heaviside( 0.0 );
* // returns NaN
*
* v = heaviside( 0.0, 'half-maximum' );
* // returns 0.5
*
* v = heaviside( 0.0, 'left-continuous' );
* // returns 0.0
*
* v = heaviside( 0.0, 'right-continuous' );
* // returns 1.0
*
* v = heaviside( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$heaviside_468 = require( './heaviside.js' ); */;


// EXPORTS //

var _$heaviside_469 = _$heaviside_468;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Computes the hypotenuse avoiding overflow and underflow.
*
* @param {number} x - number
* @param {number} y - number
* @returns {number} hypotenuse
*
* @example
* var h = hypot( -5.0, 12.0 );
* // returns 13.0
*
* @example
* var h = hypot( NaN, 12.0 );
* // returns NaN
*
* @example
* var h = hypot( -0.0, -0.0 );
* // returns 0.0
*/
function hypot( x, y ) {
	var tmp;
	if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) || _$isInfinite_99( y ) ) {
		return _$FLOAT64_PINF_85;
	}
	if ( x < 0.0 ) {
		x = -x;
	}
	if ( y < 0.0 ) {
		y = -y;
	}
	if ( x < y ) {
		tmp = y;
		y = x;
		x = tmp;
	}
	if ( x === 0.0 ) {
		return 0.0;
	}
	y /= x;
	return x * _$sqrt_703( 1.0 + (y*y) );
}


// EXPORTS //

var _$hypot_470 = hypot;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hypotenuse avoiding overflow and underflow.
*
* @module @stdlib/math/base/special/hypot
*
* @example
* var hypot = require( '@stdlib/math/base/special/hypot' );
*
* var h = hypot( -5.0, 12.0 );
* // returns 13.0
*
* h = hypot( NaN, 12.0 );
* // returns NaN
*
* h = hypot( -0.0, -0.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$hypot_470 = require( './hypot.js' ); */;


// EXPORTS //

var _$hypot_471 = _$hypot_470;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var imul = ( typeof Math.imul === 'function' ) ? Math.imul : null; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$imul_473 = imul;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111
var LOW_WORD_MASK = 0x0000ffff>>>0; // asm type annotation


// MAIN //

/**
* Performs C-like multiplication of two signed 32-bit integers.
*
* ## Method
*
* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words
*
*     ```tex
*     a = w_h*2^{16} + w_l
*     ```
*
*     where \\( w_h \\) is the most significant 16 bits and \\( w_l \\) is the least significant 16 bits. For example, consider the maximum signed 32-bit integer \\( 2^{31}-1 \\)
*
*     ```binarystring
*     01111111111111111111111111111111
*     ```
*
*     The 16-bit high word is then
*
*     ```binarystring
*     0111111111111111
*     ```
*
*     and the 16-bit low word
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     If we cast the high word to 32-bit precision and multiply by \\( 2^{16} \\) (equivalent to a 16-bit left shift), then the bit sequence is
*
*     ```binarystring
*     01111111111111110000000000000000
*     ```
*
*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is
*
*     ```binarystring
*     00000000000000001111111111111111
*     ```
*
*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\( 2^{31}-1 \\).
*
* -   Accordingly, the multiplication of two 32-bit integers can be expressed
*
*     ```tex
*     \begin{align*}
*     a \cdot b &= ( a_h \cdot 2^{16} + a_l) \cdot ( b_h \cdot 2^{16} + b_l) \\
*           &= a_l \cdot b_l + a_h \cdot b_l \cdot 2^{16} + a_l \cdot b_h \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32} \\
*           &= a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32}
*     \end{align*}
*     ```
*
* -   We note that multiplying (dividing) an integer by \\( 2^n \\) is equivalent to performing a left (right) shift of \\( n \\) bits.
*
* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\( 2^{32} \\). Stated another way, we only care about the low word of a 64-bit result.
*
* -   Accordingly, the last term, being evenly divisible by \\( 2^{32} \\), drops from the equation leaving the remaining two terms as the remainder.
*
*     ```tex
*     a \cdot b = a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) << 16
*     ```
*
* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to "overflow". However, we can disregard (`>>>0`) overflow bits due modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.
*
*
* @param {integer32} a - integer
* @param {integer32} b - integer
* @returns {integer32} product
*
* @example
* var v = imul( -10|0, 4|0 );
* // returns -40
*/
function __imul_474( a, b ) {
	var lbits;
	var mbits;
	var ha;
	var hb;
	var la;
	var lb;

	a |= 0; // asm type annotation
	b |= 0; // asm type annotation

	// Isolate the most significant 16-bits:
	ha = ( a>>>16 )>>>0; // asm type annotation
	hb = ( b>>>16 )>>>0; // asm type annotation

	// Isolate the least significant 16-bits:
	la = ( a&LOW_WORD_MASK )>>>0; // asm type annotation
	lb = ( b&LOW_WORD_MASK )>>>0; // asm type annotation

	// Shift by zero (`>>>0`) sets the sign on the high part of the low word (i.e., "mid-bits"):
	lbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible
	mbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow

	// The final `|0` converts from an "unsigned integer" (possible integer overflow during sum) to a signed integer:
	return ( lbits + mbits )|0; // asm type annotation
}


// EXPORTS //

var _$imul_474 = __imul_474;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Perform C-like multiplication of two signed 32-bit integers.
*
* @module @stdlib/math/base/special/imul
*
* @example
* var imul = require( '@stdlib/math/base/special/imul' );
*
* var v = imul( -10|0, 4|0 );
* // returns -40
*/

// MODULES //

/* removed: var _$imul_473 = require( './main.js' ); */;
/* removed: var _$imul_474 = require( './polyfill.js' ); */;


// MAIN //

if ( typeof _$imul_473 !== 'function' ) {
	_$imul_473 = _$imul_474;
}


// EXPORTS //

var _$imul_472 = _$imul_473;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// VARIABLES //

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111
var __LOW_WORD_MASK_476 = 0x0000ffff>>>0; // asm type annotation


// MAIN //

/**
* Performs multiplication of two signed 32-bit integers and returns an array of two signed 32-bit integers which represents the signed 64-bit integer product.
*
* @param {ArrayLikeObject} [out] - output array
* @param {uinteger32} a - integer
* @param {uinteger32} b - integer
* @returns {ArrayLikeObject} output array
*
* @example
* var v = imuldw( 0xAAAAAAAA, 0x55555555 );
* // returns [ -477218589, 1908874354 ]
*/
function imuldw() {
	var out;
	var w1;
	var w2;
	var w3;
	var ha;
	var hb;
	var la;
	var lb;
	var a;
	var b;
	var t;
	var k;

	if ( arguments.length === 3 ) {
		out = arguments[ 0 ];
		a = arguments[ 1 ];
		b = arguments[ 2 ];
	} else {
		out = [ 0, 0 ];
		a = arguments[ 0 ];
		b = arguments[ 1 ];
	}
	if ( _$isnan_103( a ) || _$isnan_103( b ) ) {
		return NaN;
	}
	a |= 0; // asm type annotation
	b |= 0; // asm type annotation

	ha = ( a >> 16 ) | 0;
	la = ( a & __LOW_WORD_MASK_476 ) >>> 0;

	hb = ( b >> 16 ) | 0;
	lb = ( b & __LOW_WORD_MASK_476 ) >>> 0;

	t = ( la*lb ) >>> 0;
	w3 = ( t & __LOW_WORD_MASK_476 ) >>> 0;
	k = ( t >>> 16 ) >>> 0;

	t = ( ( ha*lb ) + k ) >>> 0;
	w2 = ( t & __LOW_WORD_MASK_476 ) >>> 0;
	w1 = ( t >> 16 ) >>> 0;

	t = ( ( la*hb ) + w2 ) >>> 0;
	k = ( t >> 16 ) >>> 0;

	out[ 0 ] = ( ( ha*hb ) + w1 + k ) | 0; // compute the higher 32 bits and cast to a signed 32-bit integer
	out[ 1 ] = ( ( t << 16 ) + w3 ) | 0; // compute the lower 32 bits and cast to a signed 32-bit integer

	return out;
}


// EXPORTS //

var _$imuldw_476 = imuldw;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Perform multiplication of two signed 32-bit integers and return an array of two signed 32-bit integers which represents the signed 64-bit integer product.
*
* @module @stdlib/math/base/special/imuldw
*
* @example
* var imuldw = require( '@stdlib/math/base/special/imuldw' );
*
* var v = imuldw( 0xAAAAAAAA, 0x55555555 );
* // returns [ -477218589, 1908874354 ]
*/

// MODULES //

/* removed: var _$imuldw_476 = require( './main.js' ); */;


// EXPORTS //

var _$imuldw_475 = _$imuldw_476;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes an absolute value of a signed 32-bit integer in two's complement format.
*
* ## Method
*
* -   Assume two's complement format.
* -   Create a mask by applying a sign propagating right-shift. For negative integers, this results in all `1`'s. For nonnegative integers, this results in all `0`'s.
* -   XOR the mask with `x`. For negative integers, this is the equivalent of a NOT. For nonnegative integers, this is a no-op.
* -   Subtract the mask to recover the absolute value. For negative integers, this adds `1`, which is `-x` when using two's complement. For nonnegative integers, this subtracts `0`.
*
* @param {integer32} x - integer
* @returns {integer32} absolute value
*
* @example
* var v = abs( -10|0 );
* // returns 10
*/
function __abs_477( x ) {
	var mask;
	var y;

	y = x|0; // asm type annotation
	mask = ( y >> 31 )|0; // asm type annotation
	return ((y ^ mask) - mask)|0; // asm type annotation
}


// EXPORTS //

var _$abs_477 = __abs_477;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a signed 32-bit integer.
*
* @module @stdlib/math/base/special/int32-abs
*
* @example
* var absInt32 = require( '@stdlib/math/base/special/int32-abs' );
*
* var v = absInt32( -1|0 );
* // returns 1
*
* v = absInt32( 2|0 );
* // returns 2
*
* v = absInt32( 0|0 );
* // returns 0
*/

// MODULES //

/* removed: var _$abs_477 = require( './abs.js' ); */;


// EXPORTS //

var _$absInt32_478 = _$abs_477;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the multiplicative inverse of `x`.
*
* @param {number} x - input value
* @returns {number} multiplicative inverse
*
* @example
* var v = inv( -1.0 );
* // returns -1.0
*
* @example
* var v = inv( 2.0 );
* // returns 0.5
*
* @example
* var v = inv( 0.0 );
* // returns Infinity
*
* @example
* var v = inv( -0.0 );
* // returns -Infinity
*
* @example
* var v = inv( NaN );
* // returns NaN
*/
function inv( x ) {
	return 1.0 / x;
}


// EXPORTS //

var _$inv_480 = inv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the multiplicative inverse.
*
* @module @stdlib/math/base/special/inv
*
* @example
* var inv = require( '@stdlib/math/base/special/inv' );
*
* var v = inv( -1.0 );
* // returns -1.0
*
* v = inv( 2.0 );
* // returns 0.5
*
* v = inv( 0.0 );
* // returns Infinity
*
* v = inv( -0.0 );
* // returns -Infinity
*
* v = inv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$inv_480 = require( './inv.js' ); */;


// EXPORTS //

var _$inv_479 = _$inv_480;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the Kronecker delta.
*
* @param {number} i - input value
* @param {number} j - input value
* @returns {number} function value
*
* @example
* var v = kroneckerDelta( 3.14, 3.14 );
* // returns 1.0
*
* @example
* var v = kroneckerDelta( 3.14, 0.0 );
* // returns 0.0
*
* @example
* var v = kroneckerDelta( NaN, 3.14 );
* // returns NaN
*
* @example
* var v = kroneckerDelta( 3.14, NaN );
* // returns NaN
*
* @example
* var v = kroneckerDelta( NaN, NaN );
* // returns NaN
*/
function kroneckerDelta( i, j ) {
	if ( _$isnan_103( i ) || _$isnan_103( j ) ) {
		return NaN;
	}
	if ( i === j ) {
		return 1.0;
	}
	return 0.0;
}


// EXPORTS //

var _$kroneckerDelta_540 = kroneckerDelta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Kronecker delta.
*
* @module @stdlib/math/base/special/kronecker-delta
*
* @example
* var kroneckerDelta = require( '@stdlib/math/base/special/kronecker-delta' );
*
* var v = kroneckerDelta( 3.14, 3.14 );
* // returns 1.0
*
* v = kroneckerDelta( 3.14, 0.0 );
* // returns 0.0
*
* v = kroneckerDelta( NaN, 3.14 );
* // returns NaN
*
* v = kroneckerDelta( 3.14, NaN );
* // returns NaN
*
* v = kroneckerDelta( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$kroneckerDelta_540 = require( './kronecker_delta.js' ); */;


// EXPORTS //

var _$kroneckerDelta_539 = _$kroneckerDelta_540;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gcd_459 = require( '@stdlib/math/base/special/gcd' ); */;


// MAIN //

/**
* Computes the least common multiple (lcm).
*
* @param {integer} a - integer
* @param {integer} b - integer
* @returns {integer} least common multiple
*
* @example
* var v = lcm( 21, 6 );
* // returns 42
*
* @example
* var v = lcm( 3.14, 6 );
* // returns NaN
*
* @example
* var v = lcm( NaN, 6 );
* // returns NaN
*/
function lcm( a, b ) {
	var d;
	if ( a === 0 || b === 0 ) {
		return 0;
	}
	if ( a < 0 ) {
		a = -a;
	}
	if ( b < 0 ) {
		b = -b;
	}
	// Note: we rely on `gcd` to perform further argument validation...
	d = _$gcd_459( a, b );
	if ( _$isnan_103( d ) ) {
		return d;
	}
	return (a/d) * b;
}


// EXPORTS //

var _$lcm_542 = lcm;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the least common multiple (lcm).
*
* @module @stdlib/math/base/special/lcm
*
* @example
* var lcm = require( '@stdlib/math/base/special/lcm' );
*
* var v = lcm( 21, 6 );
* // returns 42
*/

// MODULES //

/* removed: var _$lcm_542 = require( './lcm.js' ); */;


// EXPORTS //

var _$lcm_541 = _$lcm_542;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Computes the base `b` logarithm of `x`.
*
* @param {NonNegativeNumber} x - input value
* @param {NonNegativeNumber} b - base
* @returns {number} logarithm (base `b`)
*
* @example
* var v = log( 100.0, 10.0 );
* // returns 2.0
*
* @example
* var v = log( 16.0, 2.0 );
* // returns 4.0
*
* @example
* var v = log( 5.0, 1.0 );
* // returns Infinity
*
* @example
* var v = log( NaN, 2.0 );
* // returns NaN
*
* @example
* var v = log( 1.0, NaN );
* // returns NaN
*
* @example
* var v = log( -4.0, 2.0 );
* // returns NaN
*
* @example
* var v = log( 4.0, -2.0 );
* // returns NaN
*/
function log( x, b ) {
	return _$ln_545( x ) / _$ln_545( b );
}


// EXPORTS //

var _$log_550 = log;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the base `b` logarithm.
*
* @module @stdlib/math/base/special/log
*
* @example
* var log = require( '@stdlib/math/base/special/log' );
*
* var v = log( 100.0, 10.0 );
* // returns 2.0
*
* v = log( 16.0, 2.0 );
* // returns 4.0
*
* v = log( 5.0, 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$log_550 = require( './log.js' ); */;


// EXPORTS //

var _$log_549 = _$log_550;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Computes the natural logarithm of \\( 1-\exp(-|x|) \\).
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = log1mexp( 1.1 );
* // returns ~-0.40477
*
* @example
* var v = log1mexp( 0.0 );
* // returns -Infinity
*
* @example
* var v = log1mexp( NaN );
* // returns NaN
*/
function log1mexp( x ) {
	var ax;
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	ax = _$abs_118( x );
	if ( 0.0 < ax && ax <= _$LN2_67 ) {
		return _$ln_545( -_$expm1_327( -ax ) );
	}
	// Case: |x| > ln(2)
	return _$log1p_558( -_$exp_314( -ax ) );
}


// EXPORTS //

var _$log1mexp_557 = log1mexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of \\(1-\exp(-|x|)\\).
*
* @module @stdlib/math/base/special/log1mexp
*
* @example
* var log1mexp = require( '@stdlib/math/base/special/log1mexp' );
*
* var v = log1mexp( 1.1 );
* // returns ~-0.40477
*
* v = log1mexp( 0.0 );
* // returns -Infinity
*
* v = log1mexp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$log1mexp_557 = require( './main.js' ); */;


// EXPORTS //

var _$log1mexp_556 = _$log1mexp_557;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Computes the natural logarithm of \\( 1 + \exp(x) \\).
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = log1pexp( 1.1 );
* // returns ~1.387
*
* @example
* var v = log1pexp( 100.0 );
* // returns 100.0
*
* @example
* var v = log1pexp( NaN );
* // returns NaN
*/
function log1pexp( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x <= -37.0 ) {
		return _$exp_314( x );
	}
	if ( x <= 18.0 ) {
		return _$log1p_558( _$exp_314( x ) );
	}
	if ( x <= 33.3 ) {
		return x + _$exp_314( -x );
	}
	// Case: x > 33.3
	return x;
}


// EXPORTS //

var _$log1pexp_562 = log1pexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of \\( 1 + exp(x) \\).
*
* @module @stdlib/math/base/special/log1pexp
*
* @example
* var log1pexp = require( '@stdlib/math/base/special/log1pexp' );
*
* var v = log1pexp( 1.1 );
* // returns ~1.387
*
* v = log1pexp( 100.0 );
* // returns 100.0
*
* v = log1pexp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$log1pexp_562 = require( './main.js' ); */;


// EXPORTS //

var _$log1pexp_561 = _$log1pexp_562;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Computes the natural logarithm of \\( \exp(x) + \exp(y) \\).
*
* @param {number} x - input value
* @param {number} y - input value
* @returns {number} natural logarithm of \\( \exp(x) + \exp(y) \\)
*
* @example
* var v = logaddexp( 90.0, 90.0 );
* // returns ~90.6931
*
* @example
* var v = logaddexp( -20.0, 90.0 );
* // returns 90.0
*
* @example
* var v = logaddexp( 0.0, -100 );
* // returns ~3.7201e-44
*/
function logaddexp( x, y ) {
	var d;
	if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
		return NaN;
	}
	if ( x === y ) {
		return x + _$LN2_67;
	}
	d = x - y;
	if ( d > 0.0 ) {
		return x + _$log1p_558( _$exp_314( -d ) );
	}
	return y + _$log1p_558( _$exp_314( d ) );
}


// EXPORTS //

var _$logaddexp_569 = logaddexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the natural logarithm of \\( exp(x) + exp(y) \\).
*
* @module @stdlib/math/base/special/logaddexp
*
* @example
* var logaddexp = require( '@stdlib/math/base/special/logaddexp' );
*
* var v = logaddexp( 90.0, 90.0 );
* // returns ~90.6931
*
* v = logaddexp( -20.0, 90.0 );
* // returns 90.0
*
* v = logaddexp( 0.0, -100 );
* // returns ~3.7201e-44
*/

// MODULES //

/* removed: var _$logaddexp_569 = require( './main.js' ); */;


// EXPORTS //

var _$logaddexp_568 = _$logaddexp_569;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a numeric value is a probability.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( NaN );
* // returns false
*/
function isProbability( x ) {
	return ( x >= 0.0 && x <= 1.0 );
}


// EXPORTS //

var _$isProbability_116 = isProbability;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is a probability.
*
* @module @stdlib/math/base/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/math/base/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isProbability_116 = require( './is_probability.js' ); */;


// EXPORTS //

var _$isProbability_115 = _$isProbability_116;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isProbability_115 = require( '@stdlib/math/base/assert/is-probability' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logit function.
*
* @param {Probability} p - input value
* @returns {number} function value
*
* @example
* var y = logit( 0.2 );
* // returns ~-1.386
*
* @example
* var y = logit( 0.9 );
* // returns ~2.197
*
* @example
* var y = logit( -4.0 );
* // returns NaN
*
* @example
* var y = logit( 1.5 );
* // returns NaN
*
* @example
* var y = logit( NaN );
* // returns NaN
*/
function logit( p ) {
	if ( _$isnan_103( p ) ) {
		return p;
	}
	if ( !_$isProbability_115( p ) ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return _$FLOAT64_NINF_81;
	}
	if ( p === 1.0 ) {
		return _$FLOAT64_PINF_85;
	}
	return _$ln_545( p / ( 1.0-p ) );
}


// EXPORTS //

var _$logit_571 = logit;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the logit function.
*
* @module @stdlib/math/base/special/logit
*
* @example
* var logit = require( '@stdlib/math/base/special/logit' );
*
* var y = logit( 0.2 );
* // returns ~-1.386
*
* y = logit( 0.9 );
* // returns ~2.197
*
* y = logit( -4.0 );
* // returns NaN
*
* y = logit( 1.5 );
* // returns NaN
*
* y = logit( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$logit_571 = require( './logit.js' ); */;


// EXPORTS //

var _$logit_570 = _$logit_571;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable id-length */

'use strict';

/**
* Maximum safe nth Lucas number when stored in double-precision floating-point format.
*
* @module @stdlib/constants/math/float64-max-safe-nth-lucas
* @type {integer}
*
* @example
* var FLOAT64_MAX_SAFE_NTH_LUCAS = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' );
* // returns 76
*/


// MAIN //

/**
* The maximum safe nth Lucas number when stored in double-precision floating-point format.
*
* @constant
* @type {integer}
* @default 76
* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_NTH_LUCAS = 76|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_SAFE_NTH_LUCAS_74 = FLOAT64_MAX_SAFE_NTH_LUCAS;

var _$lucas_573=[2,1,3,4,7,11,18,29,47,76,123,199,322,521,843,1364,2207,3571,5778,9349,15127,24476,39603,64079,103682,167761,271443,439204,710647,1149851,1860498,3010349,4870847,7881196,12752043,20633239,33385282,54018521,87403803,141422324,228826127,370248451,599074578,969323029,1568397607,2537720636,4106118243,6643838879,10749957122,17393796001,28143753123,45537549124,73681302247,119218851371,192900153618,312119004989,505019158607,817138163596,1322157322203,2139295485799,3461452808002,5600748293801,9062201101803,14662949395604,23725150497407,38388099893011,62113250390418,100501350283429,162614600673847,263115950957276,425730551631123,688846502588399,1114577054219522,1803423556807921,2918000611027443,4721424167835364,7639424778862807]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_NTH_LUCAS_74 = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' ); */;
/* removed: var _$lucas_573 = require( './lucas.json' ); */;


// MAIN //

/**
* Computes the nth Lucas number.
*
* @param {NonNegativeInteger} n - the Lucas number to compute
* @returns {NonNegativeInteger} Lucas number
*
* @example
* var y = lucas( 0 );
* // returns 2
*
* @example
* var y = lucas( 1 );
* // returns 1
*
* @example
* var y = lucas( 2 );
* // returns 3
*
* @example
* var y = lucas( 3 );
* // returns 4
*
* @example
* var y = lucas( 4 );
* // returns 7
*
* @example
* var y = lucas( 5 );
* // returns 11
*
* @example
* var y = lucas( 6 );
* // returns 18
*
* @example
* var y = lucas( NaN );
* // returns NaN
*
* @example
* var y = lucas( 3.14 );
* // returns NaN
*
* @example
* var y = lucas( -1.0 );
* // returns NaN
*/
function lucas( n ) {
	if (
		_$isnan_103( n ) ||
		_$isInteger_101( n ) === false ||
		n < 0 ||
		n > _$FLOAT64_MAX_SAFE_NTH_LUCAS_74
	) {
		return NaN;
	}
	return _$lucas_573[ n ];
}


// EXPORTS //

var _$lucas_574 = lucas;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth Lucas number.
*
* @module @stdlib/math/base/special/lucas
*
* @example
* var lucas = require( '@stdlib/math/base/special/lucas' );
*
* var y = lucas( 0 );
* // returns 2
*
* y = lucas( 1 );
* // returns 1
*
* y = lucas( 2 );
* // returns 3
*
* y = lucas( 3 );
* // returns 4
*
* y = lucas( 4 );
* // returns 7
*
* y = lucas( 5 );
* // returns 11
*
* y = lucas( 6 );
* // returns 18
*/

// MODULES //

/* removed: var _$lucas_574 = require( './main.js' ); */;


// EXPORTS //

var _$lucas_572 = _$lucas_574;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeZero_107 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$isPositiveZero_113 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum and maximum values.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {number} x - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {(Array|TypedArray|Object)} minimum and maximum values
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 3.14, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, +0.0, -0.0 );
* // returns [ -0.0, 0.0 ]
*/
function minmax( out, x, y ) {
	var len;
	var min;
	var max;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		out[ 0 ] = x;
		out[ 1 ] = x;
		return out;
	}
	if ( len === 3 ) {
		if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isNegativeZero_107( x ) ) {
				out[ 0 ] = x;
				out[ 1 ] = y;
				return out;
			}
			out[ 0 ] = y;
			out[ 1 ] = x;
			return out;
		}
		if ( x < y ) {
			out[ 0 ] = x;
			out[ 1 ] = y;
			return out;
		}
		out[ 0 ] = y;
		out[ 1 ] = x;
		return out;
	}
	min = _$FLOAT64_PINF_85;
	max = _$FLOAT64_NINF_81;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_103( v ) ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		if ( v < min ) {
			min = v;
		} else if (
			v === 0.0 &&
			v === min &&
			_$isNegativeZero_107( v )
		) {
			min = v;
		}
		if ( v > max ) {
			max = v;
		} else if (
			v === 0.0 &&
			v === max &&
			_$isPositiveZero_113( v )
		) {
			max = v;
		}
	}
	out[ 0 ] = min;
	out[ 1 ] = max;
	return out;
}


// EXPORTS //

var _$minmax_585 = minmax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$minmax_585 = require( './minmax.js' ); */;


// MAIN //

/**
* Returns the minimum and maximum values.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {number} x - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {(Array|TypedArray|Object)} minimum and maximum values
*
* @example
* var v = minmax( 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = minmax( 3.14, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var v = minmax( +0.0, -0.0 );
* // returns [ -0.0, 0.0 ]
*/
function __minmax_584( out, x, y ) {
	var bool;
	var args;
	var len;
	var i;
	var j;

	len = arguments.length;
	if ( len === 1 ) {
		return _$minmax_585( new Array( 2 ), out );
	}
	bool = ( typeof arguments[ 0 ] === 'number' );
	if ( len === 2 ) {
		if ( bool ) {
			return _$minmax_585( new Array( 2 ), out, x );
		}
		return _$minmax_585( out, x );
	}
	if ( len === 3 ) {
		if ( bool ) {
			return _$minmax_585( new Array( 2 ), out, x, y );
		}
		return _$minmax_585( out, x, y );
	}
	if ( bool ) {
		args = new Array( len+1 );
		args[ 0 ] = new Array( 2 );
		i = 0;
	} else {
		args = new Array( len );
		args[ 0 ] = arguments[ 0 ];
		i = 1;
	}
	j = 1;
	for ( ; i < len; i++ ) {
		args[ j ] = arguments[ i ];
		j += 1;
	}
	return _$minmax_585.apply( null, args );
}


// EXPORTS //

var _$minmax_584 = __minmax_584;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum and maximum values.
*
* @module @stdlib/math/base/special/minmax
*
* @example
* var minmax = require( '@stdlib/math/base/special/minmax' );
*
* var v = minmax( 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* v = minmax( 5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* v = minmax( 3.14, NaN );
* // returns [ NaN, NaN ]
*
* v = minmax( +0.0, -0.0 );
* // returns [ -0.0, 0.0 ]
*
* v = minmax( 3.14 );
* // returns [ 3.14, 3.14 ]
*/

// MODULES //

/* removed: var _$minmax_584 = require( './main.js' ); */;


// EXPORTS //

var _$minmax_583 = _$minmax_584;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum and maximum absolute values.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {number} x - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {(Array|TypedArray|Object)} minimum and maximum absolute values
*
* @example
* var out = new Array( 2 );
* var v = minmaxabs( out, 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = new Array( 2 );
* var v = minmaxabs( out, -5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* @example
* var out = new Array( 2 );
* var v = minmaxabs( out, 3.14, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var out = new Array( 2 );
* var v = minmaxabs( out, +0.0, -0.0 );
* // returns [ 0.0, 0.0 ]
*/
function minmaxabs( out, x, y ) {
	var len;
	var min;
	var max;
	var ax;
	var ay;
	var av;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		ax = _$abs_118( x );
		out[ 0 ] = ax;
		out[ 1 ] = ax;
		return out;
	}
	if ( len === 3 ) {
		if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		ax = _$abs_118( x );
		ay = _$abs_118( y );
		if ( ax < ay ) {
			out[ 0 ] = ax;
			out[ 1 ] = ay;
			return out;
		}
		out[ 0 ] = ay;
		out[ 1 ] = ax;
		return out;
	}
	min = _$FLOAT64_PINF_85;
	max = 0.0;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_103( v ) ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		av = _$abs_118( v );
		if ( av < min ) {
			min = av;
		}
		if ( av > max ) {
			max = av;
		}
	}
	out[ 0 ] = min;
	out[ 1 ] = max;
	return out;
}


// EXPORTS //

var _$minmaxabs_588 = minmaxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$minmaxabs_588 = require( './minmaxabs.js' ); */;


// MAIN //

/**
* Returns the minimum and maximum absolute values.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {number} x - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {(Array|TypedArray|Object)} minimum and maximum absolute values
*
* @example
* var v = minmaxabs( 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* @example
* var out = new Array( 2 );
* var v = minmaxabs( out, -5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = minmaxabs( 3.14, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var v = minmaxabs( +0.0, -0.0 );
* // returns [ 0.0, 0.0 ]
*/
function __minmaxabs_587( out, x, y ) {
	var bool;
	var args;
	var len;
	var i;
	var j;

	len = arguments.length;
	if ( len === 1 ) {
		return _$minmaxabs_588( new Array( 2 ), out );
	}
	bool = ( typeof arguments[ 0 ] === 'number' );
	if ( len === 2 ) {
		if ( bool ) {
			return _$minmaxabs_588( new Array( 2 ), out, x );
		}
		return _$minmaxabs_588( out, x );
	}
	if ( len === 3 ) {
		if ( bool ) {
			return _$minmaxabs_588( new Array( 2 ), out, x, y );
		}
		return _$minmaxabs_588( out, x, y );
	}
	if ( bool ) {
		args = new Array( len+1 );
		args[ 0 ] = new Array( 2 );
		i = 0;
	} else {
		args = new Array( len );
		args[ 0 ] = arguments[ 0 ];
		i = 1;
	}
	j = 1;
	for ( ; i < len; i++ ) {
		args[ j ] = arguments[ i ];
		j += 1;
	}
	return _$minmaxabs_588.apply( null, args );
}


// EXPORTS //

var _$minmaxabs_587 = __minmaxabs_587;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum and maximum absolute values.
*
* @module @stdlib/math/base/special/minmaxabs
*
* @example
* var minmaxabs = require( '@stdlib/math/base/special/minmaxabs' );
*
* var v = minmaxabs( 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* v = minmaxabs( -5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* v = minmaxabs( 3.14, NaN );
* // returns [ NaN, NaN ]
*
* v = minmaxabs( +0.0, -0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = minmaxabs( 3.14 );
* // returns [ 3.14, 3.14 ]
*/

// MODULES //

/* removed: var _$minmaxabs_587 = require( './main.js' ); */;


// EXPORTS //

var _$minmaxabs_586 = _$minmaxabs_587;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the significand of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-significand-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants/math/float64-high-word-significand-mask' );
* // returns 1048575
*/


// MAIN //

/**
* High word mask for the significand of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 1048575 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000000 11111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 0x000fffff
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;


// EXPORTS //

var _$FLOAT64_HIGH_WORD_SIGNIFICAND_MASK_64 = FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$toWords_778 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$fromWords_758 = require( '@stdlib/number/float64/base/from-words' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_58 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_63 = require( '@stdlib/constants/math/float64-high-word-exponent-mask' ); */; // eslint-disable-line id-length
/* removed: var _$FLOAT64_HIGH_WORD_SIGNIFICAND_MASK_64 = require( '@stdlib/constants/math/float64-high-word-significand-mask' ); */; // eslint-disable-line id-length


// VARIABLES //

// 4294967295 => 0xffffffff => 11111111111111111111111111111111
var ALL_ONES = 4294967295>>>0; // asm type annotation

// High/low words workspace:
var __WORDS_591 = [ 0|0, 0|0 ]; // WARNING: not thread safe


// MAIN //

/**
* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var parts = modf( new Array( 2 ), 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*/
function modf( out, x ) {
	var high;
	var low;
	var exp;
	var i;

	// Special cases...
	if ( x < 1.0 ) {
		if ( x < 0.0 ) {
			modf( out, -x );
			out[ 0 ] *= -1.0;
			out[ 1 ] *= -1.0;
			return out;
		}
		if ( x === 0.0 ) { // [ +-0, +-0 ]
			out[ 0 ] = x;
			out[ 1 ] = x;
			return out;
		}
		out[ 0 ] = 0.0;
		out[ 1 ] = x;
		return out;
	}
	if ( _$isnan_103( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x === _$FLOAT64_PINF_85 ) {
		out[ 0 ] = _$FLOAT64_PINF_85;
		out[ 1 ] = 0.0;
		return out;
	}
	// Decompose |x|...

	// Extract the high and low words:
	_$toWords_778( __WORDS_591, x );
	high = __WORDS_591[ 0 ];
	low = __WORDS_591[ 1 ];

	// Extract the unbiased exponent from the high word:
	exp = ((high & _$FLOAT64_HIGH_WORD_EXPONENT_MASK_63) >> 20)|0; // asm type annotation
	exp -= _$FLOAT64_EXPONENT_BIAS_58|0; // asm type annotation

	// Handle smaller values (x < 2**20 = 1048576)...
	if ( exp < 20 ) {
		i = (_$FLOAT64_HIGH_WORD_SIGNIFICAND_MASK_64 >> exp)|0; // asm type annotation

		// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...
		if ( ((high&i)|low) === 0 ) {
			out[ 0 ] = x;
			out[ 1 ] = 0.0;
			return out;
		}
		// Turn off all the bits which cannot be exponentiated away:
		high &= (~i);

		// Generate the integral part:
		i = _$fromWords_758( high, 0 );

		// The fractional part is whatever is leftover:
		out[ 0 ] = i;
		out[ 1 ] = x - i;
		return out;
	}
	// Check if `x` can even have a fractional part...
	if ( exp > 51 ) {
		// `x` is integral:
		out[ 0 ] = x;
		out[ 1 ] = 0.0;
		return out;
	}
	i = ALL_ONES >>> (exp-20);

	// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...
	if ( (low&i) === 0 ) {
		out[ 0 ] = x;
		out[ 1 ] = 0.0;
		return out;
	}
	// Turn off all the bits which cannot be exponentiated away:
	low &= (~i);

	// Generate the integral part:
	i = _$fromWords_758( high, low );

	// The fractional part is whatever is leftover:
	out[ 0 ] = i;
	out[ 1 ] = x - i;
	return out;
}


// EXPORTS //

var _$modf_591 = modf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$modf_591 = require( './modf.js' ); */;


// MAIN //

/**
* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var parts = modf( 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var parts = modf( out, 3.14 );
* // returns <Float64Array>[ 3.0, 0.14000000000000012 ]
*
* var bool = ( parts === out );
* // returns true
*/
function __modf_590( out, x ) {
	if ( arguments.length === 1 ) {
		return _$modf_591( [ 0.0, 0.0 ], out );
	}
	return _$modf_591( out, x );
}


// EXPORTS //

var _$modf_590 = __modf_590;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Decompose a double-precision floating-point number into integral and fractional parts.
*
* @module @stdlib/math/base/special/modf
*
* @example
* var modf = require( '@stdlib/math/base/special/modf' );
*
* var parts = modf( 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var modf = require( '@stdlib/math/base/special/modf' );
*
* var out = new Float64Array( 2 );
*
* var parts = modf( out, 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*
* var bool = ( parts === out );
* // returns true
*/

// MODULES //

/* removed: var _$modf_590 = require( './main.js' ); */;


// EXPORTS //

var _$modf_589 = _$modf_590;

var _$negafibonacci_593=[0,1,-1,2,-3,5,-8,13,-21,34,-55,89,-144,233,-377,610,-987,1597,-2584,4181,-6765,10946,-17711,28657,-46368,75025,-121393,196418,-317811,514229,-832040,1346269,-2178309,3524578,-5702887,9227465,-14930352,24157817,-39088169,63245986,-102334155,165580141,-267914296,433494437,-701408733,1134903170,-1836311903,2971215073,-4807526976,7778742049,-12586269025,20365011074,-32951280099,53316291173,-86267571272,139583862445,-225851433717,365435296162,-591286729879,956722026041,-1548008755920,2504730781961,-4052739537881,6557470319842,-10610209857723,17167680177565,-27777890035288,44945570212853,-72723460248141,117669030460994,-190392490709135,308061521170129,-498454011879264,806515533049393,-1304969544928657,2111485077978050,-3416454622906707,5527939700884757,-8944394323791464]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_NTH_FIBONACCI_73 = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' ); */;
/* removed: var _$negafibonacci_593 = require( './negafibonacci.json' ); */;


// MAIN //

/**
* Computes the nth negaFibonacci number.
*
* @param {NonPositiveInteger} n - the negaFibonacci number to compute
* @returns {integer} negaFibonacci number
*
* @example
* var y = negafibonacci( 0 );
* // returns 0
*
* @example
* var y = negafibonacci( -1 );
* // returns 1
*
* @example
* var y = negafibonacci( -2 );
* // returns -1
*
* @example
* var y = negafibonacci( -3 );
* // returns 2
*
* @example
* var y = negafibonacci( -4 );
* // returns -3
*
* @example
* var y = negafibonacci( -5 );
* // returns 5
*
* @example
* var y = negafibonacci( -6 );
* // returns -8
*
* @example
* var y = negafibonacci( NaN );
* // returns NaN
*
* @example
* var y = negafibonacci( -3.14 );
* // returns NaN
*/
function negafibonacci( n ) {
	var an;
	if (
		_$isnan_103( n ) ||
		_$isInteger_101( n ) === false ||
		n > 0
	) {
		return NaN;
	}
	an = _$abs_118( n );
	if ( an > _$FLOAT64_MAX_SAFE_NTH_FIBONACCI_73 ) {
		return NaN;
	}
	return _$negafibonacci_593[ an ];
}


// EXPORTS //

var _$negafibonacci_594 = negafibonacci;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth negaFibonacci number.
*
* @module @stdlib/math/base/special/negafibonacci
*
* @example
* var negafibonacci = require( '@stdlib/math/base/special/negafibonacci' );
*
* var y = negafibonacci( 0 );
* // returns 0
*
* y = negafibonacci( -1 );
* // returns 1
*
* y = negafibonacci( -2 );
* // returns -1
*
* y = negafibonacci( -3 );
* // returns 2
*
* y = negafibonacci( -4 );
* // returns -3
*
* y = negafibonacci( -5 );
* // returns 5
*
* y = negafibonacci( -6 );
* // returns -8
*/

// MODULES //

/* removed: var _$negafibonacci_594 = require( './negafibonacci.js' ); */;


// EXPORTS //

var _$negafibonacci_592 = _$negafibonacci_594;

var _$negalucas_597=[2,-1,3,-4,7,-11,18,-29,47,-76,123,-199,322,-521,843,-1364,2207,-3571,5778,-9349,15127,-24476,39603,-64079,103682,-167761,271443,-439204,710647,-1149851,1860498,-3010349,4870847,-7881196,12752043,-20633239,33385282,-54018521,87403803,-141422324,228826127,-370248451,599074578,-969323029,1568397607,-2537720636,4106118243,-6643838879,10749957122,-17393796001,28143753123,-45537549124,73681302247,-119218851371,192900153618,-312119004989,505019158607,-817138163596,1322157322203,-2139295485799,3461452808002,-5600748293801,9062201101803,-14662949395604,23725150497407,-38388099893011,62113250390418,-100501350283429,162614600673847,-263115950957276,425730551631123,-688846502588399,1114577054219522,-1803423556807921,2918000611027443,-4721424167835364,7639424778862807]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_NTH_LUCAS_74 = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' ); */;
/* removed: var _$negalucas_597 = require( './negalucas.json' ); */;


// MAIN //

/**
* Computes the nth negaLucas number.
*
* @param {NonPositiveInteger} n - the negaLucas number to compute
* @returns {integer} negaLucas number
*
* @example
* var y = negalucas( 0 );
* // returns 2
*
* @example
* var y = negalucas( -1 );
* // returns -1
*
* @example
* var y = negalucas( -2 );
* // returns 3
*
* @example
* var y = negalucas( -3 );
* // returns -4
*
* @example
* var y = negalucas( -4 );
* // returns 7
*
* @example
* var y = negalucas( -5 );
* // returns -11
*
* @example
* var y = negalucas( -6 );
* // returns 18
*
* @example
* var y = negalucas( NaN );
* // returns NaN
*
* @example
* var y = negalucas( -3.14 );
* // returns NaN
*/
function negalucas( n ) {
	var an;
	if (
		_$isnan_103( n ) ||
		_$isInteger_101( n ) === false ||
		n > 0
	) {
		return NaN;
	}
	an = _$abs_118( n );
	if ( an > _$FLOAT64_MAX_SAFE_NTH_LUCAS_74 ) {
		return NaN;
	}
	return _$negalucas_597[ an ];
}


// EXPORTS //

var _$negalucas_596 = negalucas;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth negaLucas number.
*
* @module @stdlib/math/base/special/negalucas
*
* @example
* var negalucas = require( '@stdlib/math/base/special/negalucas' );
*
* var y = negalucas( 0 );
* // returns 2
*
* y = negalucas( -1 );
* // returns -1
*
* y = negalucas( -2 );
* // returns 3
*
* y = negalucas( -3 );
* // returns -4
*
* y = negalucas( -4 );
* // returns 7
*
* y = negalucas( -5 );
* // returns -11
*
* y = negalucas( -6 );
* // returns 18
*/

// MODULES //

/* removed: var _$negalucas_596 = require( './main.js' ); */;


// EXPORTS //

var _$negalucas_595 = _$negalucas_596;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_101 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$PHI_82 = require( '@stdlib/constants/math/float64-phi' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

var __SQRT_5_599 = 2.23606797749979;
var __LN_PHI_599 = _$ln_545( _$PHI_82 );


// MAIN //

/**
* Computes the nth non-Fibonacci number.
*
* ## References
*
* -   Gould, H.W. 1965. "Non-Fibonacci Numbers." _Fibonacci Quarterly_, no. 3: 177–83. <http://www.fq.math.ca/Scanned/3-3/gould.pdf>.
* -   Farhi, Bakir. 2011. "An explicit formula generating the non-Fibonacci numbers." _arXiv_ abs/1105.1127 \[Math.NT\] (May): 1–5. <https://arxiv.org/abs/1105.1127>.
*
*
* @param {NonNegativeInteger} n - the non-Fibonacci number to compute
* @returns {NonNegativeInteger} non-Fibonacci number
*
* @example
* var v = nonfibonacci( 1 );
* // returns 4
*
* @example
* var v = nonfibonacci( 2 );
* // returns 6
*
* @example
* var v = nonfibonacci( 3 );
* // returns 7
*
* @example
* var v = nonfibonacci( NaN );
* // returns NaN
*
* @example
* var v = nonfibonacci( 3.14 );
* // returns NaN
*
* @example
* var v = nonfibonacci( -1 );
* // returns NaN
*/
function nonfibonacci( n ) {
	var a;
	var b;
	if (
		_$isnan_103( n ) ||
		_$isInteger_101( n ) === false ||
		n < 1 ||
		n === _$FLOAT64_PINF_85
	) {
		return NaN;
	}
	n += 1;
	a = _$ln_545( n * __SQRT_5_599 ) / __LN_PHI_599;
	b = _$ln_545( (__SQRT_5_599 * (n+a)) - 5.0 + (3.0/n) ) / __LN_PHI_599;
	return _$floor_346( n + b - 2.0 );
}


// EXPORTS //

var _$nonfibonacci_599 = nonfibonacci;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the nth non-Fibonacci number.
*
* @module @stdlib/math/base/special/nonfibonacci
*
* @example
* var nonfibonacci = require( '@stdlib/math/base/special/nonfibonacci' );
*
* var v = nonfibonacci( 1 );
* // returns 4
*
* v = nonfibonacci( 2 );
* // returns 6
*
* v = nonfibonacci( 3 );
* // returns 7
*/

// MODULES //

/* removed: var _$nonfibonacci_599 = require( './main.js' ); */;


// EXPORTS //

var _$nonfibonacci_598 = _$nonfibonacci_599;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the positive difference between `x` and `y` if `x > y`; otherwise, returns `0`.
*
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} positive difference
*
* @example
* var v = pdiff( 5.9, 3.14 );
* // returns 2.76
*
* @example
* var v = pdiff( 3.14, 4.2 );
* // returns 0.0
*
* @example
* var v = pdiff( 3.14, NaN );
* // returns NaN
*
* @example
* var v = pdiff( -0.0, +0.0 );
* // returns +0.0
*/
function pdiff( x, y ) {
	if ( _$isnan_103( x ) || _$isnan_103( y ) ) {
		return NaN;
	}
	if ( x > y ) {
		return x - y;
	}
	return 0.0;
}


// EXPORTS //

var _$pdiff_601 = pdiff;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the positive difference between `x` and `y` if `x > y`; otherwise, return `0`.
*
* @module @stdlib/math/base/special/pdiff
*
* @example
* var pdiff = require( '@stdlib/math/base/special/pdiff' );
*
* var v = pdiff( 5.9, 3.14 );
* // returns 2.76
*
* v = pdiff( 3.14, 4.2 );
* // returns 0.0
*
* v = pdiff( 3.14, NaN );
* // returns NaN
*
* v = pdiff( -0.0, +0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$pdiff_601 = require( './pdiff.js' ); */;


// EXPORTS //

var _$pdiff_600 = _$pdiff_601;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi-squared
* @type {number}
*
* @example
* var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );
* // returns 9.869604401089358
*/


// MAIN //

/**
* Square of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 9.869604401089358
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len


// EXPORTS //

var _$PI_SQUARED_83 = PI_SQUARED;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_713( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.9999999999999991;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.9999999999999991 + (x * (-4.712373111208652 + (x * (-7.94125711970499 + (x * (-5.746577466976647 + (x * (-0.4042133494563989 + (x * (2.4787778117864288 + (x * (2.0771415170245513 + (x * (0.8588778991623601 + (x * (0.20499222604410033 + (x * (0.027210314034819473 + (x * 0.001576484902087695))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (4.712373111208634 + (x * (9.586191186553398 + (x * (11.094006726982938 + (x * (8.090754247493278 + (x * (3.877058901598914 + (x * (1.2275867870191448 + (x * (0.249092040606385 + (x * (0.02957504139006556 + (x * (0.0015764849020049815 + (x * 1.6126405034405948e-15))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.001576484902087695 + (x * (0.027210314034819473 + (x * (0.20499222604410033 + (x * (0.8588778991623601 + (x * (2.0771415170245513 + (x * (2.4787778117864288 + (x * (-0.4042133494563989 + (x * (-5.746577466976647 + (x * (-7.94125711970499 + (x * (-4.712373111208652 + (x * -0.9999999999999991))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.6126405034405948e-15 + (x * (0.0015764849020049815 + (x * (0.02957504139006556 + (x * (0.249092040606385 + (x * (1.2275867870191448 + (x * (3.877058901598914 + (x * (8.090754247493278 + (x * (11.094006726982938 + (x * (9.586191186553398 + (x * (4.712373111208634 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_713 = __evalrational_713;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_715( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -2.5584373473990794;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -2.5584373473990794 + (x * (-12.283020824054201 + (x * (-23.9195022162768 + (x * (-24.925643150482347 + (x * (-14.797912276547878 + (x * (-4.466544539286106 + (x * (-0.01914390334056497 + (x * (0.5154120525543513 + (x * (0.1953783487860643 + (x * (0.03347612826241743 + (x * (0.0023736652059422065 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (4.800985584544199 + (x * (9.992207278431701 + (x * (11.889614616763133 + (x * (8.966132566838091 + (x * (4.4725413614962415 + (x * (1.4860098202819654 + (x * (0.31957073576676426 + (x * (0.040735834578768094 + (x * (0.0023736652059327163 + (x * (2.3955488790352614e-16 + (x * -2.9474924474061867e-18))))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0023736652059422065 + (x * (0.03347612826241743 + (x * (0.1953783487860643 + (x * (0.5154120525543513 + (x * (-0.01914390334056497 + (x * (-4.466544539286106 + (x * (-14.797912276547878 + (x * (-24.925643150482347 + (x * (-23.9195022162768 + (x * (-12.283020824054201 + (x * -2.5584373473990794))))))))))))))))))))); // eslint-disable-line max-len
		s2 = -2.9474924474061867e-18 + (x * (2.3955488790352614e-16 + (x * (0.0023736652059327163 + (x * (0.040735834578768094 + (x * (0.31957073576676426 + (x * (1.4860098202819654 + (x * (4.4725413614962415 + (x * (8.966132566838091 + (x * (11.889614616763133 + (x * (9.992207278431701 + (x * (4.800985584544199 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_715 = __evalrational_715;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_716( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.6662611269702147e-17;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.6662611269702147e-17 + (x * (0.4999999999999977 + (x * (6.402709450190538 + (x * (41.38333741550006 + (x * (166.8033418545628 + (x * (453.39964786925367 + (x * (851.153712317697 + (x * (1097.7065756728507 + (x * (938.4312324784553 + (x * (487.26800160465194 + (x * 119.95344524233573))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (12.472085567047449 + (x * (78.60931297532986 + (x * (307.47024605031834 + (x * (805.1406861011516 + (x * (1439.1201976029215 + (x * (1735.6105285756048 + (x * (1348.3250071285634 + (x * (607.2259858605709 + (x * (119.95231785727705 + (x * 0.00014016591835503607))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 119.95344524233573 + (x * (487.26800160465194 + (x * (938.4312324784553 + (x * (1097.7065756728507 + (x * (851.153712317697 + (x * (453.39964786925367 + (x * (166.8033418545628 + (x * (41.38333741550006 + (x * (6.402709450190538 + (x * (0.4999999999999977 + (x * 1.6662611269702147e-17))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.00014016591835503607 + (x * (119.95231785727705 + (x * (607.2259858605709 + (x * (1348.3250071285634 + (x * (1735.6105285756048 + (x * (1439.1201976029215 + (x * (805.1406861011516 + (x * (307.47024605031834 + (x * (78.60931297532986 + (x * (12.472085567047449 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_716 = __evalrational_716;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_717( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -1.848283152741466e-20;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1.848283152741466e-20 + (x * (0.5 + (x * (3.0253386524731334 + (x * (13.599592751745737 + (x * (35.31322242830879 + (x * (67.16394245507142 + (x * (83.5767733658514 + (x * (71.07349121223571 + (x * (35.86215156147256 + (x * 8.721522316399835))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (5.717343971612935 + (x * (25.29340417962044 + (x * (62.26197679674682 + (x * (113.955048909239 + (x * (130.80713832893898 + (x * (102.42314690233765 + (x * (44.04247728052452 + (x * (8.89898032477904 + (x * -0.029662733687204))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 8.721522316399835 + (x * (35.86215156147256 + (x * (71.07349121223571 + (x * (83.5767733658514 + (x * (67.16394245507142 + (x * (35.31322242830879 + (x * (13.599592751745737 + (x * (3.0253386524731334 + (x * (0.5 + (x * -1.848283152741466e-20))))))))))))))))); // eslint-disable-line max-len
		s2 = -0.029662733687204 + (x * (8.89898032477904 + (x * (44.04247728052452 + (x * (102.42314690233765 + (x * (130.80713832893898 + (x * (113.955048909239 + (x * (62.26197679674682 + (x * (25.29340417962044 + (x * (5.717343971612935 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_717 = __evalrational_717;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_714( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.0 + (x * (0.5 + (x * (0.34562566988545623 + (x * (9.628954993608422 + (x * (3.5936085382439025 + (x * (49.45959911843888 + (x * (7.775192373218939 + (x * (74.4536074488178 + (x * (2.7520934039706906 + (x * (23.92923597114717 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.3579180064375791 + (x * (19.138603985070986 + (x * (0.8743490814641436 + (x * (98.65160974348555 + (x * (-16.10519728333829 + (x * (154.31686021625373 + (x * (-40.2026880424379 + (x * (60.167913667426475 + (x * (-13.341484462225642 + (x * 2.537956362006499))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (23.92923597114717 + (x * (2.7520934039706906 + (x * (74.4536074488178 + (x * (7.775192373218939 + (x * (49.45959911843888 + (x * (3.5936085382439025 + (x * (9.628954993608422 + (x * (0.34562566988545623 + (x * (0.5 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 2.537956362006499 + (x * (-13.341484462225642 + (x * (60.167913667426475 + (x * (-40.2026880424379 + (x * (154.31686021625373 + (x * (-16.10519728333829 + (x * (98.65160974348555 + (x * (0.8743490814641436 + (x * (19.138603985070986 + (x * (0.3579180064375791 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_714 = __evalrational_714;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/trigamma.hpp}. The implementation follows the original but has been reformatted and modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$sinpi_697 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_SQUARED_83 = require( '@stdlib/constants/math/float64-pi-squared' ); */;
/* removed: var _$evalrational_713 = require( './rational_p12q12.js' ); */;
/* removed: var _$evalrational_715 = require( './rational_p24q24.js' ); */;
/* removed: var _$evalrational_716 = require( './rational_p48q48.js' ); */;
/* removed: var _$evalrational_717 = require( './rational_p816q816.js' ); */;
/* removed: var _$evalrational_714 = require( './rational_p16infq16inf.js' ); */;


// VARIABLES //

var YOFFSET24 = 3.558437347412109375;


// MAIN //

/**
* Evaluates the trigamma function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = trigamma( -2.5 );
* // returns ~9.539
*
* @example
* var v = trigamma( 1.0 );
* // returns ~1.645
*
* @example
* var v = trigamma( 10.0 );
* // returns ~0.105
*
* @example
* var v = trigamma( NaN );
* // returns NaN
*
* @example
* var v = trigamma( -1.0 );
* // returns NaN
*/
function trigamma( x ) {
	var result;
	var s;
	var y;
	var z;

	result = 0.0;

	// Check for negative arguments and use reflection:
	if ( x <= 0 ) {
		if ( _$floor_346( x ) === x ) {
			return NaN;
		}
		s = _$sinpi_697( x );
		z = 1.0 - x;
		return -trigamma( z ) + ( _$PI_SQUARED_83 / ( s*s ) );
	}
	if ( x < 1.0 ) {
		result = 1.0 / ( x*x );
		x += 1.0;
	}
	if ( x <= 2.0 ) {
		result += ( 2.0+_$evalrational_713( x ) ) / ( x*x );
	}
	else if ( x <= 4.0 ) {
		result += ( YOFFSET24+_$evalrational_715( x ) ) / ( x*x );
	}
	else if ( x <= 8.0 ) {
		y = 1.0 / x;
		result += ( 1.0+_$evalrational_716( y ) ) / x;
	}
	else if ( x <= 16.0 ) {
		y = 1.0 / x;
		result += ( 1.0+_$evalrational_717( y ) ) / x;
	}
	else {
		y = 1.0 / x;
		result += ( 1.0+_$evalrational_714( y ) ) / x;
	}
	return result;
}


// EXPORTS //

var _$trigamma_718 = trigamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the trigamma function.
*
* @module @stdlib/math/base/special/trigamma
*
* @example
* var trigamma = require( '@stdlib/math/base/special/trigamma' );
*
* var v = trigamma( -2.5 );
* // returns ~9.539
*
* v = trigamma( 1.0 );
* // returns ~1.645
*
* v = trigamma( 10.0 );
* // returns ~0.105
*
* v = trigamma( NaN );
* // returns NaN
*
* v = trigamma( -1.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$trigamma_718 = require( './trigamma.js' ); */;


// EXPORTS //

var _$trigamma_712 = _$trigamma_718;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$bernoulli_155 = require( '@stdlib/math/base/special/bernoulli' ); */;
/* removed: var _$factorial_333 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var __debug_602 = _$browser_797( 'polygamma' );
var MAX_SERIES_ITERATIONS = 1000000;
var __MAX_FACTORIAL_602 = 172;


// MAIN //

/**
* Evaluates the polygamma function for large values of `x` such as for `x > 400`.
*
* @private
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input
* @returns {number} (n+1)'th derivative
* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/06/02/0001/}
*/
function atinfinityplus( n, x ) {
	var partTerm; // Value of current term excluding the Bernoulli number part
	var xsquared;
	var term; // Value of current term to be added to sum
	var sum; // Current value of accumulated sum
	var nlx;
	var k2;
	var k;

	if ( n+x === x ) {
		// If `x` is very large, just concentrate on the first part of the expression and use logs:
		if ( n === 1 ) {
			return 1.0 / x;
		}
		nlx = n * _$ln_545( x );
		if ( nlx < _$FLOAT64_MAX_LN_71 && n < __MAX_FACTORIAL_602 ) {
			return ( (n & 1) ? 1.0 : -1.0 ) * _$factorial_333( n-1 ) * _$pow_618( x, -n );
		}
		return ( (n & 1) ? 1.0 : -1.0 ) * _$exp_314( _$gammaln_445( n ) - ( n*_$ln_545(x) ) );
	}
	xsquared = x * x;

	// Start by setting `partTerm` to `(n-1)! / x^(n+1)`, which is common to both the first term of the series (with k = 1) and to the leading part. We can then get to the leading term by: `partTerm * (n + 2 * x) / 2` and to the first term in the series (excluding the Bernoulli number) by: `partTerm n * (n + 1) / (2x)`. If either the factorial would over- or the power term underflow, set `partTerm` to 0 and then we know that we have to use logs for the initial terms:
	if ( n > __MAX_FACTORIAL_602 && n*n > _$FLOAT64_MAX_LN_71 ) {
		partTerm = 0.0;
	} else {
		partTerm = _$factorial_333( n-1 ) * _$pow_618( x, -n-1 );
	}
	if ( partTerm === 0.0 ) {
		// Either `n` is very large, or the power term underflows. Set the initial values of `partTerm`, `term`, and `sum` via logs:
		partTerm = _$gammaln_445(n) - ( (n+1) * _$ln_545(x) );
		sum = _$exp_314( partTerm + _$ln_545( n + (2.0*x) ) - _$LN2_67 );
		partTerm += _$ln_545( n*(n+1) ) - _$LN2_67 - _$ln_545(x);
		partTerm = _$exp_314( partTerm );
	} else {
		sum = partTerm * ( n+(2.0*x) ) / 2.0;
		partTerm *= ( n*(n+1) ) / 2.0;
		partTerm /= x;
	}
	// If the leading term is 0, so is the result:
	if ( sum === 0.0 ) {
		return sum;
	}
	for ( k = 1; ; ) {
		term = partTerm * _$bernoulli_155( k*2 );
		sum += term;

		// Normal termination condition:
		if ( _$abs_118( term/sum ) < _$FLOAT64_EPSILON_56 ) {
			break;
		}

		// Increment our counter, and move `partTerm` on to the next value:
		k += 1;
		k2 = 2 * k;
		partTerm *= ( n+k2-2 ) * ( n-1+k2 );
		partTerm /= ( k2-1 ) * k2;
		partTerm /= xsquared;
		if ( k > MAX_SERIES_ITERATIONS ) {
			__debug_602( 'Series did not converge, closest value was: %d.', sum );
			return NaN;
		}
	}
	if ( ( n-1 ) & 1 ) {
		sum = -sum;
	}
	return sum;
}


// EXPORTS //

var _$atinfinityplus_602 = atinfinityplus;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$factorial_333 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$atinfinityplus_602 = require( './atinfinityplus.js' ); */;


// VARIABLES //

var __debug_603 = _$browser_797( 'polygamma' );
var __MAX_SERIES_ITERATIONS_603 = 1000000;
var DIGITS_BASE10 = 19;


// MAIN //

/**
* Evaluates the polygamma function.
*
* @private
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input
* @returns {number} (n+1)'th derivative
* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/16/01/01/0017/}
*/
function attransitionplus( n, x ) {
	var minusMminus1;
	var lnterm;
	var zpows;
	var iter;
	var sum0;
	var d4d;
	var N;
	var m;
	var k;
	var z;

	// Use N = (0.4 * digits) + (4 * n) for target value for x:
	d4d = 0.4 * DIGITS_BASE10;
	N = d4d + ( 4*n );
	m = n;
	iter = N - _$trunc_719( x );

	if ( iter > __MAX_SERIES_ITERATIONS_603 ) {
		__debug_603( 'Exceeded maximum series evaluations when evaluated at n = %d and x = %d', n, x );
		return NaN;
	}
	minusMminus1 = -m - 1;
	z = x;
	sum0 = 0.0;
	zpows = 0.0;

	// Forward recursion to larger `x`, need to check for overflow first though:
	if ( _$ln_545( z+iter ) * minusMminus1 > -_$FLOAT64_MAX_LN_71 ) {
		for ( k = 1; k <= iter; k++ ) {
			zpows = _$pow_618( z, minusMminus1 );
			sum0 += zpows;
			z += 1;
		}
		sum0 *= _$factorial_333( n );
	} else {
		for ( k = 1; k <= iter; k++ ) {
			lnterm = ( _$ln_545( z ) * minusMminus1 ) + _$gammaln_445( n+1 );
			sum0 += _$exp_314( lnterm );
			z += 1;
		}
	}
	if ( ( n-1 ) & 1 ) {
		sum0 = -sum0;
	}
	return sum0 + _$atinfinityplus_602( n, z );
}


// EXPORTS //

var _$attransitionplus_603 = attransitionplus;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-ln-pi
* @type {number}
*
* @example
* var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
* // returns 1.1447298858494002
*/


// MAIN //

/**
* Natural logarithm of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.1447298858494002
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var LN_PI = 1.1447298858494002;


// EXPORTS //

var _$LN_PI_65 = LN_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_611( x ) {
	if ( x === 0.0 ) {
		return -2.0;
	}
	return -2.0 + (x * -4.0);
}


// EXPORTS //

var _$evalpoly_611 = __evalpoly_611;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_612( x ) {
	if ( x === 0.0 ) {
		return 16.0;
	}
	return 16.0 + (x * 8.0);
}


// EXPORTS //

var _$evalpoly_612 = __evalpoly_612;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_613( x ) {
	if ( x === 0.0 ) {
		return -16.0;
	}
	return -16.0 + (x * (-88.0 + (x * -16.0)));
}


// EXPORTS //

var _$evalpoly_613 = __evalpoly_613;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_614( x ) {
	if ( x === 0.0 ) {
		return 272.0;
	}
	return 272.0 + (x * (416.0 + (x * 32.0)));
}


// EXPORTS //

var _$evalpoly_614 = __evalpoly_614;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_615( x ) {
	if ( x === 0.0 ) {
		return -272.0;
	}
	return -272.0 + (x * (-2880.0 + (x * (-1824.0 + (x * -64.0)))));
}


// EXPORTS //

var _$evalpoly_615 = __evalpoly_615;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_616( x ) {
	if ( x === 0.0 ) {
		return 7936.0;
	}
	return 7936.0 + (x * (24576.0 + (x * (7680.0 + (x * 128.0)))));
}


// EXPORTS //

var _$evalpoly_616 = __evalpoly_616;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_617( x ) {
	if ( x === 0.0 ) {
		return -7936.0;
	}
	return -7936.0 + (x * (-137216.0 + (x * (-185856.0 + (x * (-31616.0 + (x * -256.0))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_617 = __evalpoly_617;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_608( x ) {
	if ( x === 0.0 ) {
		return 353792.0;
	}
	return 353792.0 + (x * (1841152.0 + (x * (1304832.0 + (x * (128512.0 + (x * 512.0))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_608 = __evalpoly_608;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_609( x ) {
	if ( x === 0.0 ) {
		return -353792.0;
	}
	return -353792.0 + (x * (-9061376.0 + (x * (-21253376.0 + (x * (-8728576.0 + (x * (-518656.0 + (x * -1024.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_609 = __evalpoly_609;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_610( x ) {
	if ( x === 0.0 ) {
		return 22368256.0;
	}
	return 22368256.0 + (x * (175627264.0 + (x * (222398464.0 + (x * (56520704.0 + (x * (2084864.0 + (x * 2048.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_610 = __evalpoly_610;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$evalpoly_750 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$gammaln_445 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$signum_681 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$cospi_233 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$sinpi_697 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_71 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$LN_PI_65 = require( '@stdlib/constants/math/float64-ln-pi' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$evalpoly_611 = require( './polyval_p3.js' ); */;
/* removed: var _$evalpoly_612 = require( './polyval_p4.js' ); */;
/* removed: var _$evalpoly_613 = require( './polyval_p5.js' ); */;
/* removed: var _$evalpoly_614 = require( './polyval_p6.js' ); */;
/* removed: var _$evalpoly_615 = require( './polyval_p7.js' ); */;
/* removed: var _$evalpoly_616 = require( './polyval_p8.js' ); */;
/* removed: var _$evalpoly_617 = require( './polyval_p9.js' ); */;
/* removed: var _$evalpoly_608 = require( './polyval_p10.js' ); */;
/* removed: var _$evalpoly_609 = require( './polyval_p11.js' ); */;
/* removed: var _$evalpoly_610 = require( './polyval_p12.js' ); */;


// VARIABLES //

var __debug_606 = _$browser_797( 'polygamma' );
var __MAX_SERIES_ITERATIONS_606 = 1000000;

// π raised to powers two to twelve (obtained from Wolfram Alpha):
var PI2 = 9.869604401089358;
var PI3 = 31.00627668029982;
var PI4 = 97.40909103400244;
var PI5 = 306.01968478528147;
var PI6 = 961.3891935753045;
var PI7 = 3020.2932277767923;
var PI8 = 9488.531016070574;
var PI9 = 29809.09933344621;
var PI10 = 93648.04747608303;
var PI11 = 294204.0179738906;
var PI12 = 924269.1815233742;

// Derivative memoization table:
var table = [
	[ -1.0 ]
];


// FUNCTIONS //

/**
* Returns an array of zeros of the specified length.
*
* @private
* @param {NonNegativeInteger} len - array length
* @returns {Array} array of zeros
*/
function zeros( len ) {
	var out;
	var i;

	out = new Array( len );
	for ( i = 0; i < len; i++ ) {
		out[ i ] = 0.0;
	}
	return out;
}

/**
* Updates the derivatives table.
*
* @private
* @param {PositiveInteger} n - derivative
*/
function calculateDerivatives( n ) {
	var noffset; // offset for next row
	var offset; // 1 if the first cos power is 0; otherwise 0
	var ncols; // how many entries there are in the current row
	var mcols; // how many entries there will be in the next row
	var mo; // largest order of the polynomial of cos terms
	var so; // order of the sin term
	var co; // order of the cosine term in entry "j"
	var i;
	var j;
	var k;

	for ( i = table.length-1; i < n-1; i++ ) {
		offset = ( i&1 )|0;
		so = ( i+2 )|0;
		mo = ( so-1 )|0;
		ncols = ( (mo-offset)/2 )|0;
		noffset = ( offset ) ? 0 : 1;
		mcols = ( (mo+1-noffset)/2 )|0;
		table.push( zeros( mcols+1 ) );
		for ( j = 0; j <= ncols; j++ ) {
			co = ( (2*j)+offset )|0;
			k = ( (co+1)/2 )|0;
			table[ i+1 ][ k ] += ((co-so)*table[i][j]) / (so-1);
			if ( co ) {
				k = ( (co-1)/2 )|0;
				table[ i+1 ][ k ] += (-co*table[i][j]) / (so-1);
			}
		}
	}
}


// MAIN //

/**
* Returns n'th derivative of \\(\operatorname{cot|(\pi x)\\) at \\(x\\).
*
* ## Notes
*
* -   The derivatives are simply tabulated for up to \\(n = 9\\), beyond that it is possible to calculate coefficients as follows. The general form of each derivative is:
*
*     ```tex
*     \pi^n * \sum_{k=0}^n C[k,n] \cdot \cos^k(\pi \cdot x) \cdot \operatorname{csc}^{(n+1)}(\pi \cdot x)
*     ```
*
*     with constant \\( C\[0,1\] = -1 \\) and all other \\( C\[k,n\] = 0 \)). Then for each \\( k < n+1 \\):
*
*     ```tex
*     \begin{align*}
*     C[k-1, n+1]  &-= k * C[k, n]; \\
*     C[k+1, n+1]  &+= (k-n-1) * C[k, n];
*     \end{align*}
*     ```
*
* -   Note that there are many different ways of representing this derivative thanks to the many trigonometric identities available. In particular, the sum of powers of cosines could be replaced by a sum of cosine multiple angles, and, indeed, if you plug the derivative into Mathematica, this is the form it will give. The two forms are related via the Chebeshev polynomials of the first kind and \\( T_n(\cos(x)) = \cos(n x) \\). The polynomial form has the great advantage that all the cosine terms are zero at half integer arguments - right where this function has it's minimum - thus avoiding cancellation error in this region.
*
* -   And finally, since every other term in the polynomials is zero, we can save space by only storing the non-zero terms. This greatly increases complexity when subscripting the tables in the calculation, but halves the storage space (and complexity for that matter).
*
*
* @private
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input
* @param {number} xc - one minus `x`
* @returns {number} n'th derivative
*/
function polycotpi( n, x, xc ) {
	var powTerms;
	var idx;
	var out;
	var sum;
	var c;
	var s;

	s = ( _$abs_118( x ) < _$abs_118( xc ) ) ? _$sinpi_697( x ) : _$sinpi_697( xc );
	c = _$cospi_233( x );
	switch ( n ) { // eslint-disable-line default-case
	case 1:
		return -_$PI_84 / ( s * s );
	case 2:
		return 2.0 * PI2 * c / _$pow_618( s, 3.0 );
	case 3:
		return PI3 * _$evalpoly_611( c*c ) / _$pow_618( s, 4.0 );
	case 4:
		return PI4 * c * _$evalpoly_612( c*c ) / _$pow_618( s, 5.0 );
	case 5:
		return PI5 * _$evalpoly_613( c*c ) / _$pow_618( s, 6.0 );
	case 6:
		return PI6 * c * _$evalpoly_614( c*c ) / _$pow_618( s, 7.0 );
	case 7:
		return PI7 * _$evalpoly_615( c*c ) / _$pow_618( s, 8.0 );
	case 8:
		return PI8 * c * _$evalpoly_616( c*c ) / _$pow_618( s, 9.0 );
	case 9:
		return PI9 * _$evalpoly_617( c*c ) / _$pow_618( s, 10.0 );
	case 10:
		return PI10 * c * _$evalpoly_608( c*c ) / _$pow_618( s, 11.0 );
	case 11:
		return PI11 * _$evalpoly_609( c*c ) / _$pow_618( s, 12.0 );
	case 12:
		return PI12 * c * _$evalpoly_610( c*c ) / _$pow_618( s, 13.0 );
	}
	// We'll have to compute the coefficients up to `n`, complexity is O(n^2) which we don't worry about as the values are computed once and then cached. However, if the final evaluation would have too many terms just bail out right away:
	if ( n/2 > __MAX_SERIES_ITERATIONS_606 ) {
		__debug_606( 'The value of `n` is so large that we\'re unable to compute the result in reasonable time.' );
		return NaN;
	}
	idx = n - 1;
	if ( idx >= table.length ) {
		// Lazily calculate derivatives:
		calculateDerivatives( n );
	}
	sum = _$evalpoly_750( table[ idx ], c*c );
	if ( idx & 1 ) {
		sum *= c; // First coefficient is order 1, and really an odd polynomial.
	}
	if ( sum === 0.0 ) {
		return sum;
	}
	// The remaining terms are computed using logs since the powers and factorials get real large real quick:
	powTerms = n * _$LN_PI_65;
	if ( s === 0.0 ) {
		return ( sum >= 0.0 ) ? _$FLOAT64_PINF_85 : _$FLOAT64_NINF_81;
	}
	powTerms -= _$ln_545( _$abs_118( s ) ) * ( n+1 );
	powTerms += _$gammaln_445( n ) + _$ln_545( _$abs_118(sum) );

	if ( powTerms > _$FLOAT64_MAX_LN_71 ) {
		return ( sum >= 0.0 ) ? _$FLOAT64_PINF_85 : _$FLOAT64_NINF_81;
	}
	out = _$exp_314( powTerms ) * _$signum_681( sum );
	if ( s < 0.0 && ( (n+1)&1 ) ) {
		out *= -1;
	}
	return out;
}


// EXPORTS //

var _$polycotpi_606 = polycotpi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$factorial_333 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$zeta_641 = require( '@stdlib/math/base/special/riemann-zeta' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_EPSILON_56 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;


// VARIABLES //

var __debug_605 = _$browser_797( 'polygamma' );
var __MAX_SERIES_ITERATIONS_605 = 1000000;


// MAIN //

/**
* Evaluates the polygamma function near zero.
*
* ## Notes
*
* -   If we take this [expansion][1] for `polygamma` and substitute in this [expression][2] for `polygamma(n, 1)`, we get an alternating series for polygamma when `x` is small in terms of zeta functions of integer arguments (which are easy to evaluate, at least when the integer is even).
*
* [1]: http://functions.wolfram.com/06.15.06.0003.02
* [2]: http://functions.wolfram.com/06.15.03.0009.01
*
*
* @private
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input value
* @returns {number} (n+1)'th derivative
*/
function nearzero( n, x ) {
	var factorialPart;
	var prefix;
	var scale;
	var term;
	var sum;
	var AX;
	var k;

	// In order to avoid spurious overflow, save the `n!` term for later, and rescale at the end:
	scale = _$factorial_333( n );

	// "factorialPart" contains everything except the zeta function evaluations in each term:
	factorialPart = 1;

	// "prefix" is what we'll be adding the accumulated sum to, it will be `n! / z^(n+1)`, but since we're scaling by `n!` it is just `1 / z^(n+1)` for now:
	prefix = _$pow_618( x, n+1 );
	if ( prefix === 0.0 ) {
		return _$FLOAT64_PINF_85;
	}
	prefix = 1.0 / prefix;

	// First term in the series is necessarily `< zeta(2) < 2`, so ignore the sum if it will have no effect on the result:
	if ( prefix > 2.0/_$FLOAT64_EPSILON_56 ) {
		if ( n & 1 ) {
			return ( AX/prefix < scale ) ? _$FLOAT64_PINF_85 : prefix * scale;
		}
		return ( AX/prefix < scale ) ? _$FLOAT64_NINF_81 : -prefix * scale;
	}
	sum = prefix;
	for ( k = 0; ; ) {
		// Get the k'th term:
		term = factorialPart * _$zeta_641( k+n+1 );
		sum += term;

		// Termination condition:
		if ( _$abs_118( term ) < _$abs_118(sum * _$FLOAT64_EPSILON_56 ) ) {
			break;
		}
		// Move on `k` and `factorialPart`:
		k += 1;
		factorialPart *= (-x * (n+k)) / k;

		// Last chance exit:
		if ( k > __MAX_SERIES_ITERATIONS_605 ) {
			__debug_605( 'Series did not converge, best value is %d.', sum );
			return NaN;
		}
	}
	// We need to multiply by the scale, at each stage checking for overflow:
	if ( _$FLOAT64_MAX_75/scale < sum ) {
		return _$FLOAT64_PINF_85;
	}
	sum *= scale;
	return ( n & 1 ) ? sum : -sum;
}


// EXPORTS //

var _$nearzero_605 = nearzero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$browser_797 = require( 'debug' ); */;
/* removed: var _$isNonNegativeInteger_109 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$factorial_333 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$trigamma_712 = require( '@stdlib/math/base/special/trigamma' ); */;
/* removed: var _$digamma_242 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$signum_681 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$ldexp_543 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$zeta_641 = require( '@stdlib/math/base/special/riemann-zeta' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$min_579 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_MAX_75 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$attransitionplus_603 = require( './attransitionplus.js' ); */;
/* removed: var _$atinfinityplus_602 = require( './atinfinityplus.js' ); */;
/* removed: var _$polycotpi_606 = require( './polycotpi.js' ); */;
/* removed: var _$nearzero_605 = require( './nearzero.js' ); */;


// VARIABLES //

var __debug_607 = _$browser_797( 'polygamma' );
var __DIGITS_BASE10_607 = 19;


// MAIN //

/**
* Evaluates the polygamma function.
*
* @param {NonNegativeInteger} n - order of derivative
* @param {number} x - input value
* @returns {number} (n+1)'th derivative
*
* @example
* var v = polygamma( 3, 1.2 );
* // returns ~3.245
*
* @example
* var v = polygamma( 5, 1.2 );
* // returns ~41.39
*
* @example
* var v = polygamma( 3, -4.9 );
* // returns ~60014.239
*
* @example
* var v = polygamma( 2.5, -1.2 );
* // returns NaN
*
* @example
* var v = polygamma( -1, 5.3 );
* // returns NaN
*
* @example
* var v = polygamma( 2, -2.0 );
* // returns NaN
*
* @example
* var v = polygamma( NaN, 2.1 );
* // returns NaN
*
* @example
* var v = polygamma( 1, NaN );
* // returns NaN
*
* @example
* var v = polygamma( NaN, NaN );
* // returns NaN
*/
function polygamma( n, x ) {
	var xSmallLimit;
	var result;
	var z;

	if ( !_$isNonNegativeInteger_109( n ) ) {
		return NaN;
	}
	if ( n === 0 ) {
		return _$digamma_242( x );
	}
	if ( n === 1 ) {
		return _$trigamma_712( x );
	}
	if ( x < 0.0 ) {
		if ( _$floor_346(x) === x ) {
			// Result is infinity if `x` is odd, and a pole error if `x` is even.
			if ( _$trunc_719( x ) & 1 ) {
				return _$FLOAT64_PINF_85;
			}
			__debug_607( 'Evaluation at negative integer: %d.', x );
			return NaN;
		}
		z = 1.0 - x;
		result = polygamma( n, z ) + ( _$PI_84 * _$polycotpi_606( n, z, x ) );
		return ( n & 1 ) ? -result : result;
	}
	// Limit for use of small-x series is chosen so that the series doesn't go too divergent in the first few terms. Ordinarily, this would mean setting the limit to `~1/n`, but we can tolerate a small amount of divergence:
	xSmallLimit = _$min_579( 5.0/n, 0.25 );
	if ( x < xSmallLimit ) {
		return _$nearzero_605( n, x );
	}
	if ( x > ( 0.4 * __DIGITS_BASE10_607 ) + ( 4*n ) ) {
		return _$atinfinityplus_602( n, x );
	}
	if ( x === 1.0 ) {
		return ( ( n & 1 ) ? 1.0 : -1.0 ) * _$factorial_333( n ) * _$zeta_641( n+1 );
	}
	if ( x === 0.5 ) {
		result = ( ( n & 1 ) ? 1.0 : -1.0 ) * _$factorial_333( n ) * _$zeta_641( n+1 );
		if ( _$abs_118( result ) >= _$ldexp_543( _$FLOAT64_MAX_75, -n-1 ) ) {
			return ( _$signum_681( result ) === 1 ) ? _$FLOAT64_PINF_85 : _$FLOAT64_NINF_81;
		}
		result *= _$ldexp_543( 1.0, n+1 ) - 1.0;
		return result;
	}
	return _$attransitionplus_603( n, x );
}


// EXPORTS //

var _$polygamma_607 = polygamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the polygamma function.
*
* @module @stdlib/math/base/special/polygamma
*
* @example
* var polygamma = require( '@stdlib/math/base/special/polygamma' );
*
* var v = polygamma( 3, 1.2 );
* // returns ~3.245
*
* v = polygamma( 5, 1.2 );
* // returns ~41.39
*
* v = polygamma( 3, -4.9 );
* // returns ~60014.239
*
* v = polygamma( -1, 5.3 );
* // returns NaN
*
* v = polygamma( 2, -1.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$polygamma_607 = require( './polygamma.js' ); */;


// EXPORTS //

var _$polygamma_604 = _$polygamma_607;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// 180.0 / π
var CONST_180_DIV_PI = 57.29577951308232;


// MAIN //

/**
* Converts an angle from radians to degrees.
*
* @param {number} x - angle in radians
* @returns {number} angle in degrees
*
* @example
* var d = rad2deg( 3.141592653589793/2.0 );
* // returns 90.0
*
* @example
* var d = rad2deg( -3.141592653589793/4.0 );
* // returns -45.0
*
* @example
* var d = rad2deg( NaN );
* // returns NaN
*/
function rad2deg( x ) {
	return x * CONST_180_DIV_PI;
}


// EXPORTS //

var _$rad2deg_632 = rad2deg;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert an angle from radians to degrees.
*
* @module @stdlib/math/base/special/rad2deg
*
* @example
* var rad2deg = require( '@stdlib/math/base/special/rad2deg' );
*
* var d = rad2deg( 3.141592653589793/2.0 );
* // returns 90.0
*
* d = rad2deg( -3.141592653589793/4.0 );
* // returns -45.0
*
* d = rad2deg( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$rad2deg_632 = require( './rad2deg.js' ); */;


// EXPORTS //

var _$rad2deg_631 = _$rad2deg_632;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the ramp function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = ramp( 3.14 );
* // returns 3.14
*
* @example
* var v = ramp( -3.14 );
* // returns 0.0
*
* @example
* var v = ramp( NaN );
* // returns NaN
*/
function ramp( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		return x;
	}
	return 0.0; // handles `-0`
}


// EXPORTS //

var _$ramp_634 = ramp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the ramp function.
*
* @module @stdlib/math/base/special/ramp
*
* @example
* var ramp = require( '@stdlib/math/base/special/ramp' );
*
* var v = ramp( 3.14 );
* // returns 3.14
*
* v = ramp( -3.14 );
* // returns 0.0
*
* v = ramp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ramp_634 = require( './ramp.js' ); */;


// EXPORTS //

var _$ramp_633 = _$ramp_634;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;


// VARIABLES //

// 10^308:
var __HUGE_655 = 1.0e308;

// 10^-323
var __TINY_655 = 1.0e-323;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` on a linear scale.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = round10( 3.141592653589793 );
* // returns 1.0
*
* @example
* var v = round10( 13.0 );
* // returns 10.0
*
* @example
* var v = round10( -0.314 );
* // returns -0.1
*/
function round10( x ) {
	var sign;
	var half;
	var p1;
	var p2;
	var y1;
	var y2;
	var p;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = _$log10_551( x );

	// Find the previous and next integer powers:
	p1 = _$floor_346( p );
	p2 = _$ceil_210( p );

	// Handle tiny:
	if ( p1 === _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ) {
		return sign * __TINY_655;
	}
	// Handle huge:
	if ( p1 === _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		return sign * __HUGE_655;
	}
	// Compute previous and next powers of 10:
	y1 = _$pow_618( 10.0, p1 );
	y2 = _$pow_618( 10.0, p2 );

	// Find the closest power of 10:
	half = ( y2 - y1 ) / 2.0;
	if ( y1+half > x ) {
		return sign * y1;
	}
	return sign * y2;
}


// EXPORTS //

var _$round10_655 = round10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of `10` on a linear scale.
*
* @module @stdlib/math/base/special/round10
*
* @example
* var round10 = require( '@stdlib/math/base/special/round10' );
*
* var v = round10( 3.141592653589793 );
* // returns 1.0
*
* v = round10( 13.0 );
* // returns 10.0
*
* v = round10( -0.314 );
* // returns -0.1
*/

// MODULES //

/* removed: var _$round10_655 = require( './round10.js' ); */;


// EXPORTS //

var _$round10_654 = _$round10_655;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_210 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log2_563 = require( '@stdlib/math/base/special/log2' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_70 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;


// VARIABLES //

// 2^1023:
var __HUGE_657 = _$pow_618( 2.0, _$FLOAT64_MAX_BASE2_EXPONENT_70 );
var HALF_HUGE = __HUGE_657 / 2.0;


// MAIN //

/**
* Rounds a numeric value to the nearest power of two on a linear scale.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = round2( 3.141592653589793 );
* // returns 4.0
*
* @example
* var v = round2( 13.0 );
* // returns 16.0
*
* @example
* var v = round2( -0.314 );
* // returns -0.25
*/
function round2( x ) {
	var sign;
	var half;
	var p1;
	var p2;
	var y1;
	var y2;
	var p;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `2^p = x` for `p`:
	p = _$log2_563( x );

	// If provided the smallest subnormal, no rounding possible:
	if ( p === _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_78 ) {
		return x;
	}
	// Find the previous and next integer powers:
	p1 = _$floor_346( p );
	p2 = _$ceil_210( p );

	// Handle overflow:
	if ( p1 === _$FLOAT64_MAX_BASE2_EXPONENT_70 ) {
		if ( x - __HUGE_657 >= HALF_HUGE ) {
			return sign * _$FLOAT64_PINF_85; // sign-preserving
		}
		return sign * __HUGE_657;
	}
	// Compute previous and next powers of two:
	y1 = _$pow_618( 2.0, p1 );
	y2 = _$pow_618( 2.0, p2 );

	// Find the closest power of two:
	half = ( y2 - y1 ) / 2.0;
	if ( y1+half > x ) {
		return sign * y1;
	}
	return sign * y2;
}


// EXPORTS //

var _$round2_657 = round2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of two on a linear scale.
*
* @module @stdlib/math/base/special/round2
*
* @example
* var round2 = require( '@stdlib/math/base/special/round2' );
*
* var v = round2( 3.141592653589793 );
* // returns 4.0
*
* v = round2( 13.0 );
* // returns 16.0
*
* v = round2( -0.314 );
* // returns -0.25
*/

// MODULES //

/* removed: var _$round2_657 = require( './round2.js' ); */;


// EXPORTS //

var _$round2_656 = _$round2_657;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_72 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_77 = require( '@stdlib/constants/math/float64-min-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;


// VARIABLES //

var __MAX_INT_661 = _$FLOAT64_MAX_SAFE_INTEGER_72 + 1;
var __HUGE_661 = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\).
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{roundn}(x,n) = \frac{\operatorname{round}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{round}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{roundn}(0.2+0.1,-16)\\) is \\(0.3000000000000001\\) and not \\(0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{round}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible finite number \\(x\\) to the nearest \\(10^n\\) is \\(0.0\\). To ensure consistent behavior with \\(\operatorname{round}(x)\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{roundn}(x,n) = \frac{\biggl(\frac{\operatorname{round}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{roundn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{roundn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{roundn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{roundn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{roundn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
* ## Notes
*
* 1.  Alternative algorithms:
*
*     -   Round by [casting][1] \\(x\\) to an exponential string.
*     -   Native Python implementation [1][2] and [2][3].
*
* [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
* [2]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1082
* [3]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1226
*
*
* @param {number} x - input value
* @param {integer} n - integer power of `10`
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = roundn( 3.141592653589793, -2 );
* // returns 3.14
*
* @example
* // If n = 0, `roundn` behaves like `round`:
* var v = roundn( 3.141592653589793, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = roundn( 12368.0, 3 );
* // returns 12000.0
*/
function roundn( x, n ) {
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		_$isInfinite_99( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...
		n < _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ||

		// If `|x|` is large enough, no decimals to round...
		( _$abs_118( x ) > __MAX_INT_661 && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible finite `x` rounded to the nearest >=10^309 is 0.0.
	if ( n > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		return 0.0 * x; // preserve the sign (same behavior as round)
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < _$FLOAT64_MIN_BASE10_EXPONENT_77 ) {
		s = _$pow_618( 10.0, -(n + _$FLOAT64_MAX_BASE10_EXPONENT_68) );
		y = (x*__HUGE_661) * s; // order of operation matters!
		if ( _$isInfinite_99( y ) ) {
			return x;
		}
		return ( _$round_652(y)/__HUGE_661 ) / s;
	}
	s = _$pow_618( 10.0, -n );
	y = x * s;
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return _$round_652( y ) / s;
}


// EXPORTS //

var _$roundn_661 = roundn;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n`.
*
* @module @stdlib/math/base/special/roundn
*
* @example
* var roundn = require( '@stdlib/math/base/special/roundn' );
*
* // Round a value to 2 decimal places:
* var v = roundn( 3.141592653589793, -2 );
* // returns 3.14
*
* // If n = 0, `roundn` behaves like `round`:
* v = roundn( 3.141592653589793, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = roundn( 12368.0, 3 );
* // returns 12000.0
*/

// MODULES //

/* removed: var _$roundn_661 = require( './roundn.js' ); */;


// EXPORTS //

var _$roundn_660 = _$roundn_661;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$roundn_660 = require( '@stdlib/math/base/special/roundn' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) on a linear scale.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = roundb( 3.141592653589793, -2, 10 );
* // returns 3.14
*
* @example
* // If n = 0 or b = 1, `roundb` behaves like `round`:
* var v = roundb( 3.141592653589793, 0, 2 );
* // returns 3.0
*
* @example
* // Round a value to the nearest multiple of two:
* var v = roundb( 5.0, 1, 2 );
* // returns 6.0
*/
function roundb( x, n, b ) {
	var y;
	var s;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isnan_103( b ) ||
		b <= 0 ||
		_$isInfinite_99( n ) ||
		_$isInfinite_99( b )
	) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return _$roundn_660( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return _$round_652( x );
	}
	s = _$pow_618( b, -n );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	y = _$round_652( x * s ) / s;

	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$roundb_659 = roundb;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n`.
*
* @module @stdlib/math/base/special/roundb
*
* @example
* var roundb = require( '@stdlib/math/base/special/roundb' );
*
* // Round a value to 2 decimal places:
* var v = roundb( 3.141592653589793, -2, 10 );
* // returns 3.14
*
* // If n = 0 or b = 1, behavior is same as `round`:
* v = roundb( 3.141592653589793, 0, 2 );
* // returns 3.0
*
* // Round a value to the nearest multiple of two:
* v = roundb( 5.0, 1, 2 );
* // returns 6.0
*/

// MODULES //

/* removed: var _$roundb_659 = require( './roundb.js' ); */;


// EXPORTS //

var _$roundb_658 = _$roundb_659;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$exponent_756 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$round_652 = require( '@stdlib/math/base/special/round' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest number with \\(n\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = roundsd( 3.141592653589793, 3 );
* // returns 3.14
*
* @example
* var v = roundsd( 3.141592653589793, 1 );
* // returns 3.0
*
* @example
* var v = roundsd( 12368.0, 2 );
* // returns 12000.0
*
* @example
* var v = roundsd( 0.0313, 2, 2 );
* // returns 0.03125
*/
function roundsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		n < 1 ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			_$isnan_103( b ) ||
			b <= 0 ||
			_$isInfinite_99( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = _$log10_551( _$abs_118( x ) );
	}
	else if ( base === 2 ) {
		exp = _$exponent_756( _$abs_118( x ) );
	}
	else {
		exp = _$ln_545( _$abs_118(x) ) / _$ln_545( base );
	}
	exp = _$floor_346( exp - n + 1.0 );
	s = _$pow_618( base, _$abs_118( exp ) );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = _$round_652( x * s ) / s;
	} else {
		y = _$round_652( x / s ) * s;
	}
	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$roundsd_663 = roundsd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest number with `n` significant figures.
*
* @module @stdlib/math/base/special/roundsd
*
* @example
* var roundsd = require( '@stdlib/math/base/special/roundsd' );
*
* var v = roundsd( 3.141592653589793, 3 );
* // returns 3.14
*
* v = roundsd( 3.141592653589793, 1 );
* // returns 3.0
*
* v = roundsd( 12368.0, 2 );
* // returns 12000.0
*
* v = roundsd( 0.0313, 2, 2 );
* // returns 0.03125
*/

// MODULES //

/* removed: var _$roundsd_663 = require( './roundsd.js' ); */;


// EXPORTS //

var _$roundsd_662 = _$roundsd_663;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Compute the reciprocal square root.
*
* @param {number} x - input value
* @returns {number} reciprocal square root
*
* @example
* var v = rsqrt( 4.0 );
* // returns 0.5
*
* @example
* var v = rsqrt( 100.0 );
* // returns 0.1
*
* @example
* var v = rsqrt( 0.0 );
* // returns Infinity
*
* @example
* var v = rsqrt( Infinity );
* // returns 0.0
*
* @example
* var v = rsqrt( -4.0 );
* // returns NaN
*
* @example
* var v = rsqrt( NaN );
* // returns NaN
*/
function rsqrt( x ) {
	return 1.0 / _$sqrt_703( x );
}


// EXPORTS //

var _$rsqrt_665 = rsqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the reciprocal square root.
*
* @module @stdlib/math/base/special/rsqrt
*
* @example
* var rsqrt = require( '@stdlib/math/base/special/rsqrt' );
*
* var v = rsqrt( 4.0 );
* // returns 0.5
*
* v = rsqrt( 100.0 );
* // returns 0.1
*
* v = rsqrt( 0.0 );
* // returns 0.0
*
* v = rsqrt( Infinity );
* // returns 0.0
*
* v = rsqrt( -4.0 );
* // returns NaN
*
* v = rsqrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$rsqrt_665 = require( './main.js' ); */;


// EXPORTS //

var _$rsqrt_664 = _$rsqrt_665;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_672( x ) {
	if ( x === 0.0 ) {
		return 5.489002234213736e-7;
	}
	return 5.489002234213736e-7 + (x * (0.00010893658065032867 + (x * (0.006810201324725182 + (x * (0.16700661183132304 + (x * (1.6208328770153833 + (x * (5.4593771716181285 + (x * 4.236128628922166))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_672 = __evalpoly_672;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_670( x ) {
	if ( x === 0.0 ) {
		return 5.489002527562557e-7;
	}
	return 5.489002527562557e-7 + (x * (0.00011003435715391573 + (x * (0.007017106683227897 + (x * (0.1787920529631499 + (x * (1.867922579501842 + (x * (7.308288225055645 + (x * (8.16496634205391 + (x * 1.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_670 = __evalpoly_670;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_673( x ) {
	if ( x === 0.0 ) {
		return 9.70507110881952e-14;
	}
	return 9.70507110881952e-14 + (x * (9.41779576128513e-11 + (x * (3.200927900910049e-8 + (x * (0.0000048621543082645475 + (x * (0.00034955644244785906 + (x * (0.01160642294081244 + (x * (0.16030015822231947 + (x * (0.7137152741001467 + (x * 0.4558808734704653))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_673 = __evalpoly_673;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_671( x ) {
	if ( x === 0.0 ) {
		return 9.70507110881952e-14;
	}
	return 9.70507110881952e-14 + (x * (9.437205903502767e-11 + (x * (3.21956939101046e-8 + (x * (0.000004924350643178815 + (x * (0.00035869648188185157 + (x * (0.012225359477197129 + (x * (0.17868554533207454 + (x * (0.9174636118736841 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_671 = __evalpoly_671;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_676( x ) {
	if ( x === 0.0 ) {
		return 7.825790407440903e-9;
	}
	return 7.825790407440903e-9 + (x * (0.0000019796387414096365 + (x * (0.00016199979459893403 + (x * (0.005388686814621773 + (x * (0.07485277376284691 + (x * (0.3971802963923375 + (x * (0.6113791099522193 + (x * 0.08710016989731142))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_676 = __evalpoly_676;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_674( x ) {
	if ( x === 0.0 ) {
		return 7.825792189335346e-9;
	}
	return 7.825792189335346e-9 + (x * (0.0000020265918208634397 + (x * (0.0001732210814741771 + (x * (0.006223963454417684 + (x * (0.09887717612776888 + (x * (0.666296701268988 + (x * (1.6440220241335535 + (x * 1.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_674 = __evalpoly_674;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_677( x ) {
	if ( x === 0.0 ) {
		return 3.1404009894636335e-15;
	}
	return 3.1404009894636335e-15 + (x * (3.859459254302766e-12 + (x * (1.7040445278204452e-9 + (x * (3.471311670841167e-7 + (x * (0.000034894116550227946 + (x * (0.001717182390523479 + (x * (0.03848787676499743 + (x * (0.33041097930563207 + (x * 0.6973599534432762))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_677 = __evalpoly_677;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_675( x ) {
	if ( x === 0.0 ) {
		return 3.1404009894636335e-15;
	}
	return 3.1404009894636335e-15 + (x * (3.878301660239547e-12 + (x * (1.7269374896631615e-9 + (x * (3.5704322344374083e-7 + (x * (0.00003684755044425611 + (x * (0.0019028442667439953 + (x * (0.04679131942596258 + (x * (0.48785225869530496 + (x * (1.6854889881101165 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_675 = __evalpoly_675;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_679( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (-0.04134703162294066 + (x * (0.0009769454381704354 + (x * (-0.000009757593038436328 + (x * (4.625917144270128e-8 + (x * -8.391678279103039e-11))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_679 = __evalpoly_679;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_678( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (0.01420852393261499 + (x * (0.00009964121220438756 + (x * (4.418278428012189e-7 + (x * (1.279978911799433e-9 + (x * 2.0326926619595193e-12))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_678 = __evalpoly_678;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_669( x ) {
	if ( x === 0.0 ) {
		return -1.0;
	}
	return -1.0 + (x * (0.028915965260755523 + (x * (-0.0004740072068734079 + (x * (0.000003593250514199931 + (x * (-1.3524950491579076e-8 + (x * 2.0252400238910228e-11))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_669 = __evalpoly_669;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_668( x ) {
	if ( x === 0.0 ) {
		return 4.0;
	}
	return 4.0 + (x * (0.051002805623644606 + (x * (0.00031744202477503275 + (x * (0.0000012321035568588342 + (x * (3.067809975818878e-9 + (x * 4.077460400618806e-12))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_668 = __evalpoly_668;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_683 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$HALF_PI_62 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$GAMMA_57 = require( '@stdlib/constants/math/float64-eulergamma' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_672 = require( './polyval_fn4.js' ); */;
/* removed: var _$evalpoly_670 = require( './polyval_fd4.js' ); */;
/* removed: var _$evalpoly_673 = require( './polyval_fn8.js' ); */;
/* removed: var _$evalpoly_671 = require( './polyval_fd8.js' ); */;
/* removed: var _$evalpoly_676 = require( './polyval_gn4.js' ); */;
/* removed: var _$evalpoly_674 = require( './polyval_gd4.js' ); */;
/* removed: var _$evalpoly_677 = require( './polyval_gn8.js' ); */;
/* removed: var _$evalpoly_675 = require( './polyval_gd8.js' ); */;
/* removed: var _$evalpoly_679 = require( './polyval_sn.js' ); */;
/* removed: var _$evalpoly_678 = require( './polyval_sd.js' ); */;
/* removed: var _$evalpoly_669 = require( './polyval_cn.js' ); */;
/* removed: var _$evalpoly_668 = require( './polyval_cd.js' ); */;


// MAIN //

/**
* Computes the sine and cosine integrals.
*
* ## Method
*
* -   The integrals are approximated by rational functions.
*
* -   For \\( x > 8 \\), auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
*     ```tex
*     \operatorname{Ci}(x) = f(x) \sin(x) - g(x) \cos(x) \\
*     \operatorname{Si}(x) = \pi/2 - f(x) \cos(x) - g(x) \sin(x)
*     ```
*
* ## Notes
*
* -   Absolute error on test interval \\( \[0,50\] \\), except relative when greater than \\( 1 \\):
*
*     | arithmetic | function    | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | Si          | 30000    | 4.4e-16 | 7.3e-17 |
*     | IEEE       | Ci          | 30000    | 6.9e-16 | 5.1e-17 |
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = sici( new Array( 2 ), 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* @example
* var v = sici( new Array( 2 ), 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* @example
* var v = sici( new Array( 2 ), -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* @example
* var v = sici( new Array( 2 ), NaN );
* // returns [ NaN, NaN ]
*/
function sici( out, x ) {
	var sgn;
	var si;
	var ci;
	var c;
	var f;
	var g;
	var s;
	var z;

	if ( _$isnan_103( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x < 0.0 ) {
		sgn = -1;
		x = -x;
	} else {
		sgn = 0;
	}
	if ( x === 0.0 ) {
		out[ 0 ] = 0.0;
		out[ 1 ] = _$FLOAT64_NINF_81;
		return out;
	}
	if ( x > 1.0e9 ) {
		if ( _$isInfinite_99( x ) ) {
			if ( sgn === -1 ) {
				si = -_$HALF_PI_62;
				ci = NaN;
			} else {
				si = _$HALF_PI_62;
				ci = 0.0;
			}
			out[ 0 ] = si;
			out[ 1 ] = ci;
			return out;
		}
		si = _$HALF_PI_62 - ( _$cos_226( x ) / x );
		ci = _$sin_683( x ) / x;
	}
	if ( x > 4.0 ) {
		s = _$sin_683( x );
		c = _$cos_226( x );
		z = 1.0 / ( x*x );
		if ( x < 8.0 ) {
			f = _$evalpoly_672( z ) / ( x * _$evalpoly_670( z ) );
			g = z * _$evalpoly_676( z ) / _$evalpoly_674( z );
		} else {
			f = _$evalpoly_673( z ) / ( x * _$evalpoly_671( z ) );
			g = z * _$evalpoly_677( z ) / _$evalpoly_675( z );
		}
		si = _$HALF_PI_62 - ( f*c ) - ( g*s );
		if ( sgn ) {
			si = -si;
		}
		ci = ( f*s ) - ( g*c );
		out[ 0 ] = si;
		out[ 1 ] = ci;
		return out;
	}
	z = x * x;
	s = x * _$evalpoly_679( z ) / _$evalpoly_678( z );
	c = z * _$evalpoly_669( z ) / _$evalpoly_668( z );
	if ( sgn ) {
		s = -s;
	}
	si = s;
	ci = _$GAMMA_57 + _$ln_545( x ) + c; // real part if x < 0
	out[ 0 ] = si;
	out[ 1 ] = ci;
	return out;
}


// EXPORTS //

var _$sici_680 = sici;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sici_680 = require( './sici.js' ); */;


// MAIN //

/**
* Computes the sine and cosine integrals.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = sici( 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var v = sici( out, 3.0 );
* // returns <Float64Array>[ ~1.849, ~0.12 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = sici( 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* @example
* var v = sici( -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* @example
* var v = sici( NaN );
* // returns [ NaN, NaN ]
*/
function __sici_667( out, x ) {
	if ( arguments.length === 1 ) {
		return _$sici_680( [ 0.0, 0.0 ], out );
	}
	return _$sici_680( out, x );
}


// EXPORTS //

var _$sici_667 = __sici_667;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine and cosine integrals.
*
* @module @stdlib/math/base/special/sici
*
* @example
* var sici = require( '@stdlib/math/base/special/sici' );
*
* var v = sici( 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* v = sici( 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* v = sici( -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* v = sici( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var sici = require( '@stdlib/math/base/special/sici' );
*
* var out = new Float64Array( 2 );
*
* var v = sici( out, 3.0 );
* // returns <Float64Array>[ ~1.849, ~0.12 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$sici_667 = require( './main.js' ); */;


// EXPORTS //

var _$sici_666 = _$sici_667;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sinpi_697 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the normalized cardinal sine of a number.
*
* ## Method
*
* For \\( x \neq 0 \\), the normalized cardinal sine is calculated as
*
* ```tex
* \operatorname{sinc}(x) = \frac{\operatorname{sin}(\pi x)}{\pi x}.
* ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{sinc}(0) &= 1 & \\
* \operatorname{sinc}(\infty) &= 0 & \\
* \operatorname{sinc}(-\infty) &= 0 & \\
* \operatorname{sinc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} cardinal sine
*
* @example
* var v = sinc( 0.5 );
* // returns ~0.637
*
* @example
* var v = sinc( -1.2 );
* // returns ~-0.156
*
* @example
* var v = sinc( 0.0 );
* // returns 1.0
*
* @example
* var v = sinc( NaN );
* // returns NaN
*/
function sinc( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return 1.0;
	}
	return _$sinpi_697( x ) / ( _$PI_84*x );
}


// EXPORTS //

var _$sinc_686 = sinc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the normalized cardinal sine of a number.
*
* @module @stdlib/math/base/special/sinc
*
* @example
* var sinc = require( '@stdlib/math/base/special/sinc' );
*
* var v = sinc( 0.5 );
* // returns ~0.637
*
* v = sinc( -1.2 );
* // returns ~-0.156
*
* v = sinc( 0.0 );
* // returns 1.0
*
* v = sinc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinc_686 = require( './sinc.js' ); */;


// EXPORTS //

var _$sinc_685 = _$sinc_686;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$sincos_687 = require( '@stdlib/math/base/special/sincos' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$PI_84 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$copysign_224 = require( '@stdlib/math/base/special/copysign' ); */;


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number times π.
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], 0.0 );
* // returns [ 0.0, 1.0 ]
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], 0.5 );
* // returns [ 1.0, 0.0 ]
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], 0.1 );
* // returns [ ~0.309, ~0.951 ]
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function sincospi( out, x ) {
	var tmp;
	var ix;
	var ar;
	var r;

	if ( _$isnan_103( x ) || _$isInfinite_99( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	r = x % 2.0;
	ar = _$abs_118( r );
	if ( ar === 0.0 || ar === 1.0 ) {
		ix = _$floor_346( ar );
		out[ 0 ] = _$copysign_224( 0.0, r );
		out[ 1 ] = ( ix%2 === 1 ) ? -1.0 : 1.0;
		return out;
	}
	if ( ar < 0.25 ) {
		return _$sincos_687( out, _$PI_84*r );
	}
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		_$sincos_687( out, _$PI_84*ar );
		tmp = out[ 0 ];
		out[ 0 ] = _$copysign_224( out[ 1 ], r );
		out[ 1 ] = tmp;
		return out;
	}
	if ( ar < 1.25 ) {
		r = _$copysign_224( 1.0, r ) - r;
		_$sincos_687( out, _$PI_84*r );
		out[ 1 ] *= -1;
		return out;
	}
	if ( ar < 1.75 ) {
		ar -= 1.5;
		_$sincos_687( out, _$PI_84*ar );
		tmp = out[ 0 ];
		out[ 0 ] = -_$copysign_224( out[ 1 ], r );
		out[ 1 ] = tmp;
		return out;
	}
	r -= _$copysign_224( 2.0, r );
	return _$sincos_687( out, _$PI_84*r );
}


// EXPORTS //

var _$sincospi_693 = sincospi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sincospi_693 = require( './sincospi.js' ); */;


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number times π.
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)
*
* @example
* var v = sincospi( 0.0 );
* // returns [ 0.0, 1.0 ]
*
* @example
* var v = sincospi( 0.5 );
* // returns [ 1.0, 0.0 ]
*
* @example
* var v = sincospi( 0.1 );
* // returns [ ~0.309, ~0.951 ]
*
* @example
* var v = sincospi( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var v = sincospi( out, 0.0 );
* // returns <Float64Array>[ 0.0, 1.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function __sincospi_692( out, x ) {
	if ( arguments.length === 1 ) {
		return _$sincospi_693( [ 0.0, 0.0 ], out );
	}
	return _$sincospi_693( out, x );
}


// EXPORTS //

var _$sincospi_692 = __sincospi_692;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Simultaneously compute the sine and cosine of a number times π.
*
* @module @stdlib/math/base/special/sincospi
*
* @example
* var sincospi = require( '@stdlib/math/base/special/sincospi' );
*
* var v = sincospi( 0.0 );
* // returns [ 0.0, 1.0 ]
*
* v = sincospi( 0.5 );
* // returns [ 1.0, 0.0 ]
*
* v = sincospi( 0.1 );
* // returns [ ~0.309, ~0.951 ]
*
* v = sincospi( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var sincospi = require( '@stdlib/math/base/special/sincospi' );
*
* var out = new Float64Array( 2 );
*
* var v = sincospi( out, 0.0 );
* // returns <Float64Array>[ 0.0, 1.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$sincospi_692 = require( './main.js' ); */;


// EXPORTS //

var _$sincospi_691 = _$sincospi_692;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_695( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666666;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len
		s2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_695 = __evalrational_695;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_85 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_81 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$LN2_67 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$evalrational_695 = require( './rational_pq.js' ); */;


// VARIABLES //

// ln(2^1024)
var MAXLOG = 7.09782712893383996843e2;

// ln(2^-1022)
var MINLOG = -7.08396418532264106224e2;

var POS_OVERFLOW = MAXLOG + _$LN2_67;
var NEG_OVERFLOW = MINLOG - _$LN2_67;

var LARGE = MAXLOG - _$LN2_67;


// MAIN //

/**
* Computes the hyperbolic sine of a number.
*
* ## Method
*
* The range is partitioned into two segments. If \\( |x| \le 1 \\), we use a rational function of the form
*
* ```tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise, the calculation is
*
* ```tex
* \operatorname{sinh}(x) = \frac{ e^x - e^{-x} }{2}.
* ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain   | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |
*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic sine
*
* @example
* var v = sinh( 0.0 );
* // returns 0.0
*
* @example
* var v = sinh( 2.0 );
* // returns ~3.627
*
* @example
* var v = sinh( -2.0 );
* // returns ~-3.627
*
* @example
* var v = sinh( NaN );
* // returns NaN
*/
function sinh( x ) {
	var a;
	if ( x === 0.0 ) {
		return x; // handles `+-0`
	}
	a = _$abs_118( x );
	if ( x > POS_OVERFLOW || x < NEG_OVERFLOW ) {
		return ( x > 0.0 ) ? _$FLOAT64_PINF_85 : _$FLOAT64_NINF_81;
	}
	if ( a > 1.0 ) {
		if ( a >= LARGE ) {
			a = _$exp_314( 0.5*a );
			a *= 0.5 * a;
			if ( x < 0.0 ) {
				a = -a;
			}
			return a;
		}
		a = _$exp_314( a );
		a = (0.5*a) - (0.5/a);
		if ( x < 0.0 ) {
			a = -a;
		}
		return a;
	}
	a *= a;
	return x + ( x*a*_$evalrational_695( a ) );
}


// EXPORTS //

var _$sinh_696 = sinh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic sine of a number.
*
* @module @stdlib/math/base/special/sinh
*
* @example
* var sinh = require( '@stdlib/math/base/special/sinh' );
*
* var v = sinh( 0.0 );
* // returns 0.0
*
* v = sinh( 2.0 );
* // returns ~3.627
*
* v = sinh( -2.0 );
* // returns ~-3.627
*
* v = sinh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinh_696 = require( './sinh.js' ); */;


// EXPORTS //

var _$sinh_694 = _$sinh_696;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_700( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (3.297713409852251 + (x * (4.256971560081218 + (x * (2.7114985119655346 + (x * (0.8796913117545303 + (x * (0.13384763957830903 + (x * (0.007315890452380947 + (x * 0.000046512858607399003))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_700 = __evalpoly_700;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_701( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (3.547713409852251 + (x * (5.03278880143317 + (x * (3.6380053334513707 + (x * (1.4117259775183106 + (x * (0.2829748606025681 + (x * (0.02540437639325444 + (x * 0.0006909904889125533))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_701 = __evalpoly_701;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1985, 1987, 1989, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$PI_SQUARED_83 = require( '@stdlib/constants/math/float64-pi-squared' ); */;
/* removed: var _$evalpoly_700 = require( './polyval_a.js' ); */;
/* removed: var _$evalpoly_701 = require( './polyval_b.js' ); */;


// MAIN //

/**
* Evaluates Spence’s function, which is also known as the dilogarithm.
*
* ## Method
*
* -   A rational approximation gives the integral in the interval (0.5, 1.5).
* -   Transformation formulas for \\( \tfrac{1}{x} \\) and \\( 1 - x \\) are employed outside the basic expansion range.
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain      | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | 0,4         | 30000    | 3.9e-15 | 5.4e-16 |
*
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = spence( 3.0 );
* // returns ~-1.437
*
* @example
* var v = spence( 0.0 );
* // returns ~1.645
*
* @example
* var v = spence( -9.0 );
* // returns NaN
*
* @example
* var v = spence( NaN );
* // returns NaN
*/
function spence( x ) {
	var flg;
	var w;
	var y;
	var z;

	if ( _$isnan_103( x ) || x < 0.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return ( _$PI_SQUARED_83 / 6.0 );
	}
	flg = 0;
	if ( x > 2.0 ) {
		x = 1.0 / x;
		flg |= 2;
	}
	if ( x > 1.5 ) {
		w = (1.0 / x) - 1.0;
		flg |= 2;
	}
	else if ( x < 0.5 ) {
		w = -x;
		flg |= 1;
	}
	else {
		w = x - 1.0;
	}
	y = -w * _$evalpoly_700( w ) / _$evalpoly_701( w );
	if ( flg & 1 ) {
		y = ( _$PI_SQUARED_83/6.0 ) - ( _$ln_545( x ) * _$ln_545( 1.0-x ) ) - y;
	}
	if ( flg & 2 ) {
		z = _$ln_545( x );
		y = -( 0.5 * z * z ) - y;
	}
	return y;
}


// EXPORTS //

var _$spence_702 = spence;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate Spence’s function, which is also known as the dilogarithm.
*
* @module @stdlib/math/base/special/spence
*
* @example
* var spence = require( '@stdlib/math/base/special/spence' );
*
* var v = spence( 3.0 );
* // returns ~-1.437
*
* v = spence( 0.0 );
* // returns ~1.645
*
* v = spence( -9.0 );
* // returns NaN
*
* v = spence( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$spence_702 = require( './spence.js' ); */;


// EXPORTS //

var _$spence_699 = _$spence_702;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link https://github.com/boostorg/math/blob/fa1896fbc4c6fadc167307342ceb20bf2b6c0688/include/boost/math/special_functions/sqrt1pm1.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_327 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_703 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;


// MAIN //

/**
* Computes the value of `sqrt(1+x)-1`.
*
* @param {number} x - input value
* @returns {number} square root of `1+x` minus one
*
* @example
* var v = sqrt1pm1( 3.0 );
* // returns 1.0
*
* @example
* var v = sqrt1pm1( 0.5 );
* // returns ~0.225
*
* @example
* var v = sqrt1pm1( 0.02 );
* // returns ~0.01
*
* @example
* var v = sqrt1pm1( -0.5 );
* // returns ~-0.293
*
* @example
* var v = sqrt1pm1( -1.1 );
* // returns NaN
*
* @example
* var v = sqrt1pm1( NaN );
* // returns NaN
*/
function sqrt1pm1( x ) {
	if ( _$isnan_103( x ) ) {
		return NaN;
	}
	if ( _$abs_118( x ) > 0.75 ) {
		return _$sqrt_703( 1.0+x ) - 1.0;
	}
	return _$expm1_327( _$log1p_558( x ) / 2.0 );
}


// EXPORTS //

var _$sqrt1pm1_706 = sqrt1pm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the value of `sqrt(1+x)-1`.
*
* @module @stdlib/math/base/special/sqrt1pm1
*
* @example
* var sqrt1pm1 = require( '@stdlib/math/base/special/sqrt1pm1' );
*
* var v = sqrt1pm1( 3.0 );
* // returns 1.0
*
* v = sqrt1pm1( 0.5 );
* // returns ~0.225
*
* v = sqrt1pm1( 0.02 );
* // returns ~0.01
*
* v = sqrt1pm1( -0.5 );
* // returns ~-0.292
*/

// MODULES //

/* removed: var _$sqrt1pm1_706 = require( './sqrt1pm1.js' ); */;


// EXPORTS //

var _$sqrt1pm1_705 = _$sqrt1pm1_706;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_710( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.3333333333333332;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1614.6876844170845 + (x * (-99.28772310019185 + (x * (-0.9643991794250523 + (x * 0.0))))); // eslint-disable-line max-len
		s2 = 4844.063053251255 + (x * (2235.4883906010045 + (x * (112.81167849163293 + (x * 1.0))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.9643991794250523 + (x * (-99.28772310019185 + (x * -1614.6876844170845))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (112.81167849163293 + (x * (2235.4883906010045 + (x * 4844.063053251255))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_710 = __evalrational_710;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_314 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$evalrational_710 = require( './rational_pq.js' ); */;


// VARIABLES //

// log(2**127)
var __MAXLOG_711 = 8.8029691931113054295988e+01;


// MAIN //

/**
* Computes the hyperbolic tangent of a number.
*
* ## Method
*
* For \\( |x| < 0.625 \\), we use a rational function of the form (Cody and Waite)
*
* ```tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise,
*
* ```tex
* \begin{align*}
* \operatorname{tanh}(x) &= \frac{\operatorname{sinh}(x)}{\operatorname{cosh(x)}} \\
* &= 1 - \frac{2}{e^{2x} + 1}
* \end{align*}
* ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:----------:|:------:|:--------:|:-------:|:-------:|
*     | DEC        | -2,2   | 50000    | 3.3e-17 | 6.4e-18 |
*     | IEEE       | -2,2   | 30000    | 2.5e-16 | 5.8e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic tangent
*
* @example
* var v = tanh( 0.0 );
* // returns 0.0
*
* @example
* var v = tanh( 2.0 );
* // returns ~0.964
*
* @example
* var v = tanh( -2.0 );
* // returns ~-0.964
*
* @example
* var v = tanh( NaN );
* // returns NaN
*/
function tanh( x ) {
	var s;
	var z;
	z = _$abs_118( x );
	if ( z > 0.5*__MAXLOG_711 ) {
		return ( x < 0.0 ) ? -1.0 : 1.0;
	}
	if ( z >= 0.625 ) {
		s = _$exp_314( 2.0 * z );
		z = 1.0 - ( 2.0/(s+1.0) );
		if ( x < 0.0 ) {
			z = -z;
		}
	} else {
		if ( x === 0.0 ) {
			return x; // Handle `+-0`
		}
		s = x * x;
		z = x + ( x*s*_$evalrational_710( s ) );
	}
	return z;
}


// EXPORTS //

var _$tanh_711 = tanh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic tangent of a number.
*
* @module @stdlib/math/base/special/tanh
*
* @example
* var tanh = require( '@stdlib/math/base/special/tanh' );
*
* var v = tanh( 0.0 );
* // returns 0.0
*
* var v = tanh( -0.0 );
* // returns -0.0
*
* v = tanh( 2.0 );
* // returns ~0.964
*
* v = tanh( -2.0 );
* // returns ~-0.964
*
* v = tanh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$tanh_711 = require( './tanh.js' ); */;


// EXPORTS //

var _$tanh_709 = _$tanh_711;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc10( 3.141592653589793 );
* // returns 1.0
*
* @example
* var v = trunc10( 13.0 );
* // returns 10.0
*
* @example
* var v = trunc10( -0.314 );
* // returns -0.1
*/
function trunc10( x ) {
	var sign;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	return sign * _$pow_618( 10.0, _$floor_346( _$log10_551( x ) ) );
}


// EXPORTS //

var _$trunc10_722 = trunc10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of `10` toward zero.
*
* @module @stdlib/math/base/special/trunc10
*
* @example
* var trunc10 = require( '@stdlib/math/base/special/trunc10' );
*
* var v = trunc10( 3.141592653589793 );
* // returns 1.0
*
* v = trunc10( 13.0 );
* // returns 10.0
*
* v = trunc10( -0.314 );
* // returns -0.1
*/

// MODULES //

/* removed: var _$trunc10_722 = require( './trunc10.js' ); */;


// EXPORTS //

var _$trunc10_721 = _$trunc10_722;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$log2_563 = require( '@stdlib/math/base/special/log2' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest power of two toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc2( 3.141592653589793 );
* // returns 2.0
*
* @example
* var v = trunc2( 13.0 );
* // returns 8.0
*
* @example
* var v = trunc2( -0.314 );
* // returns -0.25
*/
function trunc2( x ) {
	var sign;
	if (
		_$isnan_103( x ) ||
		_$isInfinite_99( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	return sign * _$pow_618( 2.0, _$floor_346( _$log2_563( x ) ) );
}


// EXPORTS //

var _$trunc2_724 = trunc2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest power of two toward zero.
*
* @module @stdlib/math/base/special/trunc2
*
* @example
* var trunc2 = require( '@stdlib/math/base/special/trunc2' );
*
* var v = trunc2( 3.141592653589793 );
* // returns 2.0
*
* v = trunc2( 13.0 );
* // returns 8.0
*
* v = trunc2( -0.314 );
* // returns -0.25
*/

// MODULES //

/* removed: var _$trunc2_724 = require( './trunc2.js' ); */;


// EXPORTS //

var _$trunc2_723 = _$trunc2_724;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_72 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;
/* removed: var _$FLOAT64_MAX_BASE10_EXPONENT_68 = require( '@stdlib/constants/math/float64-max-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_77 = require( '@stdlib/constants/math/float64-min-base10-exponent' ); */;
/* removed: var _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' ); */;


// VARIABLES //

var __MAX_INT_728 = _$FLOAT64_MAX_SAFE_INTEGER_72 + 1;
var __HUGE_728 = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\) toward zero.
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{truncn}(x,n) = \frac{\operatorname{trunc}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{trunc}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior due to the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{trunc}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible finite number \\(x\\) to the nearest \\(10^n\\) is \\(0\\). To ensure consistent behavior with \\(\operatorname{trunc}(x)\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{truncn}(x,n) = \frac{\biggl(\frac{\operatorname{trunc}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{truncn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{truncn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{truncn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{truncn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{truncn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @param {integer} n - integer power of `10`
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = truncn( 3.141592653589793, -4 );
* // returns 3.1415
*
* @example
* // If n = 0, `truncn` behaves like `trunc`:
* var v = truncn( 3.141592653589793, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = truncn( 12368.0, 3 );
* // returns 12000.0
*/
function truncn( x, n ) {
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		_$isInfinite_99( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to truncate...
		n < _$FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL_76 ||

		// If `|x|` is large enough, no decimals to truncate...
		( _$abs_118( x ) > __MAX_INT_728 && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is zero.
	if ( n > _$FLOAT64_MAX_BASE10_EXPONENT_68 ) {
		return 0.0 * x; // preserve the sign (same behavior as trunc)
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < _$FLOAT64_MIN_BASE10_EXPONENT_77 ) {
		s = _$pow_618( 10.0, -(n + _$FLOAT64_MAX_BASE10_EXPONENT_68) );
		y = (x*__HUGE_728) * s; // order of operation matters!
		if ( _$isInfinite_99( y ) ) {
			return x;
		}
		return ( _$trunc_719(y)/__HUGE_728 ) / s;
	}
	s = _$pow_618( 10.0, -n );
	y = x * s;
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return _$trunc_719( y ) / s;
}


// EXPORTS //

var _$truncn_728 = truncn;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n` toward zero.
*
* @module @stdlib/math/base/special/truncn
*
* @example
* var truncn = require( '@stdlib/math/base/special/truncn' );
*
* // Round a value to 4 decimal places:
* var v = truncn( 3.141592653589793, -4 );
* // returns 3.1415
*
* // If n = 0, `truncn` behaves like `trunc`:
* v = truncn( 3.141592653589793, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = truncn( 12368.0, 3 );
* // returns 12000.0
*/

// MODULES //

/* removed: var _$truncn_728 = require( './truncn.js' ); */;


// EXPORTS //

var _$truncn_727 = _$truncn_728;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$truncn_727 = require( '@stdlib/math/base/special/truncn' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) toward zero.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = truncb( 3.141592653589793, -4, 10 );
* // returns 3.1415
*
* @example
* // If n = 0 or b = 1, `truncb` behaves like `trunc`:
* var v = truncb( 3.141592653589793, 0, 2 );
* // returns 3.0
*
* @example
* // Round a value to the nearest multiple of two toward zero:
* var v = truncb( 5.0, 1, 2 );
* // returns 4.0
*/
function truncb( x, n, b ) {
	var y;
	var s;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		_$isnan_103( b ) ||
		b <= 0 ||
		_$isInfinite_99( n ) ||
		_$isInfinite_99( b )
	) {
		return NaN;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return _$truncn_727( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return _$trunc_719( x );
	}
	s = _$pow_618( b, -n );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	y = _$trunc_719( x*s ) / s;

	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$truncb_726 = truncb;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n` toward zero.
*
* @module @stdlib/math/base/special/truncb
*
* @example
* var truncb = require( '@stdlib/math/base/special/truncb' );
*
* // Round a value to 4 decimal places:
* var v = truncb( 3.141592653589793, -4, 10 );
* // returns 3.1415
*
* // If n = 0 or b = 1, behavior is same as `trunc`:
* v = truncb( 3.141592653589793, 0, 2 );
* // returns 3.0
*
* // Round a value to the nearest multiple of two toward zero:
* v = truncb( 5.0, 1, 2 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$truncb_726 = require( './truncb.js' ); */;


// EXPORTS //

var _$truncb_725 = _$truncb_726;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_99 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$pow_618 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$log10_551 = require( '@stdlib/math/base/special/log10' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$abs_118 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_346 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$exponent_756 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;


// MAIN //

/**
* Rounds a numeric value to the nearest number toward zero with \\(n\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = truncsd( 3.141592653589793, 5 );
* // returns 3.1415
*
* @example
* var v = truncsd( 3.141592653589793, 1 );
* // returns 3.0
*
* @example
* var v = truncsd( 12368.0, 2 );
* // returns 12000.0
*
* @example
* var v = truncsd( 0.0313, 2, 2 );
* // returns 0.03125
*/
function truncsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		_$isnan_103( x ) ||
		_$isnan_103( n ) ||
		n < 1 ||
		_$isInfinite_99( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			_$isnan_103( b ) ||
			b <= 0 ||
			_$isInfinite_99( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( _$isInfinite_99( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = _$log10_551( _$abs_118( x ) );
	}
	else if ( base === 2 ) {
		exp = _$exponent_756( _$abs_118( x ) );
	}
	else {
		exp = _$ln_545( _$abs_118(x) ) / _$ln_545( base );
	}
	exp = _$floor_346( exp - n + 1.0 );
	s = _$pow_618( base, _$abs_118( exp ) );

	// Check for overflow:
	if ( _$isInfinite_99( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = _$trunc_719( x * s ) / s;
	} else {
		y = _$trunc_719( x / s ) * s;
	}
	// Check for overflow:
	if ( _$isInfinite_99( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

var _$truncsd_730 = truncsd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value to the nearest number toward zero with `n` significant figures.
*
* @module @stdlib/math/base/special/truncsd
*
* @example
* var truncsd = require( '@stdlib/math/base/special/truncsd' );
*
* var v = truncsd( 3.141592653589793, 5 );
* // returns 3.1415
*
* v = truncsd( 3.141592653589793, 1 );
* // returns 3.0
*
* v = truncsd( 12368.0, 2 );
* // returns 12000.0
*
* v = truncsd( 0.0313, 2, 2 )
* // returns 0.03125
*/

// MODULES //

/* removed: var _$truncsd_730 = require( './truncsd.js' ); */;


// EXPORTS //

var _$truncsd_729 = _$truncsd_730;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111
var __LOW_WORD_MASK_732 = 0x0000ffff>>>0; // asm type annotation


// MAIN //

/**
* Performs C-like multiplication of two unsigned 32-bit integers.
*
* ## Method
*
* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words
*
*     ```tex
*     a = w_h*2^{16} + w_l
*     ```
*
*     where \\( w_h \\) is the most significant 16 bits and \\( w_l \\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\( 2^{32}-1 \\)
*
*     ```binarystring
*     11111111111111111111111111111111
*     ```
*
*     The 16-bit high word is then
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     and the 16-bit low word
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     If we cast the high word to 32-bit precision and multiply by \\( 2^{16} \\) (equivalent to a 16-bit left shift), then the bit sequence is
*
*     ```binarystring
*     11111111111111110000000000000000
*     ```
*
*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is
*
*     ```binarystring
*     00000000000000001111111111111111
*     ```
*
*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\( 2^{32}-1 \\).
*
* -   Accordingly, the multiplication of two 32-bit integers can be expressed
*
*     ```tex
*     \begin{align*}
*     a \cdot b &= ( a_h \cdot 2^{16} + a_l) \cdot ( b_h \cdot 2^{16} + b_l) \\
*           &= a_l \cdot b_l + a_h \cdot b_l \cdot 2^{16} + a_l \cdot b_h \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32} \\
*           &= a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32}
*     \end{align*}
*     ```
*
* -   We note that multiplying (dividing) an integer by \\( 2^n \\) is equivalent to performing a left (right) shift of \\( n \\) bits.
*
* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\( 2^{32} \\). Stated another way, we only care about the low word of a 64-bit result.
*
* -   Accordingly, the last term, being evenly divisible by \\( 2^{32} \\), drops from the equation leaving the remaining two terms as the remainder.
*
*     ```tex
*     a \cdot b = a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) << 16
*     ```
*
* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to "overflow". However, we can disregard (`>>>0`) overflow bits due modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.
*
*
* @param {uinteger32} a - integer
* @param {uinteger32} b - integer
* @returns {uinteger32} product
*
* @example
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/
function uimul( a, b ) {
	var lbits;
	var mbits;
	var ha;
	var hb;
	var la;
	var lb;

	a >>>= 0; // asm type annotation
	b >>>= 0; // asm type annotation

	// Isolate the most significant 16-bits:
	ha = ( a>>>16 )>>>0; // asm type annotation
	hb = ( b>>>16 )>>>0; // asm type annotation

	// Isolate the least significant 16-bits:
	la = ( a&__LOW_WORD_MASK_732 )>>>0; // asm type annotation
	lb = ( b&__LOW_WORD_MASK_732 )>>>0; // asm type annotation

	// Compute partial sums:
	lbits = ( la*lb )>>>0; // asm type annotation; no integer overflow possible
	mbits = ( ((ha*lb) + (la*hb))<<16 )>>>0; // asm type annotation; possible integer overflow

	// The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):
	return ( lbits + mbits )>>>0; // asm type annotation
}


// EXPORTS //

var _$uimul_732 = uimul;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Perform C-like multiplication of two unsigned 32-bit integers.
*
* @module @stdlib/math/base/special/uimul
*
* @example
* var uimul = require( '@stdlib/math/base/special/uimul' );
*
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/

// MODULES //

/* removed: var _$uimul_732 = require( './main.js' ); */;


// EXPORTS //

var _$uimul_731 = _$uimul_732;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;


// VARIABLES //

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111
var __LOW_WORD_MASK_734 = 0x0000ffff>>>0; // asm type annotation


// MAIN //

/**
* Performs multiplication of two unsigned 32-bit integers and returns an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.
*
* @param {ArrayLikeObject} [out] - output array
* @param {uinteger32} a - integer
* @param {uinteger32} b - integer
* @returns {ArrayLikeObject} output array
*
* @example
* var v = uimuldw( 0xAAAAAAAA, 0x55555555 );
* // returns [ 954437176, 1908874354 ]
*/
function uimuldw() {
	var out;
	var w1;
	var w2;
	var w3;
	var ha;
	var hb;
	var la;
	var lb;
	var a;
	var b;
	var t;
	var k;

	if ( arguments.length === 3 ) {
		out = arguments[ 0 ];
		a = arguments[ 1 ];
		b = arguments[ 2 ];
	} else {
		out = [ 0, 0 ];
		a = arguments[ 0 ];
		b = arguments[ 1 ];
	}
	if ( _$isnan_103( a ) || _$isnan_103( b ) ) {
		return NaN;
	}
	a >>>= 0; // asm type annotation
	b >>>= 0; // asm type annotation

	ha = ( a >>> 16 ) >>> 0;
	la = ( a & __LOW_WORD_MASK_734 ) >>> 0;

	hb = ( b >>> 16 ) >>> 0;
	lb = ( b & __LOW_WORD_MASK_734 ) >>> 0;

	t = ( la*lb ) >>> 0;
	w3 = ( t & __LOW_WORD_MASK_734 ) >>> 0;
	k = ( t >>> 16 ) >>> 0;

	t = ( ( ha*lb ) + k ) >>> 0;
	w2 = ( t & __LOW_WORD_MASK_734 ) >>> 0;
	w1 = ( t >>> 16 ) >>> 0;

	t = ( ( la*hb ) + w2 ) >>> 0;
	k = ( t >>> 16 ) >>> 0;

	out[ 0 ] = ( ( ha*hb ) + w1 + k ) >>> 0; // compute the higher 32 bits and cast to an unsigned 32-bit integer
	out[ 1 ] = ( ( t << 16 ) + w3) >>> 0; // compute the lower 32 bits and cast to an unsigned 32-bit integer

	return out;
}


// EXPORTS //

var _$uimuldw_734 = uimuldw;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Perform multiplication of two unsigned 32-bit integers and return an array of two unsigned 32-bit integers which represents the unsigned 64-bit integer product.
*
* @module @stdlib/math/base/special/uimuldw
*
* @example
* var uimuldw = require( '@stdlib/math/base/special/uimuldw' );
*
* var v = uimuldw( 0xAAAAAAAA, 0x55555555 );
* // returns [ 954437176, 1908874354 ]
*/

// MODULES //

/* removed: var _$uimuldw_734 = require( './main.js' ); */;


// EXPORTS //

var _$uimuldw_733 = _$uimuldw_734;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;


// MAIN //

/**
* Computes the versed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} versed cosine
*
* @example
* var v = vercos( 0.0 );
* // returns 2.0
*
* @example
* var v = vercos( 3.141592653589793/2.0 );
* // returns 1.0
*
* @example
* var v = vercos( -3.141592653589793/6.0 );
* // returns ~1.8660
*
* @example
* var v = vercos( NaN );
* // returns NaN
*/
function vercos( x ) {
	return 1.0 + _$cos_226( x );
}


// EXPORTS //

var _$vercos_736 = vercos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the versed cosine.
*
* @module @stdlib/math/base/special/vercos
*
* @example
* var vercos = require( '@stdlib/math/base/special/vercos' );
*
* var v = vercos( 0.0 );
* // returns 0.0
*
* v = vercos( 3.141592653589793/2.0 );
* // returns 1.0
*
* v = vercos( -3.141592653589793/6.0 );
* // returns ~1.8660
*
* v = vercos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$vercos_736 = require( './vercos.js' ); */;


// EXPORTS //

var _$vercos_735 = _$vercos_736;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cos_226 = require( '@stdlib/math/base/special/cos' ); */;


// MAIN //

/**
* Computes the versed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} versed sine
*
* @example
* var v = versin( 0.0 );
* // returns 0.0
*
* @example
* var v = versin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* @example
* var v = versin( -3.141592653589793/6.0 );
* // returns ~0.13397
*
* @example
* var v = versin( NaN );
* // returns NaN
*/
function versin( x ) {
	return 1.0 - _$cos_226( x );
}


// EXPORTS //

var _$versin_738 = versin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the versed sine.
*
* @module @stdlib/math/base/special/versin
*
* @example
* var versin = require( '@stdlib/math/base/special/versin' );
*
* var v = versin( 0.0 );
* // returns 0.0
*
* v = versin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* v = versin( -3.141592653589793/6.0 );
* // returns ~0.13397
*
* v = versin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$versin_738 = require( './versin.js' ); */;


// EXPORTS //

var _$versin_737 = _$versin_738;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$trunc_719 = require( '@stdlib/math/base/special/trunc' ); */;


// MAIN //

/**
* Wraps a value on the half-open interval `[min,max)`.
*
* @param {number} v - input value
* @param {number} min - minimum value
* @param {number} max - maximum value
* @returns {number} wrapped value
*
* @example
* var v = wrap( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = wrap( -3.14, 0.0, 5.0 );
* // returns ~1.86
*
* v = wrap( 10.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = wrap( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = wrap( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = wrap( 3.14, 0.0, NaN );
* // returns NaN
*
* v = wrap( 3.14, 5.0, 0.0 );
* // returns NaN
*/
function wrap( v, min, max ) {
	var delta;
	if (
		_$isnan_103( v ) ||
		_$isnan_103( min ) ||
		_$isnan_103( max ) ||
		max <= min
	) {
		return NaN;
	}
	// Normalize +-0 to +0...
	if ( v === 0.0 ) {
		v = 0.0;
	}
	if ( min === 0.0 ) {
		min = 0.0;
	}
	if ( max === 0.0 ) {
		max = 0.0;
	}
	// Simple case where value is already within range...
	if ( min <= v && v < max ) {
		return v;
	}
	// Perform range reduction...
	delta = max - min;
	if ( v < min ) {
		v += delta * ( _$trunc_719( (min-v)/delta ) + 1.0 );
	}
	return min + ( (v-min) % delta );
}


// EXPORTS //

var _$wrap_740 = wrap;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Wrap a value on the half-open interval `[min,max)`.
*
* @module @stdlib/math/base/special/wrap
*
* @example
* var wrap = require( '@stdlib/math/base/special/wrap' );
*
* var v = wrap( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = wrap( -3.14, 0.0, 5.0 );
* // returns ~1.86
*
* v = wrap( 10.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = wrap( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = wrap( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = wrap( 3.14, 0.0, NaN );
* // returns NaN
*
* v = wrap( 3.14, 5.0, 0.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$wrap_740 = require( './main.js' ); */;


// EXPORTS //

var _$wrap_739 = _$wrap_740;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_558 = require( '@stdlib/math/base/special/log1p' ); */;


// MAIN //

/**
* Computes `x * ln(y+1)` so that the result is `0` if `x = 0`.
*
* @param {number} x - input value
* @param {number} y - input value
* @returns {number} function value
*
* @example
* var out = xlog1py( 3.0, 2.0 );
* // returns ~3.296
*
* @example
* var out = xlog1py( 1.5, 5.9 );
* // returns ~2.897
*
* @example
* var out = xlog1py( 0.9, 1.0 );
* // returns ~0.624
*
* @example
* var out = xlog1py( 1.0, 0.0 );
* // returns 0.0
*
* @example
* var out = xlog1py( 0.0, -2.0 );
* // returns 0.0
*
* @example
* var out = xlog1py( 1.5, NaN );
* // returns NaN
*
* @example
* var out = xlog1py( 0.0, NaN );
* // returns NaN
*
* @example
* var out = xlog1py( NaN, 2.3 );
* // returns NaN
*/
function xlog1py( x, y ) {
	if ( x === 0.0 && !_$isnan_103( y ) ) {
		return 0.0;
	}
	return x * _$log1p_558( y );
}


// EXPORTS //

var _$xlog1py_742 = xlog1py;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x * ln(y+1)` so that the result is `0` if `x = 0`.
*
* @module @stdlib/math/base/special/xlog1py
*
* @example
* var xlog1py = require( '@stdlib/math/base/special/xlog1py' );
*
* var out = xlog1py( 3.0, 2.0 );
* // returns ~3.296
*
* out = xlog1py( 1.5, 5.9 );
* // returns ~2.897
*
* out = xlog1py( 0.9, 1.0 );
* // returns ~0.624
*
* out = xlog1py( 1.0, 0.0 );
* // returns 0.0
*
* out = xlog1py( 0.0, -2.0 );
* // returns 0.0
*
* out = xlog1py( 1.5, NaN );
* // returns NaN
*
* out = xlog1py( 0.0, NaN );
* // returns NaN
*
* out = xlog1py( NaN, 2.3 );
* // returns NaN
*/

// MODULES //

/* removed: var _$xlog1py_742 = require( './xlog1py.js' ); */;


// EXPORTS //

var _$xlog1py_741 = _$xlog1py_742;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_103 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_545 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Computes `x * ln(y)` so that the result is `0` if `x = 0`.
*
* @param {number} x - input value
* @param {number} y - input value
* @returns {number} function value
*
* @example
* var out = xlogy( 3.0, 2.0 );
* // returns ~2.079
*
* @example
* var out = xlogy( 1.5, 5.9 );
* // returns ~2.662
*
* @example
* var out = xlogy( 0.9, 1.0 );
* // returns 0.0
*
* @example
* var out = xlogy( 0.0, -2.0 );
* // returns 0.0
*
* @example
* var out = xlogy( 1.5, NaN );
* // returns NaN
*
* @example
* var out = xlogy( 0.0, NaN );
* // returns NaN
*
* @example
* var out = xlogy( NaN, 2.3 );
* // returns NaN
*/
function xlogy( x, y ) {
	if ( x === 0.0 && !_$isnan_103( y ) ) {
		return 0.0;
	}
	return x * _$ln_545( y );
}


// EXPORTS //

var _$xlogy_744 = xlogy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x * ln(y)` so that the result is `0` if `x = 0`.
*
* @module @stdlib/math/base/special/xlogy
*
* @example
* var xlogy = require( '@stdlib/math/base/special/xlogy' );
*
* var out = xlogy( 3.0, 2.0 );
* // returns ~2.079
*
* out = xlogy( 1.5, 5.9 );
* // returns ~2.662
*
* out = xlogy( 0.9, 1.0 );
* // returns 0.0
*
* out = xlogy( 0.0, -2.0 );
* // returns 0.0
*
* out = xlogy( 1.5, NaN );
* // returns NaN
*
* out = xlogy( 0.0, NaN );
* // returns NaN
*
* out = xlogy( NaN, 2.3 );
* // returns NaN
*/

// MODULES //

/* removed: var _$xlogy_744 = require( './xlogy.js' ); */;


// EXPORTS //

var _$xlogy_743 = _$xlogy_744;

"use strict";

/* removed: var _$setReadOnly_789 = require('@stdlib/utils/define-read-only-property'); */;

var ns = {};
_$setReadOnly_789(ns,'base',{});
_$setReadOnly_789(ns['base'],'abs',_$abs_118);
_$setReadOnly_789(ns['base'],'abs2',_$abs2_120);
_$setReadOnly_789(ns['base'],'acos',_$acos_122);
_$setReadOnly_789(ns['base'],'acosh',_$acosh_124);
_$setReadOnly_789(ns['base'],'acoth',_$acoth_125);
_$setReadOnly_789(ns['base'],'acovercos',_$acovercos_128);
_$setReadOnly_789(ns['base'],'acoversin',_$acoversin_130);
_$setReadOnly_789(ns['base'],'ahavercos',_$ahavercos_132);
_$setReadOnly_789(ns['base'],'ahaversin',_$ahaversin_134);
_$setReadOnly_789(ns['base'],'asin',_$asin_136);
_$setReadOnly_789(ns['base'],'asinh',_$asinh_140);
_$setReadOnly_789(ns['base'],'atan',_$atan_142);
_$setReadOnly_789(ns['base'],'atan2',_$atan2_146);
_$setReadOnly_789(ns['base'],'atanh',_$atanh_148);
_$setReadOnly_789(ns['base'],'avercos',_$avercos_150);
_$setReadOnly_789(ns['base'],'aversin',_$aversin_152);
_$setReadOnly_789(ns['base'],'bernoulli',_$bernoulli_155);
_$setReadOnly_789(ns['base'],'besselj0',_$j0_156);
_$setReadOnly_789(ns['base'],'besselj1',_$j1_162);
_$setReadOnly_789(ns['base'],'bessely0',_$y0_168);
_$setReadOnly_789(ns['base'],'bessely1',_$y1_175);
_$setReadOnly_789(ns['base'],'beta',_$beta_182);
_$setReadOnly_789(ns['base'],'betainc',_$betainc_185);
_$setReadOnly_789(ns['base'],'betaincinv',_$betaincinv_187);
_$setReadOnly_789(ns['base'],'betaln',_$betaln_191);
_$setReadOnly_789(ns['base'],'binet',_$binet_192);
_$setReadOnly_789(ns['base'],'binomcoef',_$binomcoef_195);
_$setReadOnly_789(ns['base'],'binomcoefln',_$binomcoefln_197);
_$setReadOnly_789(ns['base'],'boxcox',_$boxcox_198);
_$setReadOnly_789(ns['base'],'boxcox1p',_$boxcox1p_200);
_$setReadOnly_789(ns['base'],'boxcox1pinv',_$boxcox1pinv_202);
_$setReadOnly_789(ns['base'],'boxcoxinv',_$boxcoxinv_204);
_$setReadOnly_789(ns['base'],'cbrt',_$cbrt_207);
_$setReadOnly_789(ns['base'],'ceil',_$ceil_210);
_$setReadOnly_789(ns['base'],'ceil10',_$ceil10_212);
_$setReadOnly_789(ns['base'],'ceil2',_$ceil2_214);
_$setReadOnly_789(ns['base'],'ceilb',_$ceilb_216);
_$setReadOnly_789(ns['base'],'ceiln',_$ceiln_218);
_$setReadOnly_789(ns['base'],'ceilsd',_$ceilsd_220);
_$setReadOnly_789(ns['base'],'clamp',_$clamp_221);
_$setReadOnly_789(ns['base'],'copysign',_$copysign_224);
_$setReadOnly_789(ns['base'],'cos',_$cos_226);
_$setReadOnly_789(ns['base'],'cosh',_$cosh_228);
_$setReadOnly_789(ns['base'],'cosm1',_$cosm1_230);
_$setReadOnly_789(ns['base'],'cospi',_$cospi_233);
_$setReadOnly_789(ns['base'],'covercos',_$covercos_235);
_$setReadOnly_789(ns['base'],'coversin',_$coversin_237);
_$setReadOnly_789(ns['base'],'deg2rad',_$deg2rad_239);
_$setReadOnly_789(ns['base'],'digamma',_$digamma_242);
_$setReadOnly_789(ns['base'],'diracDelta',_$diracDelta_247);
_$setReadOnly_789(ns['base'],'eta',_$eta_249);
_$setReadOnly_789(ns['base'],'ellipe',_$ellipe_250);
_$setReadOnly_789(ns['base'],'ellipk',_$ellipk_264);
_$setReadOnly_789(ns['base'],'erf',_$erf_279);
_$setReadOnly_789(ns['base'],'erfc',_$erfc_289);
_$setReadOnly_789(ns['base'],'erfcinv',_$erfcinv_299);
_$setReadOnly_789(ns['base'],'erfinv',_$erfinv_306);
_$setReadOnly_789(ns['base'],'exp',_$exp_314);
_$setReadOnly_789(ns['base'],'exp10',_$exp10_317);
_$setReadOnly_789(ns['base'],'exp2',_$exp2_321);
_$setReadOnly_789(ns['base'],'expit',_$expit_324);
_$setReadOnly_789(ns['base'],'expm1',_$expm1_327);
_$setReadOnly_789(ns['base'],'expm1rel',_$expm1rel_329);
_$setReadOnly_789(ns['base'],'factorial',_$factorial_333);
_$setReadOnly_789(ns['base'],'factorialln',_$factorialln_335);
_$setReadOnly_789(ns['base'],'fallingFactorial',_$fallingFactorial_337({}));
_$setReadOnly_789(ns['base'],'fibonacci',_$fibonacci_342);
_$setReadOnly_789(ns['base'],'fibonacciIndex',_$fibonacciIndex_338);
_$setReadOnly_789(ns['base'],'flipsign',_$flipsign_344);
_$setReadOnly_789(ns['base'],'floor',_$floor_346);
_$setReadOnly_789(ns['base'],'floor10',_$floor10_348);
_$setReadOnly_789(ns['base'],'floor2',_$floor2_350);
_$setReadOnly_789(ns['base'],'floorb',_$floorb_352);
_$setReadOnly_789(ns['base'],'floorn',_$floorn_354);
_$setReadOnly_789(ns['base'],'floorsd',_$floorsd_356);
_$setReadOnly_789(ns['base'],'fresnel',_$fresnel_358);
_$setReadOnly_789(ns['base'],'fresnelc',_$fresnelc_365);
_$setReadOnly_789(ns['base'],'fresnels',_$fresnels_370);
_$setReadOnly_789(ns['base'],'frexp',_$frexp_375);
_$setReadOnly_789(ns['base'],'gamma',_$gamma_387);
_$setReadOnly_789(ns['base'],'gammaDeltaRatio',_$gammaDeltaRatio_379);
_$setReadOnly_789(ns['base'],'gammaLanczosSum',_$gammaLanczosSum_384);
_$setReadOnly_789(ns['base'],'gammaLanczosSumExpGScaled',_$gammaLanczosSumExpGScaled_381);
_$setReadOnly_789(ns['base'],'gamma1pm1',_$gamma1pm1_393);
_$setReadOnly_789(ns['base'],'gammainc',_$gammainc_403);
_$setReadOnly_789(ns['base'],'gammaincinv',_$gammaincinv_428);
_$setReadOnly_789(ns['base'],'gammaln',_$gammaln_445);
_$setReadOnly_789(ns['base'],'gcd',_$gcd_459);
_$setReadOnly_789(ns['base'],'hacovercos',_$hacovercos_461);
_$setReadOnly_789(ns['base'],'hacoversin',_$hacoversin_463);
_$setReadOnly_789(ns['base'],'havercos',_$havercos_465);
_$setReadOnly_789(ns['base'],'haversin',_$haversin_467);
_$setReadOnly_789(ns['base'],'heaviside',_$heaviside_469);
_$setReadOnly_789(ns['base'],'hypot',_$hypot_471);
_$setReadOnly_789(ns['base'],'imul',_$imul_472);
_$setReadOnly_789(ns['base'],'imuldw',_$imuldw_475);
_$setReadOnly_789(ns['base'],'absInt32',_$absInt32_478);
_$setReadOnly_789(ns['base'],'inv',_$inv_479);
_$setReadOnly_789(ns['base'],'kernelBetainc',_$kernelBetainc_488);
_$setReadOnly_789(ns['base'],'kernelBetaincinv',_$kernelBetaincinv_496);
_$setReadOnly_789(ns['base'],'kernelCos',_$kernelCos_529);
_$setReadOnly_789(ns['base'],'kernelSin',_$kernelSin_533);
_$setReadOnly_789(ns['base'],'kernelTan',_$kernelTan_535);
_$setReadOnly_789(ns['base'],'kroneckerDelta',_$kroneckerDelta_539);
_$setReadOnly_789(ns['base'],'lcm',_$lcm_541);
_$setReadOnly_789(ns['base'],'ldexp',_$ldexp_543);
_$setReadOnly_789(ns['base'],'ln',_$ln_545);
_$setReadOnly_789(ns['base'],'log',_$log_549);
_$setReadOnly_789(ns['base'],'log10',_$log10_551);
_$setReadOnly_789(ns['base'],'log1mexp',_$log1mexp_556);
_$setReadOnly_789(ns['base'],'log1p',_$log1p_558);
_$setReadOnly_789(ns['base'],'log1pexp',_$log1pexp_561);
_$setReadOnly_789(ns['base'],'log2',_$log2_563);
_$setReadOnly_789(ns['base'],'logaddexp',_$logaddexp_568);
_$setReadOnly_789(ns['base'],'logit',_$logit_570);
_$setReadOnly_789(ns['base'],'lucas',_$lucas_572);
_$setReadOnly_789(ns['base'],'max',_$max_575);
_$setReadOnly_789(ns['base'],'maxabs',_$maxabs_577);
_$setReadOnly_789(ns['base'],'min',_$min_579);
_$setReadOnly_789(ns['base'],'minabs',_$minabs_581);
_$setReadOnly_789(ns['base'],'minmax',_$minmax_583);
_$setReadOnly_789(ns['base'],'minmaxabs',_$minmaxabs_586);
_$setReadOnly_789(ns['base'],'modf',_$modf_589);
_$setReadOnly_789(ns['base'],'negafibonacci',_$negafibonacci_592);
_$setReadOnly_789(ns['base'],'negalucas',_$negalucas_595);
_$setReadOnly_789(ns['base'],'nonfibonacci',_$nonfibonacci_598);
_$setReadOnly_789(ns['base'],'pdiff',_$pdiff_600);
_$setReadOnly_789(ns['base'],'polygamma',_$polygamma_604);
_$setReadOnly_789(ns['base'],'pow',_$pow_618);
_$setReadOnly_789(ns['base'],'powm1',_$powm1_629);
_$setReadOnly_789(ns['base'],'rad2deg',_$rad2deg_631);
_$setReadOnly_789(ns['base'],'ramp',_$ramp_633);
_$setReadOnly_789(ns['base'],'rempio2',_$rempio2_635);
_$setReadOnly_789(ns['base'],'zeta',_$zeta_641);
_$setReadOnly_789(ns['base'],'risingFactorial',_$risingFactorial_650({}));
_$setReadOnly_789(ns['base'],'round',_$round_652);
_$setReadOnly_789(ns['base'],'round10',_$round10_654);
_$setReadOnly_789(ns['base'],'round2',_$round2_656);
_$setReadOnly_789(ns['base'],'roundb',_$roundb_658);
_$setReadOnly_789(ns['base'],'roundn',_$roundn_660);
_$setReadOnly_789(ns['base'],'roundsd',_$roundsd_662);
_$setReadOnly_789(ns['base'],'rsqrt',_$rsqrt_664);
_$setReadOnly_789(ns['base'],'sici',_$sici_666);
_$setReadOnly_789(ns['base'],'signum',_$signum_681);
_$setReadOnly_789(ns['base'],'sin',_$sin_683);
_$setReadOnly_789(ns['base'],'sinc',_$sinc_685);
_$setReadOnly_789(ns['base'],'sincos',_$sincos_687);
_$setReadOnly_789(ns['base'],'sincospi',_$sincospi_691);
_$setReadOnly_789(ns['base'],'sinh',_$sinh_694);
_$setReadOnly_789(ns['base'],'sinpi',_$sinpi_697);
_$setReadOnly_789(ns['base'],'spence',_$spence_699);
_$setReadOnly_789(ns['base'],'sqrt',_$sqrt_703);
_$setReadOnly_789(ns['base'],'sqrt1pm1',_$sqrt1pm1_705);
_$setReadOnly_789(ns['base'],'tan',_$tan_707);
_$setReadOnly_789(ns['base'],'tanh',_$tanh_709);
_$setReadOnly_789(ns['base'],'trigamma',_$trigamma_712);
_$setReadOnly_789(ns['base'],'trunc',_$trunc_719);
_$setReadOnly_789(ns['base'],'trunc10',_$trunc10_721);
_$setReadOnly_789(ns['base'],'trunc2',_$trunc2_723);
_$setReadOnly_789(ns['base'],'truncb',_$truncb_725);
_$setReadOnly_789(ns['base'],'truncn',_$truncn_727);
_$setReadOnly_789(ns['base'],'truncsd',_$truncsd_729);
_$setReadOnly_789(ns['base'],'uimul',_$uimul_731);
_$setReadOnly_789(ns['base'],'uimuldw',_$uimuldw_733);
_$setReadOnly_789(ns['base'],'vercos',_$vercos_735);
_$setReadOnly_789(ns['base'],'versin',_$versin_737);
_$setReadOnly_789(ns['base'],'wrap',_$wrap_739);
_$setReadOnly_789(ns['base'],'xlog1py',_$xlog1py_741);
_$setReadOnly_789(ns['base'],'xlogy',_$xlogy_743);

var _$ns_801 = ns;

return _$ns_801;

});

